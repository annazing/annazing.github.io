!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=137)}([function(e,t,n){"use strict";e.exports=n(75)},function(e,t,n){e.exports=n(79)()},function(e,t,n){var r=n(26)("wks"),o=n(22),i=n(4).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(4),o=n(13),i=n(11),a=n(14),u=n(17),l=function(e,t,n){var c,s,f,p,d=e&l.F,h=e&l.G,m=e&l.S,v=e&l.P,y=e&l.B,g=h?r:m?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(c in h&&(n=t),n)f=((s=!d&&g&&void 0!==g[c])?g:n)[c],p=y&&s?u(f,r):v&&"function"==typeof f?u(Function.call,f):f,g&&a(g,c,f,e&l.U),b[c]!=f&&i(b,c,p),v&&w[c]!=f&&(w[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(6);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(5),o=n(51),i=n(36),a=Object.defineProperty;t.f=n(7)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return i}),n.d(t,"applyMiddleware",function(){return v}),n.d(t,"bindActionCreators",function(){return f}),n.d(t,"combineReducers",function(){return c}),n.d(t,"compose",function(){return m}),n.d(t,"createStore",function(){return u});var r=n(48),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=l(c,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var c=u[i],s=n[c],f=e[c],p=s(f,t);if(void 0===p){var d=l(c,t);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=s(o,t))}return n}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(n,!0).forEach(function(t){p(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(8),o=n(21);e.exports=n(7)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(4),o=n(11),i=n(15),a=n(22)("src"),u=n(84),l=(""+u).split("toString");n(13).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,a)||o(n,a,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(27),o=n(37);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(18);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(53),o=n(39);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(37);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=!1},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports={}},function(e,t,n){var r=n(13),o=n(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(23)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(24);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(54),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){var r=n(8).f,o=n(15),i=n(2)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(24),o=n(2)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(76)},function(e,t,n){var r=n(6),o=n(4).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(26)("keys"),o=n(22);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(53),o=n(39).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(30),o=n(21),i=n(16),a=n(36),u=n(15),l=n(51),c=Object.getOwnPropertyDescriptor;t.f=n(7)?c:function(e,t){if(e=i(e),t=a(t,!0),l)try{return c(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(17),o=n(27),i=n(20),a=n(28),u=n(91);e.exports=function(e,t){var n=1==e,l=2==e,c=3==e,s=4==e,f=6==e,p=5==e||f,d=t||u;return function(t,u,h){for(var m,v,y=i(t),g=o(y),b=r(u,h,3),w=a(g.length),x=0,S=n?d(t,w):l?d(t,0):void 0;w>x;x++)if((p||x in g)&&(v=b(m=g[x],x,y),e))if(n)S[x]=v;else if(v)switch(e){case 3:return!0;case 5:return m;case 6:return x;case 2:S.push(m)}else if(s)return!1;return f?-1:c||s?s:S}}},function(e,t,n){"use strict";var r=n(4),o=n(15),i=n(7),a=n(3),u=n(14),l=n(93).KEY,c=n(12),s=n(26),f=n(32),p=n(22),d=n(2),h=n(56),m=n(57),v=n(94),y=n(55),g=n(5),b=n(6),w=n(20),x=n(16),S=n(36),E=n(21),_=n(44),k=n(95),T=n(41),P=n(29),C=n(8),O=n(19),N=T.f,j=C.f,R=k.f,M=r.Symbol,I=r.JSON,L=I&&I.stringify,A=d("_hidden"),D=d("toPrimitive"),F={}.propertyIsEnumerable,U=s("symbol-registry"),z=s("symbols"),W=s("op-symbols"),B=Object.prototype,V="function"==typeof M&&!!P.f,q=r.QObject,$=!q||!q.prototype||!q.prototype.findChild,H=i&&c(function(){return 7!=_(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=N(B,t);r&&delete B[t],j(e,t,n),r&&e!==B&&j(B,t,r)}:j,Q=function(e){var t=z[e]=_(M.prototype);return t._k=e,t},K=V&&"symbol"==typeof M.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof M},G=function(e,t,n){return e===B&&G(W,t,n),g(e),t=S(t,!0),g(n),o(z,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=_(n,{enumerable:E(0,!1)})):(o(e,A)||j(e,A,E(1,{})),e[A][t]=!0),H(e,t,n)):j(e,t,n)},Y=function(e,t){g(e);for(var n,r=v(t=x(t)),o=0,i=r.length;i>o;)G(e,n=r[o++],t[n]);return e},X=function(e){var t=F.call(this,e=S(e,!0));return!(this===B&&o(z,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(z,e)||o(this,A)&&this[A][e])||t)},J=function(e,t){if(e=x(e),t=S(t,!0),e!==B||!o(z,t)||o(W,t)){var n=N(e,t);return!n||!o(z,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=R(x(e)),r=[],i=0;n.length>i;)o(z,t=n[i++])||t==A||t==l||r.push(t);return r},ee=function(e){for(var t,n=e===B,r=R(n?W:x(e)),i=[],a=0;r.length>a;)!o(z,t=r[a++])||n&&!o(B,t)||i.push(z[t]);return i};V||(u((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===B&&t.call(W,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),H(this,e,E(1,n))};return i&&$&&H(B,e,{configurable:!0,set:t}),Q(e)}).prototype,"toString",function(){return this._k}),T.f=J,C.f=G,n(40).f=k.f=Z,n(30).f=X,P.f=ee,i&&!n(23)&&u(B,"propertyIsEnumerable",X,!0),h.f=function(e){return Q(d(e))}),a(a.G+a.W+a.F*!V,{Symbol:M});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)d(te[ne++]);for(var re=O(d.store),oe=0;re.length>oe;)m(re[oe++]);a(a.S+a.F*!V,"Symbol",{for:function(e){return o(U,e+="")?U[e]:U[e]=M(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){$=!0},useSimple:function(){$=!1}}),a(a.S+a.F*!V,"Object",{create:function(e,t){return void 0===t?_(e):Y(_(e),t)},defineProperty:G,defineProperties:Y,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=c(function(){P.f(1)});a(a.S+a.F*ie,"Object",{getOwnPropertySymbols:function(e){return P.f(w(e))}}),I&&a(a.S+a.F*(!V||c(function(){var e=M();return"[null]"!=L([e])||"{}"!=L({a:e})||"{}"!=L(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,L.apply(I,r)}}),M.prototype[D]||n(11)(M.prototype,D,M.prototype.valueOf),f(M,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){var r=n(5),o=n(52),i=n(39),a=n(38)("IE_PROTO"),u=function(){},l=function(){var e,t=n(35)("iframe"),r=i.length;for(t.style.display="none",n(58).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(3);r(r.S+r.F*!n(7),"Object",{defineProperty:n(8).f})},function(e,t,n){"use strict";e.exports=n(81)},function(e,t,n){"use strict";var r=n(46),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=p(n,y);try{c(t,y,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var o,i=n(72);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(50),n(82)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports=!n(7)&&!n(12)(function(){return 7!=Object.defineProperty(n(35)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(8),o=n(5),i=n(19);e.exports=n(7)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,l=0;u>l;)r.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var r=n(15),o=n(16),i=n(85)(!1),a=n(38)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),l=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~i(c,n)||c.push(n));return c}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){t.f=n(2)},function(e,t,n){var r=n(4),o=n(13),i=n(23),a=n(56),u=n(8).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(4).document;e.exports=r&&r.documentElement},function(e,t,n){"use strict";var r=n(97),o=n(98),i=n(25),a=n(16);e.exports=n(99)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r=n(33),o={};o[n(2)("toStringTag")]="z",o+""!="[object z]"&&n(14)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){n(57)("asyncIterator")},function(e,t,n){var r=n(3);r(r.S,"Object",{create:n(44)})},function(e,t,n){var r=n(3);r(r.S,"Object",{setPrototypeOf:n(107).set})},function(e,t,n){var r,o,i,a=n(17),u=n(65),l=n(58),c=n(35),s=n(4),f=s.process,p=s.setImmediate,d=s.clearImmediate,h=s.MessageChannel,m=s.Dispatch,v=0,y={},g=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},b=function(e){g.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return y[++v]=function(){u("function"==typeof e?e:Function(e),t)},r(v),v},d=function(e){delete y[e]},"process"==n(24)(f)?r=function(e){f.nextTick(a(g,e,1))}:m&&m.now?r=function(e){m.now(a(g,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(e){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),e.exports={set:p,clear:d}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){"use strict";var r=n(18);function o(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){"use strict";var r=n(5),o=n(125),i=n(126);n(127)("search",1,function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var u=r(e),l=String(this),c=u.lastIndex;o(c,0)||(u.lastIndex=0);var s=i(u,l);return o(u.lastIndex,c)||(u.lastIndex=c),null===s?-1:s.index}]})},function(e,t,n){"use strict";var r,o,i=n(129),a=RegExp.prototype.exec,u=String.prototype.replace,l=a,c=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(c||s)&&(l=function(e){var t,n,r,o,l=this;return s&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),c&&(t=l.lastIndex),r=a.call(l,e),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:t),s&&r&&r.length>1&&u.call(r[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),e.exports=l},function(e,t,n){var r=n(3);r(r.P,"Function",{bind:n(130)})},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(i).concat([o]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var u=e[a];null!=u[0]&&r[u[0]]||(n&&!u[2]?u[2]=n:n&&(u[2]="(".concat(u[2],") and (").concat(n,")")),t.push(u))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,c=0,s=[],f=n(134);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(g(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=v(t)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(9).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t,n){e.exports=n.p+"2ab24c68e23174b04209cd620e5b82e5.png"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(49),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function S(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=x.prototype;var _=E.prototype=new S;_.constructor=E,r(_,x.prototype),_.isPureReactComponent=!0;var k={current:null},T={current:null},P=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:T.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,R=[];function M(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+A(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+A(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+A(u,c++),r,o);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),L(e,F,t=M(t,i,r,o)),I(t)}function z(){var e=k.current;return null===e&&g("321"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,D,t=M(null,null,t,n)),I(t)},count:function(e){return L(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return N(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentOwner:T,assign:r}},B={default:W},V=B&&W||B;e.exports=V.default||V},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(49),i=n(77);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!y[n])for(var r in t.extractEvents||a("97",e),y[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var y=[],g={},b={},w={},x=null,S=null,E=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var m=l;u=!1,l=null}else a("198"),m=void 0;c||(c=!0,s=m)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(P=k(P,e)),e=P,P=null,e&&(T(e,C),P&&a("95"),c))throw e=s,c=!1,s=null,e}var R=Math.random().toString(36).slice(2),M="__reactInternalInstance$"+R,I="__reactEventHandlers$"+R;function L(e){if(e[M])return e[M];for(;!e[M];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[M]).tag||6===e.tag?e:null}function A(e){return!(e=e[M])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function F(e){return e[I]||null}function U(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=U(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function V(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function q(e){T(e,W)}var $=!("undefined"==typeof window||!window.document||!window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},K={},G={};function Y(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return K[e]=n[t];return e}$&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],me=$&&"CompositionEvent"in window,ve=null;$&&"documentMode"in document&&(ve=document.documentMode);var ye=$&&"TextEvent"in window&&!ve,ge=$&&(!me||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function Se(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var ke={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else _e?Se(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(_e||o!==we.compositionStart?o===we.compositionEnd&&_e&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,_e=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),q(o),i=o):i=null,(e=ye?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(_e)return"compositionend"===e||!me&&Se(e,t)?(e=ie(),oe=re=ne=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(we.beforeInput,t,n,r)).data=e,q(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Pe=null,Ce=null;function Oe(e){if(e=S(e)){"function"!=typeof Te&&a("280");var t=x(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Pe?Ce?Ce.push(e):Ce=[e]:Pe=e}function je(){if(Pe){var e=Pe,t=Ce;if(Ce=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Re(e,t){return e(t)}function Me(e,t,n){return e(t,n)}function Ie(){}var Le=!1;function Ae(e,t){if(Le)return e(t);Le=!0;try{return Re(e,t)}finally{Le=!1,(null!==Pe||null!==Ce)&&(Ie(),je())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!$)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Be(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ve(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;qe.hasOwnProperty("ReactCurrentDispatcher")||(qe.ReactCurrentDispatcher={current:null});var $e=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,Qe=He?Symbol.for("react.element"):60103,Ke=He?Symbol.for("react.portal"):60106,Ge=He?Symbol.for("react.fragment"):60107,Ye=He?Symbol.for("react.strict_mode"):60108,Xe=He?Symbol.for("react.profiler"):60114,Je=He?Symbol.for("react.provider"):60109,Ze=He?Symbol.for("react.context"):60110,et=He?Symbol.for("react.concurrent_mode"):60111,tt=He?Symbol.for("react.forward_ref"):60112,nt=He?Symbol.for("react.suspense"):60113,rt=He?Symbol.for("react.memo"):60115,ot=He?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ge:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace($e,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function St(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var kt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(kt.change,e,t,n)).type="change",Ne(n),q(e),e}var Pt=null,Ct=null;function Ot(e){j(e)}function Nt(e){if(Ve(D(e)))return e}function jt(e,t){if("change"===e)return t}var Rt=!1;function Mt(){Pt&&(Pt.detachEvent("onpropertychange",It),Ct=Pt=null)}function It(e){"value"===e.propertyName&&Nt(Ct)&&Ae(Ot,e=Tt(Ct,e,Ue(e)))}function Lt(e,t,n){"focus"===e?(Mt(),Ct=n,(Pt=t).attachEvent("onpropertychange",It)):"blur"===e&&Mt()}function At(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ct)}function Dt(e,t){if("click"===e)return Nt(t)}function Ft(e,t){if("input"===e||"change"===e)return Nt(t)}$&&(Rt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:kt,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?D(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=jt:Fe(o)?Rt?i=Ft:(i=At,a=Lt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Dt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Vt(){return Bt}var qt=0,$t=0,Ht=!1,Qt=!1,Kt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Ht?"mousemove"===e.type?e.screenX-t:0:(Ht=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Qt?"mousemove"===e.type?e.screenY-t:0:(Qt=!0,0)}}),Gt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,u=Yt.mouseLeave,l=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Gt,u=Yt.pointerLeave,l=Yt.pointerEnter,c="pointer");var s=null==i?o:D(i);if(o=null==t?o:D(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=U(a))c++;for(a=0,l=o;l;l=U(l))a++;for(;0<c-a;)t=U(t),c--;for(;0<a-c;)o=U(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=U(t),o=U(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=U(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=U(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=i.length;0<r--;)B(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var wn={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=le}return q(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,Sn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ue(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<y.length;u++){var l=y[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=k(a,l))}j(a)}}var _n=!0;function kn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Me(Cn,e,t)}function Cn(e,t){if(_n){var n=Ue(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ae(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var On={},Nn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Rn(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Nn++,On[e[jn]]={}),On[e[jn]]}function Mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function An(){for(var e=window,t=Mn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Mn((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Fn(e){var t=An(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Ln(n,i);var a=Ln(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Un=$&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Bn=null,Vn=null,qn=!1;function $n(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return qn||null==Wn||Wn!==Mn(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vn&&en(Vn,n)?null:(Vn=n,(e=le.getPooled(zn.select,Bn,e,t)).type="select",e.target=Wn,q(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Rn(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?D(t):window,e){case"focus":(Fe(i)||"true"===i.contentEditable)&&(Wn=i,Bn=t,Vn=null);break;case"blur":Vn=Bn=Wn=null;break;case"mousedown":qn=!0;break;case"contextmenu":case"mouseup":case"dragend":return qn=!1,$n(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return $n(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Xn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=F,S=A,E=D,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ut,SelectEventPlugin:Hn,BeforeInputEventPlugin:ke});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function sr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=Rn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Tn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&kn(o,e)}n[o]=!0}}}function dr(){}var hr=null,mr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0,wr=i.unstable_scheduleCallback,xr=i.unstable_cancelCallback;function Sr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var _r=[],kr=-1;function Tr(e){0>kr||(e.current=_r[kr],_r[kr]=null,kr--)}function Pr(e,t){_r[++kr]=e.current,e.current=t}var Cr={},Or={current:Cr},Nr={current:!1},jr=Cr;function Rr(e,t){var n=e.type.contextTypes;if(!n)return Cr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Mr(e){return null!=(e=e.childContextTypes)}function Ir(e){Tr(Nr),Tr(Or)}function Lr(e){Tr(Nr),Tr(Or)}function Ar(e,t,n){Or.current!==Cr&&a("168"),Pr(Or,t),Pr(Nr,n)}function Dr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Cr,jr=Or.current,Pr(Or,t),Pr(Nr,Nr.current),!0}function Ur(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Dr(e,t,jr),r.__reactInternalMemoizedMergedChildContext=t,Tr(Nr),Tr(Or),Pr(Or,t)):Tr(Nr),Pr(Nr,n)}var zr=null,Wr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function Vr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e,t,n,r){return new Vr(e,t,n,r)}function $r(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Hr(e,t){var n=e.alternate;return null===n?((n=qr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)$r(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ge:return Kr(n.children,o,i,t);case et:return Gr(n,3|o,i,t);case Ye:return Gr(n,2|o,i,t);case Xe:return(e=qr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=qr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=qr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Kr(e,t,n,r){return(e=qr(7,e,r,t)).expirationTime=n,e}function Gr(e,t,n,r){return e=qr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Yr(e,t,n){return(e=qr(6,e,null,t)).expirationTime=n,e}function Xr(e,t,n){return(t=qr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),to(t,e)}function Zr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),to(t,e)}function eo(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function to(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function no(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ro=(new r.Component).refs;function oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var io={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=xu(),o=Gi(r=Ka(r,e));o.payload=t,null!=n&&(o.callback=n),Ba(),Xi(e,o),Xa(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=xu(),o=Gi(r=Ka(r,e));o.tag=Vi,o.payload=t,null!=n&&(o.callback=n),Ba(),Xi(e,o),Xa(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=xu(),r=Gi(n=Ka(n,e));r.tag=qi,null!=t&&(r.callback=t),Ba(),Xi(e,r),Xa(e,n)}};function ao(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function uo(e,t,n){var r=!1,o=Cr,i=t.contextType;return"object"==typeof i&&null!==i?i=Wi(i):(o=Mr(t)?jr:Or.current,i=(r=null!=(r=t.contextTypes))?Rr(e,o):Cr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=io,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&io.enqueueReplaceState(t,t.state,null)}function co(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ro;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Wi(i):(i=Mr(t)?jr:Or.current,o.context=Rr(e,i)),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var so=Array.isArray;function fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function po(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Hr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Yr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=fo(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=fo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Kr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Yr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=fo(e,null,t),n.return=e,n;case Ke:return(t=Xr(t,e.mode,n)).return=e,t}if(so(t)||at(t))return(t=Kr(t,e.mode,n,null)).return=e,t;po(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ge?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ke:return n.key===o?s(e,t,n,r):null}if(so(n)||at(n))return null!==o?null:f(e,t,n,r,null);po(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ke:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(so(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);po(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)(f=p(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=at(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,c);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ge&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Qe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ge:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ge?i.props.children:i.props)).ref=fo(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ge?((r=Kr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Qr(i.type,i.key,i.props,null,e.mode,l)).ref=fo(e,r,i),l.return=e,e=l)}return u(e);case Ke:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Yr(i,e.mode,l)).return=e,e=r),u(e);if(so(i))return m(e,r,i,l);if(at(i))return v(e,r,i,l);if(s&&po(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var mo=ho(!0),vo=ho(!1),yo={},go={current:yo},bo={current:yo},wo={current:yo};function xo(e){return e===yo&&a("174"),e}function So(e,t){Pr(wo,t),Pr(bo,e),Pr(go,yo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Tr(go),Pr(go,t)}function Eo(e){Tr(go),Tr(bo),Tr(wo)}function _o(e){xo(wo.current);var t=xo(go.current),n=tr(t,e.type);t!==n&&(Pr(bo,e),Pr(go,n))}function ko(e){bo.current===e&&(Tr(go),Tr(bo))}var To=0,Po=2,Co=4,Oo=8,No=16,jo=32,Ro=64,Mo=128,Io=qe.ReactCurrentDispatcher,Lo=0,Ao=null,Do=null,Fo=null,Uo=null,zo=null,Wo=null,Bo=0,Vo=null,qo=0,$o=!1,Ho=null,Qo=0;function Ko(){a("321")}function Go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Yo(e,t,n,r,o,i){if(Lo=i,Ao=t,Fo=null!==e?e.memoizedState:null,Io.current=null===Fo?ci:si,t=n(r,o),$o){do{$o=!1,Qo+=1,Fo=null!==e?e.memoizedState:null,Wo=Uo,Vo=zo=Do=null,Io.current=si,t=n(r,o)}while($o);Ho=null,Qo=0}return Io.current=li,(e=Ao).memoizedState=Uo,e.expirationTime=Bo,e.updateQueue=Vo,e.effectTag|=qo,e=null!==Do&&null!==Do.next,Lo=0,Wo=zo=Uo=Fo=Do=Ao=null,Bo=0,Vo=null,qo=0,e&&a("300"),t}function Xo(){Io.current=li,Lo=0,Wo=zo=Uo=Fo=Do=Ao=null,Bo=0,Vo=null,qo=0,$o=!1,Ho=null,Qo=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===zo?Uo=zo=e:zo=zo.next=e,zo}function Zo(){if(null!==Wo)Wo=(zo=Wo).next,Fo=null!==(Do=Fo)?Do.next:null;else{null===Fo&&a("310");var e={memoizedState:(Do=Fo).memoizedState,baseState:Do.baseState,queue:Do.queue,baseUpdate:Do.baseUpdate,next:null};zo=null===zo?Uo=e:zo.next=e,Fo=Do.next}return zo}function ei(e,t){return"function"==typeof t?t(e):t}function ti(e){var t=Zo(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<Qo){var r=n.dispatch;if(null!==Ho){var o=Ho.get(n);if(void 0!==o){Ho.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Lo?(s||(s=!0,l=u,o=i),f>Bo&&(Bo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Vo?(Vo={lastEffect:null}).lastEffect=e.next=e:null===(t=Vo.lastEffect)?Vo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Vo.lastEffect=e),e}function ri(e,t,n,r){var o=Jo();qo|=e,o.memoizedState=ni(t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Zo();r=void 0===r?null:r;var i=void 0;if(null!==Do){var a=Do.memoizedState;if(i=a.destroy,null!==r&&Go(r,a.deps))return void ni(To,n,i,r)}qo|=e,o.memoizedState=ni(t,n,i,r)}function ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function ui(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Ao||null!==r&&r===Ao)if($o=!0,e={expirationTime:Lo,action:n,eagerReducer:null,eagerState:null,next:null},null===Ho&&(Ho=new Map),void 0===(n=Ho.get(t)))Ho.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ba();var o=xu(),i={expirationTime:o=Ka(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Jt(s,c))return}catch(e){}Xa(e,o)}}var li={readContext:Wi,useCallback:Ko,useContext:Ko,useEffect:Ko,useImperativeHandle:Ko,useLayoutEffect:Ko,useMemo:Ko,useReducer:Ko,useRef:Ko,useState:Ko,useDebugValue:Ko},ci={readContext:Wi,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Wi,useEffect:function(e,t){return ri(516,Mo|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,Co|jo,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,Co|jo,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ui.bind(null,Ao,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ei,lastRenderedState:e}).dispatch=ui.bind(null,Ao,e),[t.memoizedState,e]},useDebugValue:ai},si={readContext:Wi,useCallback:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wi,useEffect:function(e,t){return oi(516,Mo|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Co|jo,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Co|jo,e,t)},useMemo:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ti,useRef:function(){return Zo().memoizedState},useState:function(e){return ti(ei)},useDebugValue:ai},fi=null,pi=null,di=!1;function hi(e,t){var n=qr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vi(e){if(di){var t=pi;if(t){var n=t;if(!mi(e,t)){if(!(t=Sr(n))||!mi(e,t))return e.effectTag|=2,di=!1,void(fi=e);hi(fi,n)}fi=e,pi=Er(t)}else e.effectTag|=2,di=!1,fi=e}}function yi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fi=e}function gi(e){if(e!==fi)return!1;if(!di)return yi(e),di=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=pi;t;)hi(e,t),t=Sr(t);return yi(e),pi=fi?Sr(e.stateNode):null,!0}function bi(){pi=fi=null,di=!1}var wi=qe.ReactCurrentOwner,xi=!1;function Si(e,t,n,r){t.child=null===e?vo(t,null,n,r):mo(t,e.child,n,r)}function Ei(e,t,n,r,o){n=n.render;var i=t.ref;return zi(t,o),r=Yo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,Si(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function _i(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||$r(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ki(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ri(e,t,i):(t.effectTag|=1,(e=Hr(a,r)).ref=t.ref,e.return=t,t.child=e)}function ki(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(xi=!1,o<i)?Ri(e,t,i):Pi(e,t,n,r,i)}function Ti(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Pi(e,t,n,r,o){var i=Mr(n)?jr:Or.current;return i=Rr(t,i),zi(t,o),n=Yo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,Si(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function Ci(e,t,n,r,o){if(Mr(n)){var i=!0;Fr(t)}else i=!1;if(zi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),uo(t,n,r),co(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Wi(c):c=Rr(t,c=Mr(n)?jr:Or.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&lo(t,a,r,c),Hi=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(ta(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||Nr.current||Hi?("function"==typeof s&&(oo(t,n,s,r),l=t.memoizedState),(u=Hi||ao(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:no(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Wi(c):c=Rr(t,c=Mr(n)?jr:Or.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&lo(t,a,r,c),Hi=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(ta(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||Nr.current||Hi?("function"==typeof s&&(oo(t,n,s,r),p=t.memoizedState),(s=Hi||ao(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Oi(e,t,n,r,i,o)}function Oi(e,t,n,r,o,i){Ti(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Ur(t,n,!1),Ri(e,t,i);r=t.stateNode,wi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mo(t,e.child,null,i),t.child=mo(t,null,u,i)):Si(e,t,u,i),t.memoizedState=r.state,o&&Ur(t,n,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?Ar(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ar(0,t.context,!1),So(e,t.containerInfo)}function ji(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Kr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Kr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=vo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Hr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Hr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=mo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Kr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Kr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=mo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ri(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Hr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Hr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Mi(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)xi=!0;else if(r<n){switch(xi=!1,t.tag){case 3:Ni(t),bi();break;case 5:_o(t);break;case 1:Mr(t.type)&&Fr(t);break;case 4:So(t,t.stateNode.containerInfo);break;case 10:Fi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ji(e,t,n):null!==(t=Ri(e,t,n))?t.sibling:null}return Ri(e,t,n)}}else xi=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Rr(t,Or.current);if(zi(t,n),o=Yo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Xo(),Mr(r)){var i=!0;Fr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&oo(t,r,u,e),o.updater=io,t.stateNode=o,o._reactInternalFiber=t,co(t,r,e,n),t=Oi(null,t,r,!0,i,n)}else t.tag=0,Si(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return $r(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=no(e,i),u=void 0,o){case 0:u=Pi(null,t,e,i,n);break;case 1:u=Ci(null,t,e,i,n);break;case 11:u=Ei(null,t,e,i,n);break;case 14:u=_i(null,t,e,no(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:no(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ci(e,t,r,o=t.elementType===r?o:no(r,o),n);case 3:return Ni(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,ta(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(bi(),t=Ri(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pi=Er(t.stateNode.containerInfo),fi=t,o=di=!0),o?(t.effectTag|=2,t.child=vo(t,null,r,n)):(Si(e,t,r,n),bi()),t=t.child),t;case 5:return _o(t),null===e&&vi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,yr(r,o)?u=null:null!==i&&yr(r,i)&&(t.effectTag|=16),Ti(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Si(e,t,u,n),t=t.child),t;case 6:return null===e&&vi(t),null;case 13:return ji(e,t,n);case 4:return So(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mo(t,null,r,n):Si(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ei(e,t,r,o=t.elementType===r?o:no(r,o),n);case 7:return Si(e,t,t.pendingProps,n),t.child;case 8:case 12:return Si(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Fi(t,i=o.value),null!==u){var l=u.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Nr.current){t=Ri(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){u=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Gi(n)).tag=qi,Xi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}Si(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,zi(t,n),r=r(o=Wi(o,i.unstable_observedBits)),t.effectTag|=1,Si(e,t,r,n),t.child;case 14:return i=no(o=t.type,t.pendingProps),_i(e,t,o,i=no(o.type,i),r,n);case 15:return ki(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:no(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Mr(r)?(e=!0,Fr(t)):e=!1,zi(t,n),uo(t,r,o),co(t,r,o,n),Oi(null,t,r,!0,e,n)}a("156")}var Ii={current:null},Li=null,Ai=null,Di=null;function Fi(e,t){var n=e.type._context;Pr(Ii,n._currentValue),n._currentValue=t}function Ui(e){var t=Ii.current;Tr(Ii),e.type._context._currentValue=t}function zi(e,t){Li=e,Di=Ai=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(xi=!0),e.contextDependencies=null}function Wi(e,t){return Di!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Di=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ai?(null===Li&&a("308"),Ai=t,Li.contextDependencies={first:t,expirationTime:0}):Ai=Ai.next=t),e._currentValue}var Bi=0,Vi=1,qi=2,$i=3,Hi=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Gi(e){return{expirationTime:e,tag:Bi,payload:null,callback:null,next:null,nextEffect:null}}function Yi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Xi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Ki(o):null===o&&(o=n.updateQueue=Ki(r));null===o||r===o?Yi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Yi(r,t),Yi(o,t)):(Yi(r,t),o.lastUpdate=t)}function Ji(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):Zi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Zi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ki(t)),t}function ea(e,t,n,r,i,a){switch(n.tag){case Vi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case $i:e.effectTag=-2049&e.effectTag|64;case Bi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case qi:Hi=!0}return r}function ta(e,t,n,r,o){Hi=!1;for(var i=(t=Zi(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function na(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ra(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ra(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ra(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:lt(t)}}function ia(e){e.effectTag|=4}var aa=void 0,ua=void 0,la=void 0,ca=void 0;aa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ua=function(){},la=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(xo(go.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Qn(u,a),r=Qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Gn(u,a),r=Gn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=dr)}sr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&pr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&ia(t)}},ca=function(e,t,n,r){n!==r&&ia(t)};var sa="function"==typeof WeakSet?WeakSet:Set;function fa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function da(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==To){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==To&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ha(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:pa(e);break;case 4:ya(e)}}function ma(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ma(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ma(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=dr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ya(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(ha(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ga(e,t){switch(t.tag){case 0:case 11:case 14:case 15:da(Co,Oo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[I]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),fr(n,r),r=fr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?lr(e,u):"dangerouslySetInnerHTML"===a?rr(e,u):"children"===a?or(e,u):yt(e,a,u,r)}switch(n){case"input":St(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=xu())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ur("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new sa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ka(t=xu(),e),null!==(e=Ya(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&Su(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var ba="function"==typeof WeakMap?WeakMap:Map;function wa(e,t,n){(n=Gi(n)).tag=$i,n.payload={element:null};var r=t.value;return n.callback=function(){ju(r),fa(e,t)},n}function xa(e,t,n){(n=Gi(n)).tag=$i;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Da?Da=new Set([this]):Da.add(this));var n=t.value,o=t.stack;fa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Sa(e){switch(e.tag){case 1:Mr(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Lr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return ko(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eo(),null;case 10:return Ui(e),null;default:return null}}var Ea=qe.ReactCurrentDispatcher,_a=qe.ReactCurrentOwner,ka=1073741822,Ta=!1,Pa=null,Ca=null,Oa=0,Na=-1,ja=!1,Ra=null,Ma=!1,Ia=null,La=null,Aa=null,Da=null;function Fa(){if(null!==Pa)for(var e=Pa.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:Eo(),Lr();break;case 5:ko(t);break;case 4:Eo();break;case 10:Ui(t)}e=e.return}Ca=null,Oa=0,Na=-1,ja=!1,Pa=null}function Ua(){for(;null!==Ra;){var e=Ra.effectTag;if(16&e&&or(Ra.stateNode,""),128&e){var t=Ra.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(Ra),Ra.effectTag&=-3;break;case 6:va(Ra),Ra.effectTag&=-3,ga(Ra.alternate,Ra);break;case 4:ga(Ra.alternate,Ra);break;case 8:ya(e=Ra),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ra=Ra.nextEffect}}function za(){for(;null!==Ra;){if(256&Ra.effectTag)e:{var e=Ra.alternate,t=Ra;switch(t.tag){case 0:case 11:case 15:da(Po,To,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:no(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Ra=Ra.nextEffect}}function Wa(e,t){for(;null!==Ra;){var n=Ra.effectTag;if(36&n){var r=Ra.alternate,o=Ra,i=t;switch(o.tag){case 0:case 11:case 15:da(No,jo,o);break;case 1:var u=o.stateNode;if(4&o.effectTag)if(null===r)u.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:no(o.type,r.memoizedProps);u.componentDidUpdate(l,r.memoizedState,u.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&na(0,r,u);break;case 3:if(null!==(r=o.updateQueue)){if(u=null,null!==o.child)switch(o.child.tag){case 5:u=o.child.stateNode;break;case 1:u=o.child.stateNode}na(0,r,u)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&vr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Ra.ref)&&(i=Ra.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Ia=e),Ra=Ra.nextEffect}}function Ba(){null!==La&&xr(La),null!==Aa&&Aa()}function Va(e,t){Ma=Ta=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Jr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,t)):t>n&&Jr(e,t)}to(0,e)}(e,o>r?o:r),_a.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=_n,mr=function(){var e=An();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),_n=!1,Ra=r;null!==Ra;){o=!1;var u=void 0;try{za()}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),Qa(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}for(Ra=r;null!==Ra;){o=!1,u=void 0;try{Ua()}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),Qa(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}for(Fn(mr),mr=null,_n=!!hr,hr=null,e.current=t,Ra=r;null!==Ra;){o=!1,u=void 0;try{Wa(e,n)}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),Qa(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}if(null!==r&&null!==Ia){var l=function(e,t){Aa=La=Ia=null;var n=ru;ru=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;da(Mo,To,i),da(To,Ro,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);ru=n,0!==(n=e.expirationTime)&&Su(e,n),cu||ru||Pu(1073741823,!1)}.bind(null,e,r);La=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return wr(l)}),Aa=l}Ta=Ma=!1,"function"==typeof zr&&zr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Da=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function qa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Pa=e;e:{var i=t,u=Oa,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Mr(t.type)&&Ir();break;case 3:Eo(),Lr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(gi(t),t.effectTag&=-3),ua(t);break;case 5:ko(t);var c=xo(wo.current);if(u=t.type,null!==i&&null!=t.stateNode)la(i,t,u,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=xo(go.current);if(gi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[M]=l,i[I]=p,u=void 0,c=f){case"iframe":case"object":kn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)kn(te[f],i);break;case"source":kn("error",i);break;case"img":case"image":case"link":kn("error",i),kn("load",i);break;case"form":kn("reset",i),kn("submit",i);break;case"details":kn("toggle",i);break;case"input":wt(i,p),kn("invalid",i),pr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},kn("invalid",i),pr(d,"onChange");break;case"textarea":Yn(i,p),kn("invalid",i),pr(d,"onChange")}for(u in sr(c,p),f=null,p)p.hasOwnProperty(u)&&(s=p[u],"children"===u?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(u)&&null!=s&&pr(d,u));switch(c){case"input":Be(i),Et(i,p,!0);break;case"textarea":Be(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=dr)}u=f,l.updateQueue=u,(l=null!==u)&&ia(t)}else{p=t,d=u,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(d)),s===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(s,d),(i=f)[M]=p,i[I]=l,aa(i,t,!1,!1),d=i;var h=c,m=fr(f=u,p=l);switch(f){case"iframe":case"object":kn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)kn(te[c],d);c=p;break;case"source":kn("error",d),c=p;break;case"img":case"image":case"link":kn("error",d),kn("load",d),c=p;break;case"form":kn("reset",d),kn("submit",d),c=p;break;case"details":kn("toggle",d),c=p;break;case"input":wt(d,p),c=bt(d,p),kn("invalid",d),pr(h,"onChange");break;case"option":c=Qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),kn("invalid",d),pr(h,"onChange");break;case"textarea":Yn(d,p),c=Gn(d,p),kn("invalid",d),pr(h,"onChange");break;default:c=p}sr(f,c),s=void 0;var v=f,y=d,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?lr(y,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&rr(y,w):"children"===s?"string"==typeof w?("textarea"!==v||""!==w)&&or(y,w):"number"==typeof w&&or(y,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&pr(h,s):null!=w&&yt(y,s,w,m))}switch(f){case"input":Be(d),Et(d,p,!1);break;case"textarea":Be(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+gt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?Kn(c,!!p.multiple,d,!1):null!=p.defaultValue&&Kn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=dr)}(l=vr(u,l))&&ia(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?ca(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=xo(wo.current),xo(go.current),gi(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[M]=l,(l=u.nodeValue!==i)&&ia(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[M]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Pa=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo(),ua(t);break;case 10:Ui(t);break;case 9:case 14:break;case 17:Mr(t.type)&&Ir();break;case 18:break;default:a("156")}Pa=null}if(t=e,1===Oa||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(c=u.childExpirationTime)>l&&(l=c),u=u.sibling;t.childExpirationTime=l}if(null!==Pa)return Pa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Sa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function $a(e){var t=Mi(e.alternate,e,Oa);return e.memoizedProps=e.pendingProps,null===t&&(t=qa(e)),_a.current=null,t}function Ha(e,t){Ta&&a("243"),Ba(),Ta=!0;var n=Ea.current;Ea.current=li;var r=e.nextExpirationTimeToWorkOn;r===Oa&&e===Ca&&null!==Pa||(Fa(),Oa=r,Pa=Hr((Ca=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Pa&&!ku();)Pa=$a(Pa);else for(;null!==Pa;)Pa=$a(Pa)}catch(t){if(Di=Ai=Li=null,Xo(),null===Pa)o=!0,ju(t);else{null===Pa&&a("271");var i=Pa,u=i.return;if(null!==u){e:{var l=e,c=u,s=i,f=t;if(u=Oa,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?d=0:(-1===d||m<d)&&(d=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((u=Gi(1073741823)).tag=qi,Xi(s,u))),s.expirationTime=1073741823;break e}c=u;var v=(s=l).pingCache;null===v?(v=s.pingCache=new ba,m=new Set,v.set(p,m)):void 0===(m=v.get(p))&&(m=new Set,v.set(p,m)),m.has(c)||(m.add(c),s=Ga.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-eo(l,u))-5e3),l=h+d),0<=l&&Na<l&&(Na=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}ja=!0,f=oa(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Ji(l,u=wa(l,f,u));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Da||!Da.has(s)))){l.effectTag|=2048,l.expirationTime=u,Ji(l,u=xa(l,d,u));break e}}l=l.return}while(null!==l)}Pa=qa(i);continue}o=!0,ju(t)}}break}if(Ta=!1,Ea.current=n,Di=Ai=Li=null,Xo(),o)Ca=null,e.finishedWork=null;else if(null!==Pa)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Ca=null,ja){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==u&&u<r)return Zr(e,r),void wu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wu(e,n,r,t,-1)}t&&-1!==Na?(Zr(e,r),(t=10*(1073741822-eo(e,r)))<Na&&(Na=t),t=10*(1073741822-xu()),t=Na-t,wu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Da||!Da.has(r)))return Xi(n,e=xa(n,e=oa(t,e),1073741823)),void Xa(n,1073741823);break;case 3:return Xi(n,e=wa(n,e=oa(t,e),1073741823)),void Xa(n,1073741823)}n=n.return}3===e.tag&&(Xi(e,n=wa(e,n=oa(t,e),1073741823)),Xa(e,1073741823))}function Ka(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ta&&!Ma)r=Oa;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Ca&&r===Oa&&--r}return n===i.unstable_UserBlockingPriority&&(0===au||r<au)&&(au=r),r}function Ga(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ca&&Oa===n?Ca=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),to(n,e),0!==(n=e.expirationTime)&&Su(e,n)))}function Ya(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Xa(e,t){null!==(e=Ya(e,t))&&(!Ta&&0!==Oa&&t>Oa&&Fa(),Jr(e,t),Ta&&!Ma&&Ca===e||Su(e,e.expirationTime),vu>mu&&(vu=0,a("185")))}function Ja(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var Za=null,eu=null,tu=0,nu=void 0,ru=!1,ou=null,iu=0,au=0,uu=!1,lu=null,cu=!1,su=!1,fu=null,pu=i.unstable_now(),du=1073741822-(pu/10|0),hu=du,mu=50,vu=0,yu=null;function gu(){du=1073741822-((i.unstable_now()-pu)/10|0)}function bu(e,t){if(0!==tu){if(t<tu)return;null!==nu&&i.unstable_cancelCallback(nu)}tu=t,e=i.unstable_now()-pu,nu=i.unstable_scheduleCallback(Tu,{timeout:10*(1073741822-t)-e})}function wu(e,t,n,r,o){e.expirationTime=r,0!==o||ku()?0<o&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,gu(),hu=du,Cu(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function xu(){return ru?hu:(Eu(),0!==iu&&1!==iu||(gu(),hu=du),hu)}function Su(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===eu?(Za=eu=e,e.nextScheduledRoot=e):(eu=eu.nextScheduledRoot=e).nextScheduledRoot=Za):t>e.expirationTime&&(e.expirationTime=t),ru||(cu?su&&(ou=e,iu=1073741823,Ou(e,1073741823,!1)):1073741823===t?Pu(1073741823,!1):bu(e,t))}function Eu(){var e=0,t=null;if(null!==eu)for(var n=eu,r=Za;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===eu)&&a("244"),r===r.nextScheduledRoot){Za=eu=r.nextScheduledRoot=null;break}if(r===Za)Za=o=r.nextScheduledRoot,eu.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===eu){(eu=n).nextScheduledRoot=Za,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===eu)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ou=t,iu=e}var _u=!1;function ku(){return!!_u||!!i.unstable_shouldYield()&&(_u=!0)}function Tu(){try{if(!ku()&&null!==Za){gu();var e=Za;do{var t=e.expirationTime;0!==t&&du<=t&&(e.nextExpirationTimeToWorkOn=du),e=e.nextScheduledRoot}while(e!==Za)}Pu(0,!0)}finally{_u=!1}}function Pu(e,t){if(Eu(),t)for(gu(),hu=du;null!==ou&&0!==iu&&e<=iu&&!(_u&&du>iu);)Ou(ou,iu,du>iu),Eu(),gu(),hu=du;else for(;null!==ou&&0!==iu&&e<=iu;)Ou(ou,iu,!1),Eu();if(t&&(tu=0,nu=null),0!==iu&&bu(ou,iu),vu=0,yu=null,null!==fu)for(e=fu,fu=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){uu||(uu=!0,lu=e)}}if(uu)throw e=lu,lu=null,uu=!1,e}function Cu(e,t){ru&&a("253"),ou=e,iu=t,Ou(e,t,!1),Pu(1073741823,!1)}function Ou(e,t,n){if(ru&&a("245"),ru=!0,n){var r=e.finishedWork;null!==r?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Ha(e,n),null!==(r=e.finishedWork)&&(ku()?e.finishedWork=r:Nu(e,r,t)))}else null!==(r=e.finishedWork)?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Ha(e,n),null!==(r=e.finishedWork)&&Nu(e,r,t));ru=!1}function Nu(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===fu?fu=[r]:fu.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===yu?vu++:(yu=e,vu=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){Va(e,t)})}function ju(e){null===ou&&a("246"),ou.expirationTime=0,uu||(uu=!0,lu=e)}function Ru(e,t){var n=cu;cu=!0;try{return e(t)}finally{(cu=n)||ru||Pu(1073741823,!1)}}function Mu(e,t){if(cu&&!su){su=!0;try{return e(t)}finally{su=!1}}return e(t)}function Iu(e,t,n){cu||ru||0===au||(Pu(au,!1),au=0);var r=cu;cu=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cu=r)||ru||Pu(1073741823,!1)}}function Lu(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Mr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Mr(l)){n=Dr(n,l,u);break e}}n=u}else n=Cr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Gi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ba(),Xi(i,o),Xa(i,r),r}function Au(e,t,n,r){var o=t.current;return Lu(e,t,n,o=Ka(xu(),o),r)}function Du(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e){var t=1073741822-25*(1+((1073741822-xu()+500)/25|0));t>=ka&&(t=ka-1),this._expirationTime=ka=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Uu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function zu(e,t,n){e={current:t=qr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Wu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Du(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Du(i._internalRoot);u.call(e)}}Mu(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Du(i._internalRoot)}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Wu(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=F(r);o||a("90"),Ve(r),St(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Fu.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Uu;return Lu(e,t,null,n,r._onCommit),r},Fu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Cu(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Uu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Uu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},zu.prototype.render=function(e,t){var n=this._internalRoot,r=new Uu;return null!==(t=void 0===t?null:t)&&r.then(t),Au(e,n,null,r._onCommit),r},zu.prototype.unmount=function(e){var t=this._internalRoot,n=new Uu;return null!==(e=void 0===e?null:e)&&n.then(e),Au(null,t,null,n._onCommit),n},zu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Uu;return null!==(n=void 0===n?null:n)&&o.then(n),Au(t,r,e,o._onCommit),o},zu.prototype.createBatch=function(){var e=new Fu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Ru,Me=Iu,Ie=function(){ru||0===au||(Pu(au,!1),au=0)};var qu,$u,Hu={createPortal:Vu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Wu(t)||a("200"),Bu(null,e,t,!0,n)},render:function(e,t,n){return Wu(t)||a("200"),Bu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Wu(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Bu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Wu(e)||a("40"),!!e._reactRootContainer&&(Mu(function(){Bu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Vu.apply(void 0,arguments)},unstable_batchedUpdates:Ru,unstable_interactiveUpdates:Iu,flushSync:function(e,t){ru&&a("187");var n=cu;cu=!0;try{return Ja(e,t)}finally{cu=n,Pu(1073741823,!1)}},unstable_createRoot:function(e,t){return Wu(e)||a("299","unstable_createRoot"),new zu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cu;cu=!0;try{Ja(e)}finally{(cu=t)||ru||Pu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[A,D,F,O.injectEventPluginsByName,g,q,function(e){T(e,V)},Ne,je,Cn,j]}};$u=(qu={findFiberByHostInstance:L,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);zr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Wr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}}(o({},qu,{overrideProps:null,currentDispatcherRef:qe.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null}}));var Qu={default:Hu},Ku=Qu&&Hu||Qu;e.exports=Ku.default||Ku},function(e,t,n){"use strict";e.exports=n(78)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?E():l=!0,S(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function p(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!_())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var d,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){d=g(function(t){y(h),e(t)}),h=v(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var S,E,_,k=null;if("undefined"!=typeof window?k=window:void 0!==e&&(k=e),k&&k._schedMock){var T=k._schedMock;S=T[0],E=T[1],_=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,C=function(e){if(null!==P)try{P(e)}finally{P=null}};S=function(e){null!==P?setTimeout(S,0,e):(P=e,setTimeout(C,0,!1))},E=function(){P=null},_=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,j=-1,R=!1,M=!1,I=0,L=33,A=33;_=function(){return I<=t.unstable_now()};var D=new MessageChannel,F=D.port2;D.port1.onmessage=function(){N=!1;var e=O,n=j;O=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=I-r){if(!(-1!==n&&n<=r))return R||(R=!0,w(U)),O=e,void(j=n);o=!0}if(null!==e){M=!0;try{e(o)}finally{M=!1}}};var U=function(e){if(null!==O){w(U);var t=e-I+A;t<A&&L<A?(8>t&&(t=8),A=t<L?L:t):L=t,I=e+A,N||(N=!0,F.postMessage(void 0))}else R=!1};S=function(e,t){O=e,j=t,M||0>t?F.postMessage(void 0):R||(R=!0,w(U))},E=function(){O=null,N=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||_())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(50))},function(e,t,n){"use strict";var r=n(80);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case v:case m:case i:return t}}}function g(e){return y(e)===p}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return g(e)||y(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return y(e)===s},t.isContextProvider=function(e){return y(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return y(e)===d},t.isFragment=function(e){return y(e)===a},t.isLazy=function(e){return y(e)===v},t.isMemo=function(e){return y(e)===m},t.isPortal=function(e){return y(e)===i},t.isProfiler=function(e){return y(e)===l},t.isStrictMode=function(e){return y(e)===u},t.isSuspense=function(e){return y(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(3);r(r.S+r.F*!n(7),"Object",{defineProperties:n(52)})},function(e,t,n){e.exports=n(26)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(16),o=n(28),i=n(86);e.exports=function(e){return function(t,n,a){var u,l=r(t),c=o(l.length),s=i(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t,n){var r=n(54),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(3),o=n(88),i=n(16),a=n(41),u=n(89);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),l=a.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=l(r,t=c[f++]))&&u(s,t,n);return s}})},function(e,t,n){var r=n(40),o=n(29),i=n(5),a=n(4).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){"use strict";var r=n(8),o=n(21);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){"use strict";var r=n(3),o=n(42)(0),i=n(31)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(92);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(6),o=n(55),i=n(2)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){var r=n(22)("meta"),o=n(6),i=n(15),a=n(8).f,u=0,l=Object.isExtensible||function(){return!0},c=!n(12)(function(){return l(Object.preventExtensions({}))}),s=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!l(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!l(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&l(e)&&!i(e,r)&&s(e),e}}},function(e,t,n){var r=n(19),o=n(29),i=n(30);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),l=i.f,c=0;u.length>c;)l.call(e,a=u[c++])&&t.push(a);return t}},function(e,t,n){var r=n(16),o=n(40).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){for(var r=n(59),o=n(19),i=n(14),a=n(4),u=n(11),l=n(25),c=n(2),s=c("iterator"),f=c("toStringTag"),p=l.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),m=0;m<h.length;m++){var v,y=h[m],g=d[y],b=a[y],w=b&&b.prototype;if(w&&(w[s]||u(w,s,p),w[f]||u(w,f,y),l[y]=p,g))for(v in r)w[v]||i(w,v,r[v],!0)}},function(e,t,n){var r=n(2)("unscopables"),o=Array.prototype;null==o[r]&&n(11)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(23),o=n(3),i=n(14),a=n(11),u=n(25),l=n(100),c=n(32),s=n(101),f=n(2)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,m,v,y){l(n,t,h);var g,b,w,x=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",E="values"==m,_=!1,k=e.prototype,T=k[f]||k["@@iterator"]||m&&k[m],P=T||x(m),C=m?E?x("entries"):P:void 0,O="Array"==t&&k.entries||T;if(O&&(w=s(O.call(new e)))!==Object.prototype&&w.next&&(c(w,S,!0),r||"function"==typeof w[f]||a(w,f,d)),E&&T&&"values"!==T.name&&(_=!0,P=function(){return T.call(this)}),r&&!y||!p&&!_&&k[f]||a(k,f,P),u[t]=P,u[S]=d,m)if(g={values:E?P:x("values"),keys:v?P:x("keys"),entries:C},y)for(b in g)b in k||i(k,b,g[b]);else o(o.P+o.F*(p||_),t,g);return g}},function(e,t,n){"use strict";var r=n(44),o=n(21),i=n(32),a={};n(11)(a,n(2)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(15),o=n(20),i=n(38)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(20),o=n(19);n(103)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(3),o=n(13),i=n(12);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var r=n(3);r(r.S+r.F,"Object",{assign:n(105)})},function(e,t,n){"use strict";var r=n(7),o=n(19),i=n(29),a=n(30),u=n(20),l=n(27),c=Object.assign;e.exports=!c||n(12)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r})?function(e,t){for(var n=u(e),c=arguments.length,s=1,f=i.f,p=a.f;c>s;)for(var d,h=l(arguments[s++]),m=f?o(h).concat(f(h)):o(h),v=m.length,y=0;v>y;)d=m[y++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:c},function(e,t,n){"use strict";var r=n(3),o=n(42)(2);r(r.P+r.F*!n(31)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(6),o=n(5),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(17)(Function.call,n(41).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){"use strict";var r=n(3),o=n(109);r(r.P+r.F*!n(31)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){var r=n(18),o=n(20),i=n(27),a=n(28);e.exports=function(e,t,n,u,l){r(t);var c=o(e),s=i(c),f=a(c.length),p=l?f-1:0,d=l?-1:1;if(n<2)for(;;){if(p in s){u=s[p],p+=d;break}if(p+=d,l?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;l?p>=0:f>p;p+=d)p in s&&(u=t(u,s[p],p,c));return u}},function(e,t,n){"use strict";var r,o,i,a,u=n(23),l=n(4),c=n(17),s=n(33),f=n(3),p=n(6),d=n(18),h=n(111),m=n(112),v=n(116),y=n(64).set,g=n(117)(),b=n(66),w=n(118),x=n(119),S=n(120),E=l.TypeError,_=l.process,k=_&&_.versions,T=k&&k.v8||"",P=l.Promise,C="process"==s(_),O=function(){},N=o=b.f,j=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n(2)("species")]=function(e){e(O,O)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(O)instanceof t&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),R=function(e){var t;return!(!p(e)||"function"!=typeof(t=e.then))&&t},M=function(e,t){if(!e._n){e._n=!0;var n=e._c;g(function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,l=t.resolve,c=t.reject,s=t.domain;try{u?(o||(2==e._h&&A(e),e._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===t.promise?c(E("Promise-chain cycle")):(i=R(n))?i.call(n,l,c):l(n)):c(r)}catch(e){s&&!a&&s.exit(),c(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&I(e)})}},I=function(e){y.call(l,function(){var t,n,r,o=e._v,i=L(e);if(i&&(t=w(function(){C?_.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||L(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},A=function(e){y.call(l,function(){var t;C?_.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})})},D=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),M(t,!0))},F=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(t=R(e))?g(function(){var r={_w:n,_d:!1};try{t.call(e,c(F,r,1),c(D,r,1))}catch(e){D.call(r,e)}}):(n._v=e,n._s=1,M(n,!1))}catch(e){D.call({_w:n,_d:!1},e)}}};j||(P=function(e){h(this,P,"Promise","_h"),d(e),r.call(this);try{e(c(F,this,1),c(D,this,1))}catch(e){D.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(121)(P.prototype,{then:function(e,t){var n=N(v(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?_.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(F,e,1),this.reject=c(D,e,1)},b.f=N=function(e){return e===P||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!j,{Promise:P}),n(32)(P,"Promise"),n(122)("Promise"),a=n(13).Promise,f(f.S+f.F*!j,"Promise",{reject:function(e){var t=N(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!j),"Promise",{resolve:function(e){return S(u&&this===a?P:this,e)}}),f(f.S+f.F*!(j&&n(123)(function(e){P.all(e).catch(O)})),"Promise",{all:function(e){var t=this,n=N(t),r=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,a=1;m(e,!1,function(e){var u=i++,l=!1;n.push(void 0),a++,t.resolve(e).then(function(e){l||(l=!0,n[u]=e,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=N(t),r=n.reject,o=w(function(){m(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(17),o=n(113),i=n(114),a=n(5),u=n(28),l=n(115),c={},s={};(t=e.exports=function(e,t,n,f,p){var d,h,m,v,y=p?function(){return e}:l(e),g=r(n,f,t?2:1),b=0;if("function"!=typeof y)throw TypeError(e+" is not iterable!");if(i(y)){for(d=u(e.length);d>b;b++)if((v=t?g(a(h=e[b])[0],h[1]):g(e[b]))===c||v===s)return v}else for(m=y.call(e);!(h=m.next()).done;)if((v=o(m,g,h.value,t))===c||v===s)return v}).BREAK=c,t.RETURN=s},function(e,t,n){var r=n(5);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(25),o=n(2)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(33),o=n(2)("iterator"),i=n(25);e.exports=n(13).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){var r=n(5),o=n(18),i=n(2)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},function(e,t,n){var r=n(4),o=n(64).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,l="process"==n(24)(a);e.exports=function(){var e,t,n,c=function(){var r,o;for(l&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(l)n=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(4).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){var r=n(5),o=n(6),i=n(66);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){var r=n(14);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){"use strict";var r=n(4),o=n(8),i=n(7),a=n(2)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(2)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new P(r||[]);return i._invoke=function(e,t,n){var r=s;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return O()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=_(a,n);if(u){if(u===h)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?d:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=d,n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var s="suspendedStart",f="suspendedYield",p="executing",d="completed",h={};function m(){}function v(){}function y(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(C([])));w&&w!==n&&r.call(w,i)&&(g=w);var x=y.prototype=m.prototype=Object.create(g);function S(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){var t;this._invoke=function(n,o){function i(){return new Promise(function(t,i){!function t(n,o,i,a){var u=c(e[n],e,o);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"==typeof s&&r.call(s,"__await")?Promise.resolve(s.__await).then(function(e){t("next",e,i,a)},function(e){t("throw",e,i,a)}):Promise.resolve(s).then(function(e){l.value=e,i(l)},function(e){return t("throw",e,i,a)})}a(u.arg)}(n,o,t,i)})}return t=t?t.then(i,i):i()}}function _(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,_(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function C(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:O}}function O(){return{value:t,done:!0}}return v.prototype=x.constructor=y,y.constructor=v,y[u]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u in e||(e[u]="GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(E.prototype),E.prototype[a]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o){var i=new E(l(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then(function(e){return e.done?e.value:i.next()})},S(x),x[u]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return u.type="throw",u.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:C(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(33),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(128);var r=n(14),o=n(11),i=n(12),a=n(37),u=n(2),l=n(68),c=u("species"),s=!i(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var p=u(e),d=!i(function(){var t={};return t[p]=function(){return 7},7!=""[e](t)}),h=d?!i(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[p](""),!t}):void 0;if(!d||!h||"replace"===e&&!s||"split"===e&&!f){var m=/./[p],v=n(a,p,""[e],function(e,t,n,r,o){return t.exec===l?d&&!o?{done:!0,value:m.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),y=v[0],g=v[1];r(String.prototype,e,y),o(RegExp.prototype,p,2==t?function(e,t){return g.call(e,this,t)}:function(e){return g.call(e,this)})}}},function(e,t,n){"use strict";var r=n(68);n(3)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){"use strict";var r=n(5);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(18),o=n(6),i=n(65),a=[].slice,u={},l=function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?l(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(u.prototype=t.prototype),u}},function(e,t,n){"use strict";var r=n(3),o=n(42)(1);r(r.P+r.F*!n(31)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(133);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(71)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(70)(!1)).push([e.i,".loading {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 300px;\n  height: 300px;\n  opacity: .6; }\n\n@keyframes bounce-out {\n  25% {\n    transform: translate(-50%, -50%) scale(0.8);\n    opacity: .8; }\n  50% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: .6; }\n  75% {\n    transform: translate(-50%, -50%) scale(0.8);\n    opacity: .8; }\n  100% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: .6; } }\n\n.animation-bounce-out {\n  animation: bounce-out 2s infinite;\n  animation-fill-mode: both; }\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r=n(136);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(71)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(70)(!1)).push([e.i,"html {\n  height: 100%;\n  box-sizing: border-box; }\n\nbody {\n  height: 100%;\n  line-height: 1.5;\n  font-family: 'Source Sans Pro', sans-serif; }\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit; }\n\n.asanas {\n  display: flex;\n  flex-direction: column; }\n  .asanas__list {\n    display: flex;\n    flex-wrap: wrap; }\n  .asanas__item-container {\n    position: relative;\n    width: 30%;\n    margin: 14px 14px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    object-fit: scale-down; }\n    .asanas__item-container:hover {\n      box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5); }\n  .asanas__pic {\n    width: 100%;\n    opacity: 1;\n    display: block;\n    transition: .5s ease; }\n  .asanas__middle-on-pic {\n    transition: .5s ease;\n    opacity: 0;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    text-align: center; }\n  .asanas__item-container:hover .asanas__pic {\n    opacity: 0.3; }\n  .asanas__item-container:hover .asanas__middle-on-pic {\n    opacity: 1; }\n  .asanas__btn-on-pic {\n    background-color: #4CAF50;\n    color: white;\n    font-size: 16px;\n    padding: 16px 32px; }\n",""])},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(34),a=n.n(i);var u=n(1),l=n.n(u),c=o.a.createContext(null);var s=function(e){e()},f=function(){return s},p=null,d={notify:function(){}};var h=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=d,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=f(),t=[],n=[],{clear:function(){n=p,t=p},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==p&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=d)},e}(),m=function(e){var t,n;function r(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new h(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},i.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},i.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new h(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},i.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},i.render=function(){var e=this.props.context||c;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},r}(r.Component);m.propTypes={store:l.a.shape({subscribe:l.a.func.isRequired,dispatch:l.a.func.isRequired,getState:l.a.func.isRequired}),context:l.a.object,children:l.a.any};var v=m;function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function g(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var b=n(47),w=n.n(b),x=n(10),S=n.n(x),E=n(46),_=[],k=[null,null];function T(e,t){var n=e[1];return[t.payload,n+1]}var P=function(){return[null,0]},C="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function O(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,u=n.methodName,l=void 0===u?"connectAdvanced":u,s=n.renderCountProp,f=void 0===s?void 0:s,p=n.shouldHandleStateChanges,d=void 0===p||p,m=n.storeKey,v=void 0===m?"store":m,b=n.withRef,x=void 0!==b&&b,O=n.forwardRef,N=void 0!==O&&O,j=n.context,R=void 0===j?c:j,M=g(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);S()(void 0===f,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),S()(!x,"withRef is removed. To access the wrapped instance, use a ref on the connected component");S()("store"===v,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var I=R;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=y({},M,{getDisplayName:a,methodName:l,renderCountProp:f,shouldHandleStateChanges:d,storeKey:v,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=M.pure;var s=c?r.useMemo:function(e){return e()};function p(n){var a=Object(r.useMemo)(function(){var e=n.forwardedRef,t=g(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=a[0],c=a[1],f=a[2],p=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(E.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:I},[l,I]),m=Object(r.useContext)(p),v=Boolean(n.store),b=Boolean(m)&&Boolean(m.store);S()(v||b,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var w=n.store||m.store,x=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,u)}(w)},[w]),O=Object(r.useMemo)(function(){if(!d)return k;var e=new h(w,v?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[w,v,m]),N=O[0],j=O[1],R=Object(r.useMemo)(function(){return v?m:y({},m,{subscription:N})},[v,m,N]),M=Object(r.useReducer)(T,_,P),L=M[0][0],A=M[1];if(L&&L.error)throw L.error;var D=Object(r.useRef)(),F=Object(r.useRef)(f),U=Object(r.useRef)(),z=Object(r.useRef)(!1),W=s(function(){return U.current&&f===F.current?U.current:x(w.getState(),f)},[w,L,f]);C(function(){F.current=f,D.current=W,z.current=!1,U.current&&(U.current=null,j())}),C(function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,o=w.getState();try{n=x(o,F.current)}catch(e){r=e,t=e}r||(t=null),n===D.current?z.current||j():(D.current=n,U.current=n,z.current=!0,A({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};N.onStateChange=n,N.trySubscribe(),n();return function(){if(e=!0,N.tryUnsubscribe(),t)throw t}}},[w,N,x]);var B=Object(r.useMemo)(function(){return o.a.createElement(t,y({},W,{ref:c}))},[c,t,W]);return Object(r.useMemo)(function(){return d?o.a.createElement(p.Provider,{value:R},B):B},[p,B,R])}var m=c?o.a.memo(p):p;if(m.WrappedComponent=t,m.displayName=i,N){var b=o.a.forwardRef(function(e,t){return o.a.createElement(m,y({},e,{forwardedRef:t}))});return b.displayName=i,b.WrappedComponent=t,w()(b,t)}return w()(m,t)}}var N=Object.prototype.hasOwnProperty;function j(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function R(e,t){if(j(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!N.call(t,n[o])||!j(e[n[o]],t[n[o]]))return!1;return!0}var M=n(9);function I(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function L(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function A(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=L(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=L(o),o=r(t,n)),o},r}}var D=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:I(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?I(function(t){return Object(M.bindActionCreators)(e,t)}):void 0}];var F=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:I(function(){return{}})}];function U(e,t,n){return y({},n,e,t)}var z=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return U}}];function W(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function B(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!f(d,a),y=!s(o,i);return i=o,a=d,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),m=!p(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return d?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),d=!0,c)}}function V(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=g(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?B:W)(a,u,l,e,i)}function q(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function $(e,t){return e===t}var H,Q,K,G,Y,X,J,Z,ee,te,ne,re,oe=(K=(Q=void 0===H?{}:H).connectHOC,G=void 0===K?O:K,Y=Q.mapStateToPropsFactories,X=void 0===Y?F:Y,J=Q.mapDispatchToPropsFactories,Z=void 0===J?D:J,ee=Q.mergePropsFactories,te=void 0===ee?z:ee,ne=Q.selectorFactory,re=void 0===ne?V:ne,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?$:u,c=o.areOwnPropsEqual,s=void 0===c?R:c,f=o.areStatePropsEqual,p=void 0===f?R:f,d=o.areMergedPropsEqual,h=void 0===d?R:d,m=g(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=q(e,X,"mapStateToProps"),b=q(t,Z,"mapDispatchToProps"),w=q(n,te,"mergeProps");return G(re,y({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:b,initMergeProps:w,pure:a,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:p,areMergedPropsEqual:h},m))});var ie;"undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function ae(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}ie=i.unstable_batchedUpdates,s=ie;var ue=ae();ue.withExtraArgument=ae;var le=ue;n(83),n(87),n(90),n(43),n(96),n(59),n(60),n(102),n(45),n(104),n(106),n(61),n(62),n(63),n(108),n(110),n(124),n(67),n(69);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t,n,r,o,i,a){try{var u=e[i](a),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}function fe(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){se(i,r,o,a,u,"next",e)}function u(e){se(i,r,o,a,u,"throw",e)}a(void 0)})}}function pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function he(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ve=new(function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=function(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?he(e):t}(this,de(t).call(this))).enablecors="https://cors-anywhere.herokuapp.com/",e.host="https://content.googleapis.com",e.cx="015708995729795073046:a6lqchqd__u",e.key="AIzaSyCPf_rnItQABhVctkO59JGQbfX1dERmy6w",e.getHeaders=e.getHeaders.bind(he(e)),e.getSearchURL=e.getSearchURL.bind(he(e)),e.search=e.search.bind(he(e)),e.getImages=e.getImages.bind(he(e)),e}var n,r,i,a,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(t,o.a.Component),n=t,(r=[{key:"getHeaders",value:function(){return new Headers([["X-Referer",this.host]])}},{key:"getSearchURL",value:function(e,t){return"".concat(this.enablecors).concat(this.host,"/customsearch/v1?q=").concat(e,"&cx=").concat(this.cx,"&key=").concat(this.key,"&start=").concat(t)}},{key:"search",value:(u=fe(regeneratorRuntime.mark(function e(t,n){var r,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.getSearchURL(t,n),e.next=3,fetch(r,{method:"GET",headers:this.getHeaders()}).then(function(e){return e.json()}).catch(function(e){return Promise.reject(e)});case 3:return o=e.sent,e.abrupt("return",o);case 5:case"end":return e.stop()}},e,this)})),function(e,t){return u.apply(this,arguments)})},{key:"getImages",value:(a=fe(regeneratorRuntime.mark(function e(t){var n,r,o=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=o.length>1&&void 0!==o[1]?o[1]:1,e.next=3,this.search(t,n);case 3:if((r=e.sent).items){e.next=6;break}return e.abrupt("return",[]);case 6:return e.abrupt("return",r.items.reduce(function(e,n){return n.pagemap&&n.pagemap.cse_image&&e.push({id:n.cacheId,asanaName:t,asanaSrc:n.pagemap.cse_image[0].src}),e},[]));case 7:case"end":return e.stop()}},e,this)})),function(e){return a.apply(this,arguments)})}])&&pe(n.prototype,r),i&&pe(n,i),t}()),ye=function(e,t){return{type:"SEARCH_REQUEST",payload:{loading:!0,phrase:e,resultsPage:t}}},ge=function(e,t){return{type:"SEARCH_SUCCESS",payload:{loading:!1,resultsPage:t,results:e}}},be=function(e){return{type:"SEARCH_FAILURE",payload:{loading:!1,error:e}}};function we(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?we(n,!0).forEach(function(t){Se(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):we(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ee={search:{loading:!1,phrase:"",resultsPage:0,results:[],error:{isError:!1,message:""}},sequence:[]},_e=Object(M.combineReducers)({sequence:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ee.sequence,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ADD_ASANA":return e.concat({id:t.payload.id,asanaName:t.payload.asanaName,asanaSrc:t.payload.asanaSrc});case"DELETE_ASANA":return e.filter(function(e){return e.id!==t.payload.id});case"CLEAR_SEQUENCE":return Ee.sequence;default:return e}},search:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ee.search,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SEARCH_REQUEST":return Object.assign({},e,xe({},e,{loading:t.payload.loading,phrase:t.payload.phrase,resultsPage:t.payload.resultsPage}));case"SEARCH_SUCCESS":return Object.assign({},e,xe({},e,{loading:t.payload.loading,error:{isError:!1,message:""},resultsPage:t.payload.resultsPage,results:t.payload.results}));case"SEARCH_FAILURE":return Object.assign({},e,xe({},e,{loading:t.payload.loading,error:{isError:!0,message:t.payload.error}}));default:return e}}}),ke=n(73),Te=function(){return Object(M.createStore)(_e,Object(M.compose)(Object(M.applyMiddleware)(le),Object(ke.devToolsEnhancer)()))},Pe=(n(131),function(e){var t=e.imgSrc,n=e.onClick,r=e.btnText;return o.a.createElement("div",null,o.a.createElement("img",{src:t,className:"asanas__pic"}),o.a.createElement("div",{className:"asanas__middle-on-pic"},o.a.createElement("button",{className:"asanas__btn-on-pic",onClick:n},r)))});Pe.propTypes={imgSrc:l.a.string.isRequired,onClick:l.a.func.isRequired,btnText:l.a.string.isRequired};var Ce=Pe,Oe=function(e){var t=e.asanas,n=e.onItemClick,r=e.btnText,i=e.showTitle;return t.length>0&&o.a.createElement("div",{className:"asanas__list"},t.map(function(e,t){return o.a.createElement("div",{className:"asanas__item-container",key:e.id},o.a.createElement("p",null,e.id),i&&o.a.createElement("p",null,e.asanaName),o.a.createElement(Ce,{imgSrc:e.asanaSrc,onClick:function(){return n(e)},btnText:r}))}))};Oe.propTypes={asanas:l.a.array.isRequired};var Ne=Oe,je=function(e){var t=e.textToSearch,n=e.pageNumber,r=e.fetchPage,i=Math.floor(n/10+1),a=function(e){i=Math.floor(n/10+1),r(t,10*(i+e)+1-10)};return o.a.createElement("div",null,o.a.createElement("button",{onClick:function(){return a(-1)}},"Previous"),o.a.createElement("p",null,i),o.a.createElement("button",{onClick:function(){return a(1)}},"Next"))};je.propTypes={pageNumber:l.a.number.isRequired,fetchPage:l.a.func.isRequired};var Re=je,Me=n(74),Ie=n.n(Me),Le=(n(132),function(){return r.createElement("div",{className:"loading animation-bounce-out"},r.createElement("img",{src:Ie.a}))});n(135);function Ae(e){return(Ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function De(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fe(e){return(Fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var We=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Ae(t)&&"function"!=typeof t?Ue(e):t}(this,Fe(t).call(this,e))).onSearchSubmit=n.onSearchSubmit.bind(Ue(n)),n.onSearchInput=n.onSearchInput.bind(Ue(n)),n.onAddToFlowClick=n.onAddToFlowClick.bind(Ue(n)),n.store=n.context,n.state={search:""},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(t,r["Component"]),n=t,(i=[{key:"onSearchSubmit",value:function(e){e.preventDefault(),this.props.fetchSearchResults(this.state.search)}},{key:"onSearchInput",value:function(e){this.setState({search:e.target.value})}},{key:"onAddToFlowClick",value:function(e){this.props.addAsana({id:e.id,asanaName:e.asanaName,asanaSrc:e.asanaSrc})}},{key:"render",value:function(){return o.a.createElement("div",{className:"asanas"},o.a.createElement("form",{className:"asanas__search-form",onSubmit:this.onSearchSubmit},o.a.createElement("input",{placeholder:"Search asana",className:"asanas__search-input",onChange:this.onSearchInput})),this.props.loading?o.a.createElement(Le,null):this.props.error.isError?o.a.createElement("div",null,this.props.error.message):o.a.createElement(o.a.Fragment,null,o.a.createElement(Ne,{asanas:this.props.results,onItemClick:this.onAddToFlowClick,btnText:"Add to flow",showTitle:!1}),this.props.results.length>0&&o.a.createElement(Re,{pageNumber:this.props.resultsPage,textToSearch:this.state.search,fetchPage:this.props.fetchSearchResults})))}}])&&De(n.prototype,i),a&&De(n,a),t}(),Be=oe(function(e){var t=e.search,n=t.loading,r=t.error,o=t.results;return{loading:n,error:r,resultsPage:t.resultsPage,results:o}},{addAsana:function(e){return{type:"ADD_ASANA",payload:{id:e.id,asanaName:e.asanaName,asanaSrc:e.asanaSrc}}},fetchSearchResults:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return function(n){return n(ye(e,t)),ve.getImages(e,t).then(function(e){return n(ge(e,t))}).catch(function(e){return n(be(e))})}},requestSearch:ye,searchSuccess:ge})(We),Ve=function(e){var t=e.sequence,n=e.deleteAsana,r=e.clearSequence;return o.a.createElement("div",{className:"yoga-sequence"},o.a.createElement("h2",null,"My sequence"),t&&t.length?o.a.createElement("div",null,o.a.createElement(Ne,{asanas:t,onItemClick:n,btnText:"Delete from sequence",showTitle:!0}),o.a.createElement("button",{onClick:r},"Clear sequence")):"No asanas, yay!")};Ve.propTypes={sequence:l.a.array.isRequired,deleteAsana:l.a.func.isRequired};var qe=oe(function(e){return{sequence:e.sequence}},{deleteAsana:function(e){return{type:"DELETE_ASANA",payload:{id:e.id}}},clearSequence:function(){return{type:"CLEAR_SEQUENCE"}}})(Ve),$e=Te();a.a.render(o.a.createElement(function(){return o.a.createElement(v,{store:$e},o.a.createElement(Be,null),o.a.createElement(qe,null))},null),document.getElementById("index"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1kZXZ0b29scy1leHRlbnNpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9vbS5wbmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2FkaW5nLWluZGljYXRvci9zdHlsZS5zY3NzPzM4NGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZy1pbmRpY2F0b3Ivc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL2FwcC5zY3NzPzUxMzIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvYXBwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvc2VhcmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2NvbmZpZ3VyZVN0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FzYW5hUGljdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hc2FuYXNMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZy1pbmRpY2F0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXNhbmFTZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMveW9nYVNlcXVlbmNlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiX19nIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsImEiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiQXR0cmlidXRlcyIsImUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQWN0aW9uVHlwZXMiLCJhcHBseU1pZGRsZXdhcmUiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21iaW5lUmVkdWNlcnMiLCJjb21wb3NlIiwiY3JlYXRlU3RvcmUiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmFuZG9tU3RyaW5nIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJzcGxpdCIsImpvaW4iLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiYXJndW1lbnRzIiwiRXJyb3IiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzbGljZSIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJsaXN0ZW5lcnMiLCJsZW5ndGgiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJuZXh0IiwidW5zdWJzY3JpYmUiLCJ0aGlzIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiU3RyaW5nIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImtleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJmb3JFYWNoIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwic3RhdGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2kiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImFwcGx5IiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJhcmciLCJyZWR1Y2UiLCJiIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtYXAiLCJtaWRkbGV3YXJlIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJjcmVhdGVEZXNjIiwiZXhlYyIsInZlcnNpb24iLCJfX2UiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJJT2JqZWN0IiwiZGVmaW5lZCIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJiaXRtYXAiLCJpZCIsInB4IiwiY29uY2F0IiwiY29weXJpZ2h0IiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b0ludGVnZXIiLCJtaW4iLCJmYWlscyIsIm1ldGhvZCIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZU9mIiwic2hhcmVkIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwicmVzdWx0IiwiREVTQ1JJUFRPUlMiLCJNRVRBIiwiS0VZIiwiJGZhaWxzIiwic2V0VG9TdHJpbmdUYWciLCJ3a3MiLCJ3a3NFeHQiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsImlzQXJyYXkiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCJnT1BOIiwiJFN5bWJvbCIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJPYmplY3RQcm90byIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkQiLCJwcm90b0Rlc2MiLCJ3cmFwIiwiX2siLCJpc1N5bWJvbCIsIml0ZXJhdG9yIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0Iiwic2V0IiwiZXM2U3ltYm9scyIsImoiLCJ3ZWxsS25vd25TeW1ib2xzIiwiayIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsIlJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiJCR0eXBlb2YiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsInJvb3QiLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInByb3BJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZyIsImdldEtleXMiLCJhcnJheUluZGV4T2YiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIkxJQlJBUlkiLCJjaGFyQXQiLCJkb2N1bWVudEVsZW1lbnQiLCJhZGRUb1Vuc2NvcGFibGVzIiwic3RlcCIsIkl0ZXJhdG9ycyIsIml0ZXJhdGVkIiwia2luZCIsIl90IiwiQXJndW1lbnRzIiwiY2xhc3NvZiIsInRlc3QiLCJzZXRQcm90b3R5cGVPZiIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJldmVudCIsImRhdGEiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiY2xlYXIiLCJ1biIsIlByb21pc2VDYXBhYmlsaXR5IiwiQyIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJzYW1lVmFsdWUiLCJyZWdFeHBFeGVjIiwiU0VBUkNIIiwiJHNlYXJjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJlZ2V4cCIsIlJlZ0V4cCIsImRvbmUiLCJyeCIsInByZXZpb3VzTGFzdEluZGV4IiwibGFzdEluZGV4IiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInN0ciIsInJlQ29weSIsIm1hdGNoIiwicmUiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwic2V0QXR0cmlidXRlIiwidXBkYXRlIiwicmVtb3ZlIiwidHJhbnNmb3JtIiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJjb21wb3NlV2l0aERldlRvb2xzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiZGV2VG9vbHNFbmhhbmNlciIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJub29wIiwicSIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsImFhIiwiYmEiLCJBIiwiaCIsImNhIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInByb3BzIiwiY29udGV4dCIsInVwZGF0ZXIiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkgiLCJjb25zdHJ1Y3RvciIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImN1cnJlbnQiLCJKIiwiSyIsIkwiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJjaGlsZHJlbiIsIl9vd25lciIsIk4iLCJRIiwicG9wIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiPSIsIjoiLCJlc2NhcGUiLCJlYSIsImZhIiwiViIsImRhIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJ0b0xvd2VyQ2FzZSIsIlRhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWEiLCJWYSIsIldhIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsInRleHRDb250ZW50IiwiZmIiLCJnYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaWIiLCJldmVudFBvb2wiLCJqYiIsImRlc3RydWN0b3IiLCJoYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiZG9jdW1lbnRNb2RlIiwicGIiLCJxYiIsInJiIiwic2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidGIiLCJ1YiIsImtleUNvZGUiLCJ2YiIsImRldGFpbCIsIndiIiwiemIiLCJsb2NhbGUiLCJ3aGljaCIsInhiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwieWIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJNYiIsIm5vZGVOYW1lIiwiTmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIk9iIiwiUGIiLCJSYiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiUWIiLCJTYiIsImNoZWNrZWQiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImtjIiwibGMiLCJtYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJyYyIsInNjIiwidG9VcHBlckNhc2UiLCJ0YyIsInBjIiwicWMiLCJvYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJ2aWV3IiwiUmMiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiU2MiLCJnZXRNb2RpZmllclN0YXRlIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJaYyIsInBvaW50ZXJJZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiamQiLCJjbGlwYm9hcmREYXRhIiwia2QiLCJsZCIsImNoYXJDb2RlIiwibWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwibmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0Iiwib2QiLCJsb2NhdGlvbiIsInJlcGVhdCIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicmQiLCJzZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwidGQiLCJ1ZCIsInZkIiwid2QiLCJpc0ludGVyYWN0aXZlIiwieGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJ5ZCIsInpkIiwiQWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsImJvZHkiLCJLZCIsIkxkIiwibm9kZSIsIm9mZnNldCIsIk5kIiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUmQiLCJTZCIsInNlbGVjdCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJiZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2UiLCJkZSIsImVlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImZlIiwibWF0aG1sIiwic3ZnIiwiZ2UiLCJoZSIsImllIiwiamUiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwia2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJsZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibWUiLCJuZSIsInRyaW0iLCJvZSIsInNldFByb3BlcnR5IiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwicWUiLCJzZSIsImJsdXIiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsImF1dG9Gb2N1cyIsInhlIiwiX19odG1sIiwieWUiLCJ6ZSIsImNsZWFyVGltZW91dCIsIkFlIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkJlIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJEZSIsIkVlIiwiU2V0IiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIktlIiwiTGUiLCJNZSIsIk5lIiwiZ2V0Q2hpbGRDb250ZXh0IiwiT2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVWUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlZlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJjZiIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiZGYiLCJmZiIsImxhdGVzdFBpbmdlZFRpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwiZ2YiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsImpmIiwia2YiLCJiYXNlU3RhdGUiLCJ0ZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJsZiIsIm5mIiwibWYiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidWYiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJ2ZiIsIndmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwieGYiLCJ5ZiIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiemYiLCJBZiIsIl9zdHJpbmdSZWYiLCJCZiIsIkNmIiwiTWFwIiwiZGVsZXRlIiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiSmYiLCJ0YWdOYW1lIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwiYmFzZVVwZGF0ZSIsIm5nIiwib2ciLCJwZyIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJxZyIsImxhc3QiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJ0aGVuIiwiaGYiLCJXZSIsImh5ZHJhdGUiLCJoaWRkZW4iLCJmaXJzdCIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJzdGFjayIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJvbkNsaWNrIiwib25jbGljayIsInBoIiwiV2Vha1NldCIsInFoIiwicmgiLCJzaCIsInRoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsInVoIiwiaGkiLCJYaCIsImFkZCIsIkJoIiwiV2Vha01hcCIsIkNoIiwiRGgiLCJFaCIsImNvbXBvbmVudERpZENhdGNoIiwiRmgiLCJjb21wb25lbnRTdGFjayIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmgiLCJaaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImVmIiwiUGQiLCJZaCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmluaXNoZWRXb3JrIiwiJGgiLCJhaSIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJiaSIsImNpIiwiZGkiLCJtYXhEdXJhdGlvbiIsInBpbmdDYWNoZSIsImVpIiwiZmkiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImdpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidW5zdGFibGVfbm93IiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwidGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJCaSIsIkNpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJPaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJQaSIsIl9pbnRlcm5hbFJvb3QiLCJRaSIsIlNpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiUmkiLCJUaSIsIk1pIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJXaSIsIlhpIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsIl9zY2hlZE1vY2siLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImZyb21JbmRleCIsIm1heCIsImNyZWF0ZVByb3BlcnR5IiwiZGVzYyIsImdldERlc2MiLCJnT1BTIiwiUmVmbGVjdCIsImdldFN5bWJvbHMiLCIkZm9yRWFjaCIsIlNUUklDVCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yaWdpbmFsIiwiU1BFQ0lFUyIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCIkaXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiTkFNRSIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiQmFzZSIsIkNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsIiRhc3NpZ24iLCJhTGVuIiwiJGZpbHRlciIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCIkcmVkdWNlIiwiaXNSaWdodCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwiYW5JbnN0YW5jZSIsImZvck9mIiwidGFzayIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInVzZXJBZ2VudCIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlIiwiZW1wdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiX24iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl9kIiwiX3ciLCIkcmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCJpdGVyIiwiaXRlcmFibGUiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsImZvcmJpZGRlbkZpZWxkIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJGbiIsInJldCIsImdldEl0ZXJhdG9yTWV0aG9kIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImZsdXNoIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsImZvcmNlZCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiYXJyYXlTbGljZSIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImxlbiIsInBhcnRBcmdzIiwiYm91bmQiLCIkbWFwIiwiaG1yIiwibG9jYWxzIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIlJlYWN0UmVkdXhDb250ZXh0IiwicmVhY3RfZGVmYXVsdCIsImJhdGNoX2JhdGNoIiwiZ2V0QmF0Y2giLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImJhdGNoIiwidHJ5VW5zdWJzY3JpYmUiLCJQcm92aWRlcl9Qcm92aWRlciIsIl9Db21wb25lbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfdGhpcyIsIm5vdGlmeVN1YnNjcmliZXJzIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsIl9pc01vdW50ZWQiLCJwcmV2UHJvcHMiLCJyZWFjdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsImJyb3dzZXJfZGVmYXVsdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJyZWFjdF9pcyIsImNvbnRleHRWYWx1ZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4IiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInN0cmljdEVxdWFsIiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJyZWFjdF9kb20iLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiZXMiLCJTZWFyY2hTZXJ2aWNlIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJlbmFibGVjb3JzIiwiY3giLCJnZXRIZWFkZXJzIiwic2VhcmNoX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImdldFNlYXJjaFVSTCIsImdldEltYWdlcyIsIlJlYWN0IiwiSGVhZGVycyIsInF1ZXJ5IiwicGFnZSIsImZldGNoIiwiaGVhZGVycyIsImpzb24iLCJzZWFyY2hSZXN1bHQiLCJpdGVtcyIsInBhZ2VtYXAiLCJjc2VfaW1hZ2UiLCJjYWNoZUlkIiwiYXNhbmFOYW1lIiwiYXNhbmFTcmMiLCJyZXF1ZXN0U2VhcmNoIiwicGhyYXNlIiwibG9hZGluZyIsInJlc3VsdHNQYWdlIiwic2VhcmNoU3VjY2VzcyIsInJlc3VsdHMiLCJzZWFyY2hGYWlsdXJlIiwiaW5pdGlhbFN0YXRlIiwiaXNFcnJvciIsIm1lc3NhZ2UiLCJzZXF1ZW5jZSIsInJvb3RSZWR1Y2VyIiwiYXNhbmEiLCJfb2JqZWN0U3ByZWFkIiwiY29uZmlndXJlU3RvcmUiLCJ0aHVua01pZGRsZXdhcmUiLCJBc2FuYVBpY3R1cmUiLCJpbWdTcmMiLCJidG5UZXh0IiwiY2xhc3NOYW1lIiwiQXNhbmFzTGlzdCIsImFzYW5hcyIsIm9uSXRlbUNsaWNrIiwic2hvd1RpdGxlIiwiYXNhbmFQaWN0dXJlIiwiUGFnaW5hdGlvbiIsInRleHRUb1NlYXJjaCIsInBhZ2VOdW1iZXIiLCJmZXRjaFBhZ2UiLCJwYWdlTnVtYmVyVG9TaG93Iiwib25DaGFuZ2VQYWdlIiwibnVtYmVyVG9DaGFuZ2UiLCJMb2FkaW5nSW5kaWNhdG9yIiwibG9hZGluZ1NyYyIsIkFzYW5hU2VhcmNoIiwiYXNhbmFTZWFyY2hfY2xhc3NDYWxsQ2hlY2siLCJhc2FuYVNlYXJjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiYXNhbmFTZWFyY2hfZ2V0UHJvdG90eXBlT2YiLCJvblNlYXJjaFN1Ym1pdCIsImFzYW5hU2VhcmNoX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIm9uU2VhcmNoSW5wdXQiLCJvbkFkZFRvRmxvd0NsaWNrIiwiZmV0Y2hTZWFyY2hSZXN1bHRzIiwiYWRkQXNhbmEiLCJvblN1Ym1pdCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJsb2FkaW5nX2luZGljYXRvciIsImFzYW5hc0xpc3QiLCJwYWdpbmF0aW9uIiwiY29ubmVjdCIsIl9zdGF0ZSRzZWFyY2giLCJZb2dhU2VxdWVuY2UiLCJkZWxldGVBc2FuYSIsImNsZWFyU2VxdWVuY2UiLCJSZWFjdERPTSIsImFzYW5hU2VhcmNoIiwieW9nYVNlcXVlbmNlIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLG9DQy9FQWhDLEVBQUFELFFBQW1CRixFQUFRLHFCQ2MzQkcsRUFBQUQsUUFBbUJGLEVBQVEsR0FBUkEsb0JDakJuQixJQUFBb0MsRUFBWXBDLEVBQVEsR0FBUkEsQ0FBbUIsT0FDL0JxQyxFQUFVckMsRUFBUSxJQUNsQm1CLEVBQWFuQixFQUFRLEdBQVdtQixPQUNoQ21CLEVBQUEsbUJBQUFuQixHQUVBaEIsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLE9BQUF5QixFQUFBekIsS0FBQXlCLEVBQUF6QixHQUNBMkIsR0FBQW5CLEVBQUFSLEtBQUEyQixFQUFBbkIsRUFBQWtCLEdBQUEsVUFBQTFCLE1BR0F5Qix5QkNWQSxJQUFBRyxFQUFhdkMsRUFBUSxHQUNyQndDLEVBQVd4QyxFQUFRLElBQ25CeUMsRUFBV3pDLEVBQVEsSUFDbkIwQyxFQUFlMUMsRUFBUSxJQUN2QjJDLEVBQVUzQyxFQUFRLElBR2xCNEMsRUFBQSxTQUFBQyxFQUFBbEMsRUFBQW1DLEdBQ0EsSUFRQW5CLEVBQUFvQixFQUFBQyxFQUFBQyxFQVJBQyxFQUFBTCxFQUFBRCxFQUFBTyxFQUNBQyxFQUFBUCxFQUFBRCxFQUFBUyxFQUNBQyxFQUFBVCxFQUFBRCxFQUFBVyxFQUNBQyxFQUFBWCxFQUFBRCxFQUFBYSxFQUNBQyxFQUFBYixFQUFBRCxFQUFBZSxFQUNBQyxFQUFBUixFQUFBYixFQUFBZSxFQUFBZixFQUFBNUIsS0FBQTRCLEVBQUE1QixHQUFBLEtBQWtGNEIsRUFBQTVCLElBQUEsSUFBdUIsVUFDekdULEVBQUFrRCxFQUFBWixJQUFBN0IsS0FBQTZCLEVBQUE3QixHQUFBLElBQ0FrRCxFQUFBM0QsRUFBQSxZQUFBQSxFQUFBLGNBR0EsSUFBQXlCLEtBREF5QixJQUFBTixFQUFBbkMsR0FDQW1DLEVBSUFFLElBRkFELEdBQUFHLEdBQUFVLFFBQUFFLElBQUFGLEVBQUFqQyxJQUVBaUMsRUFBQWQsR0FBQW5CLEdBRUFzQixFQUFBUyxHQUFBWCxFQUFBSixFQUFBSyxFQUFBVCxHQUFBaUIsR0FBQSxtQkFBQVIsRUFBQUwsRUFBQW9CLFNBQUF4RCxLQUFBeUMsS0FFQVksR0FBQWxCLEVBQUFrQixFQUFBakMsRUFBQXFCLEVBQUFILEVBQUFELEVBQUFvQixHQUVBOUQsRUFBQXlCLElBQUFxQixHQUFBUCxFQUFBdkMsRUFBQXlCLEVBQUFzQixHQUNBTyxHQUFBSyxFQUFBbEMsSUFBQXFCLElBQUFhLEVBQUFsQyxHQUFBcUIsSUFHQVQsRUFBQUMsT0FFQUksRUFBQU8sRUFBQSxFQUNBUCxFQUFBUyxFQUFBLEVBQ0FULEVBQUFXLEVBQUEsRUFDQVgsRUFBQWEsRUFBQSxFQUNBYixFQUFBZSxFQUFBLEdBQ0FmLEVBQUFxQixFQUFBLEdBQ0FyQixFQUFBb0IsRUFBQSxHQUNBcEIsRUFBQXNCLEVBQUEsSUFDQS9ELEVBQUFELFFBQUEwQyxpQkN6Q0EsSUFBQUwsRUFBQXBDLEVBQUFELFFBQUEsb0JBQUFpRSxlQUFBQyxXQUNBRCxPQUFBLG9CQUFBRSxXQUFBRCxXQUFBQyxLQUVBTixTQUFBLGNBQUFBLEdBQ0EsaUJBQUFPLFVBQUEvQixvQkNMQSxJQUFBZ0MsRUFBZXZFLEVBQVEsR0FDdkJHLEVBQUFELFFBQUEsU0FBQXNFLEdBQ0EsSUFBQUQsRUFBQUMsR0FBQSxNQUFBQyxVQUFBRCxFQUFBLHNCQUNBLE9BQUFBLGtCQ0hBckUsRUFBQUQsUUFBQSxTQUFBc0UsR0FDQSx1QkFBQUEsRUFBQSxPQUFBQSxFQUFBLG1CQUFBQSxvQkNBQXJFLEVBQUFELFNBQWtCRixFQUFRLEdBQVJBLENBQWtCLFdBQ3BDLE9BQTBFLEdBQTFFYyxPQUFBQyxlQUFBLEdBQWlDLEtBQVFFLElBQUEsV0FBbUIsWUFBY3lELHFCQ0YxRSxJQUFBQyxFQUFlM0UsRUFBUSxHQUN2QjRFLEVBQXFCNUUsRUFBUSxJQUM3QjZFLEVBQWtCN0UsRUFBUSxJQUMxQjhFLEVBQUFoRSxPQUFBQyxlQUVBYixFQUFBNkUsRUFBWS9FLEVBQVEsR0FBZ0JjLE9BQUFDLGVBQUEsU0FBQWlFLEVBQUF2QixFQUFBd0IsR0FJcEMsR0FIQU4sRUFBQUssR0FDQXZCLEVBQUFvQixFQUFBcEIsR0FBQSxHQUNBa0IsRUFBQU0sR0FDQUwsRUFBQSxJQUNBLE9BQUFFLEVBQUFFLEVBQUF2QixFQUFBd0IsR0FDRyxNQUFBQyxJQUNILFdBQUFELEdBQUEsUUFBQUEsRUFBQSxNQUFBUixVQUFBLDRCQUVBLE1BREEsVUFBQVEsSUFBQUQsRUFBQXZCLEdBQUF3QixFQUFBNUQsT0FDQTJELGlDQ2RBaEYsRUFBQWtCLEVBQUFpRSxHQUFBbkYsRUFBQVUsRUFBQXlFLEVBQUEsOENBQUFDLElBQUFwRixFQUFBVSxFQUFBeUUsRUFBQSxvQ0FBQUUsSUFBQXJGLEVBQUFVLEVBQUF5RSxFQUFBLHVDQUFBRyxJQUFBdEYsRUFBQVUsRUFBQXlFLEVBQUEsb0NBQUFJLElBQUF2RixFQUFBVSxFQUFBeUUsRUFBQSw0QkFBQUssSUFBQXhGLEVBQUFVLEVBQUF5RSxFQUFBLGdDQUFBTSxJQUFBLElBQUFDLEVBQUExRixFQUFBLElBUUEyRixFQUFBLFdBQ0EsT0FBQXZCLEtBQUF3QixTQUFBQyxTQUFBLElBQUFDLFVBQUEsR0FBQUMsTUFBQSxJQUFBQyxLQUFBLE1BR0FaLEVBQUEsQ0FDQWEsS0FBQSxlQUFBTixJQUNBTyxRQUFBLGtCQUFBUCxJQUNBUSxxQkFBQSxXQUNBLHFDQUFBUixNQVFBLFNBQUFTLEVBQUFDLEdBQ0Esb0JBQUFBLEdBQUEsT0FBQUEsRUFBQSxTQUdBLElBRkEsSUFBQUMsRUFBQUQsRUFFQSxPQUFBdkYsT0FBQXlGLGVBQUFELElBQ0FBLEVBQUF4RixPQUFBeUYsZUFBQUQsR0FHQSxPQUFBeEYsT0FBQXlGLGVBQUFGLEtBQUFDLEVBNkJBLFNBQUFiLEVBQUFlLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFFQSxzQkFBQUYsR0FBQSxtQkFBQUMsR0FBQSxtQkFBQUEsR0FBQSxtQkFBQUUsVUFBQSxHQUNBLFVBQUFDLE1BQUEsdUpBUUEsR0FMQSxtQkFBQUosUUFBQSxJQUFBQyxJQUNBQSxFQUFBRCxFQUNBQSxPQUFBM0MsUUFHQSxJQUFBNEMsRUFBQSxDQUNBLHNCQUFBQSxFQUNBLFVBQUFHLE1BQUEsMkNBR0EsT0FBQUgsRUFBQWpCLEVBQUFpQixDQUFBRixFQUFBQyxHQUdBLHNCQUFBRCxFQUNBLFVBQUFLLE1BQUEsMENBR0EsSUFBQUMsRUFBQU4sRUFDQU8sRUFBQU4sRUFDQU8sRUFBQSxHQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBU0EsU0FBQUMsSUFDQUYsSUFBQUQsSUFDQUMsRUFBQUQsRUFBQUksU0FVQSxTQUFBQyxJQUNBLEdBQUFILEVBQ0EsVUFBQUwsTUFBQSx3TUFHQSxPQUFBRSxFQTJCQSxTQUFBTyxFQUFBQyxHQUNBLHNCQUFBQSxFQUNBLFVBQUFWLE1BQUEsMkNBR0EsR0FBQUssRUFDQSxVQUFBTCxNQUFBLCtUQUdBLElBQUFXLEdBQUEsRUFHQSxPQUZBTCxJQUNBRixFQUFBUSxLQUFBRixHQUNBLFdBQ0EsR0FBQUMsRUFBQSxDQUlBLEdBQUFOLEVBQ0EsVUFBQUwsTUFBQSxvS0FHQVcsR0FBQSxFQUNBTCxJQUNBLElBQUFPLEVBQUFULEVBQUFVLFFBQUFKLEdBQ0FOLEVBQUFXLE9BQUFGLEVBQUEsS0E4QkEsU0FBQUcsRUFBQUMsR0FDQSxJQUFBMUIsRUFBQTBCLEdBQ0EsVUFBQWpCLE1BQUEsMkVBR0EsWUFBQWlCLEVBQUFqRixLQUNBLFVBQUFnRSxNQUFBLHNGQUdBLEdBQUFLLEVBQ0EsVUFBQUwsTUFBQSxzQ0FHQSxJQUNBSyxHQUFBLEVBQ0FILEVBQUFELEVBQUFDLEVBQUFlLEdBQ0ssUUFDTFosR0FBQSxFQUtBLElBRkEsSUFBQWEsRUFBQWYsRUFBQUMsRUFFQTdHLEVBQUEsRUFBbUJBLEVBQUEySCxFQUFBQyxPQUFzQjVILElBQUEsRUFFekNtSCxFQURBUSxFQUFBM0gsTUFJQSxPQUFBMEgsRUE2RUEsT0FIQUQsRUFBQSxDQUNBaEYsS0FBQXVDLEVBQUFhLFFBRUFVLEVBQUEsQ0FDQWtCLFdBQ0FQLFlBQ0FELFdBQ0FZLGVBbkVBLFNBQUFDLEdBQ0Esc0JBQUFBLEVBQ0EsVUFBQXJCLE1BQUEsOENBR0FDLEVBQUFvQixFQUtBTCxFQUFBLENBQ0FoRixLQUFBdUMsRUFBQWMsYUF5RFdSLEVBQUEsR0E5Q1gsV0FDQSxJQUFBeUMsRUFFQUMsRUFBQWQsRUFDQSxPQUFBYSxFQUFBLENBU0FiLFVBQUEsU0FBQWUsR0FDQSxvQkFBQUEsR0FBQSxPQUFBQSxFQUNBLFVBQUE1RCxVQUFBLDBDQUdBLFNBQUE2RCxJQUNBRCxFQUFBRSxNQUNBRixFQUFBRSxLQUFBbEIsS0FNQSxPQUZBaUIsSUFFQSxDQUNBRSxZQUZBSixFQUFBRSxPQUtZNUMsRUFBQSxHQUFZLFdBQ3hCLE9BQUErQyxNQUNLTixHQWNrQnhCLEVBMEJ2QixTQUFBK0IsRUFBQS9HLEVBQUFtRyxHQUNBLElBQUFhLEVBQUFiLEtBQUFqRixLQUVBLGdCQURBOEYsR0FBQSxXQUFBQyxPQUFBRCxHQUFBLGtCQUNBLGNBQUFoSCxFQUFBLGlMQWdFQSxTQUFBNEQsRUFBQXNELEdBSUEsSUFIQSxJQUFBQyxFQUFBaEksT0FBQWlJLEtBQUFGLEdBQ0FHLEVBQUEsR0FFQTVJLEVBQUEsRUFBaUJBLEVBQUEwSSxFQUFBZCxPQUF3QjVILElBQUEsQ0FDekMsSUFBQXVCLEVBQUFtSCxFQUFBMUksR0FFUSxFQU1SLG1CQUFBeUksRUFBQWxILEtBQ0FxSCxFQUFBckgsR0FBQWtILEVBQUFsSCxJQUlBLElBU0FzSCxFQVRBQyxFQUFBcEksT0FBQWlJLEtBQUFDLEdBV0EsS0FqRUEsU0FBQUgsR0FDQS9ILE9BQUFpSSxLQUFBRixHQUFBTSxRQUFBLFNBQUF4SCxHQUNBLElBQUE2RSxFQUFBcUMsRUFBQWxILEdBS0EsWUFKQTZFLE9BQUExQyxFQUFBLENBQ0FqQixLQUFBdUMsRUFBQWEsT0FJQSxVQUFBWSxNQUFBLFlBQUFsRixFQUFBLGlSQUdBLFFBRUssSUFGTDZFLE9BQUExQyxFQUFBLENBQ0FqQixLQUFBdUMsRUFBQWUseUJBRUEsVUFBQVUsTUFBQSxZQUFBbEYsRUFBQSw2RUFBQXlELEVBQUFhLEtBQUEsaVRBb0RBbUQsQ0FBQUosR0FDRyxNQUFBOUQsR0FDSCtELEVBQUEvRCxFQUdBLGdCQUFBbUUsRUFBQXZCLEdBS0EsUUFKQSxJQUFBdUIsSUFDQUEsRUFBQSxJQUdBSixFQUNBLE1BQUFBLEVBY0EsSUFYK0MsSUFRL0NLLEdBQUEsRUFDQUMsRUFBQSxHQUVBQyxFQUFBLEVBQW9CQSxFQUFBTixFQUFBbEIsT0FBOEJ3QixJQUFBLENBQ2xELElBQUFDLEVBQUFQLEVBQUFNLEdBQ0FoRCxFQUFBd0MsRUFBQVMsR0FDQUMsRUFBQUwsRUFBQUksR0FDQUUsRUFBQW5ELEVBQUFrRCxFQUFBNUIsR0FFQSxZQUFBNkIsRUFBQSxDQUNBLElBQUFDLEVBQUFsQixFQUFBZSxFQUFBM0IsR0FDQSxVQUFBakIsTUFBQStDLEdBR0FMLEVBQUFFLEdBQUFFLEVBQ0FMLEtBQUFLLElBQUFELEVBR0EsT0FBQUosRUFBQUMsRUFBQUYsR0FJQSxTQUFBUSxFQUFBQyxFQUFBakMsR0FDQSxrQkFDQSxPQUFBQSxFQUFBaUMsRUFBQUMsTUFBQXRCLEtBQUE3QixhQTBCQSxTQUFBdEIsRUFBQTBFLEVBQUFuQyxHQUNBLHNCQUFBbUMsRUFDQSxPQUFBSCxFQUFBRyxFQUFBbkMsR0FHQSxvQkFBQW1DLEdBQUEsT0FBQUEsRUFDQSxVQUFBbkQsTUFBQSxpRkFBQW1ELEVBQUEsY0FBQUEsR0FBQSw4RkFHQSxJQUFBQyxFQUFBLEdBRUEsUUFBQXRJLEtBQUFxSSxFQUFBLENBQ0EsSUFBQUYsRUFBQUUsRUFBQXJJLEdBRUEsbUJBQUFtSSxJQUNBRyxFQUFBdEksR0FBQWtJLEVBQUFDLEVBQUFqQyxJQUlBLE9BQUFvQyxFQUdBLFNBQUFDLEVBQUE3RCxFQUFBMUUsRUFBQU4sR0FZQSxPQVhBTSxLQUFBMEUsRUFDQXZGLE9BQUFDLGVBQUFzRixFQUFBMUUsRUFBQSxDQUNBTixRQUNBTCxZQUFBLEVBQ0FtSixjQUFBLEVBQ0FDLFVBQUEsSUFHQS9ELEVBQUExRSxHQUFBTixFQUdBZ0YsRUFHQSxTQUFBZ0UsRUFBQXZJLEVBQUF3SSxHQUNBLElBQUF2QixFQUFBakksT0FBQWlJLEtBQUFqSCxHQVNBLE9BUEFoQixPQUFBeUosdUJBQ0F4QixFQUFBdEIsS0FBQXNDLE1BQUFoQixFQUFBakksT0FBQXlKLHNCQUFBekksSUFHQXdJLElBQUF2QixJQUFBeUIsT0FBQSxTQUFBQyxHQUNBLE9BQUEzSixPQUFBNEoseUJBQUE1SSxFQUFBMkksR0FBQXpKLGNBRUErSCxFQUdBLFNBQUE0QixFQUFBL0csR0FDQSxRQUFBeEQsRUFBQSxFQUFpQkEsRUFBQXdHLFVBQUFvQixPQUFzQjVILElBQUEsQ0FDdkMsSUFBQTBDLEVBQUEsTUFBQThELFVBQUF4RyxHQUFBd0csVUFBQXhHLEdBQUEsR0FFQUEsRUFBQSxFQUNBaUssRUFBQXZILEdBQUEsR0FBQXFHLFFBQUEsU0FBQXhILEdBQ0F1SSxFQUFBdEcsRUFBQWpDLEVBQUFtQixFQUFBbkIsTUFFS2IsT0FBQThKLDBCQUNMOUosT0FBQStKLGlCQUFBakgsRUFBQTlDLE9BQUE4SiwwQkFBQTlILElBRUF1SCxFQUFBdkgsR0FBQXFHLFFBQUEsU0FBQXhILEdBQ0FiLE9BQUFDLGVBQUE2QyxFQUFBakMsRUFBQWIsT0FBQTRKLHlCQUFBNUgsRUFBQW5CLE1BS0EsT0FBQWlDLEVBYUEsU0FBQTRCLElBQ0EsUUFBQXNGLEVBQUFsRSxVQUFBb0IsT0FBQStDLEVBQUEsSUFBQUMsTUFBQUYsR0FBQXJCLEVBQUEsRUFBc0VBLEVBQUFxQixFQUFhckIsSUFDbkZzQixFQUFBdEIsR0FBQTdDLFVBQUE2QyxHQUdBLFdBQUFzQixFQUFBL0MsT0FDQSxTQUFBaUQsR0FDQSxPQUFBQSxHQUlBLElBQUFGLEVBQUEvQyxPQUNBK0MsRUFBQSxHQUdBQSxFQUFBRyxPQUFBLFNBQUF4RyxFQUFBeUcsR0FDQSxrQkFDQSxPQUFBekcsRUFBQXlHLEVBQUFwQixXQUFBLEVBQUFuRCxlQXNCQSxTQUFBdkIsSUFDQSxRQUFBeUYsRUFBQWxFLFVBQUFvQixPQUFBb0QsRUFBQSxJQUFBSixNQUFBRixHQUFBckIsRUFBQSxFQUE0RUEsRUFBQXFCLEVBQWFyQixJQUN6RjJCLEVBQUEzQixHQUFBN0MsVUFBQTZDLEdBR0EsZ0JBQUFoRSxHQUNBLGtCQUNBLElBQUFyRCxFQUFBcUQsRUFBQXNFLFdBQUEsRUFBQW5ELFdBRUF5RSxFQUFBLFdBQ0EsVUFBQXhFLE1BQUEsMkhBR0F5RSxFQUFBLENBQ0FqRSxTQUFBakYsRUFBQWlGLFNBQ0FRLFNBQUEsV0FDQSxPQUFBd0QsRUFBQXRCLFdBQUEsRUFBQW5ELGFBR0EyRSxFQUFBSCxFQUFBSSxJQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQUgsS0FHQSxPQUFBWCxFQUFBLEdBQThCdkksRUFBQSxDQUM5QnlGLFNBRkF3RCxFQUFBN0YsRUFBQXVFLFdBQUEsRUFBQXdCLEVBQUEvRixDQUFBcEQsRUFBQXlGLDZDQ2psQkExSCxFQUFBRCxRQTVCQSxTQUFBd0wsRUFBQUMsRUFBQWpILEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEVBQUFILEdBT0EsSUFBQTJHLEVBQUEsQ0FDQSxJQUFBRSxFQUNBLFFBQUE5SCxJQUFBNkgsRUFDQUMsRUFBQSxJQUFBL0UsTUFDQSxxSUFHSyxDQUNMLElBQUFnRixFQUFBLENBQUFuSCxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxFQUFBSCxHQUNBK0csRUFBQSxHQUNBRixFQUFBLElBQUEvRSxNQUNBOEUsRUFBQUksUUFBQSxpQkFBMEMsT0FBQUYsRUFBQUMsU0FFMUNuTCxLQUFBLHNCQUlBLE1BREFpTCxFQUFBSSxZQUFBLEVBQ0FKLHFCQzVDQSxJQUFBOUcsRUFBUzlFLEVBQVEsR0FDakJpTSxFQUFpQmpNLEVBQVEsSUFDekJHLEVBQUFELFFBQWlCRixFQUFRLEdBQWdCLFNBQUE4QixFQUFBSCxFQUFBTixHQUN6QyxPQUFBeUQsRUFBQUMsRUFBQWpELEVBQUFILEVBQUFzSyxFQUFBLEVBQUE1SyxLQUNDLFNBQUFTLEVBQUFILEVBQUFOLEdBRUQsT0FEQVMsRUFBQUgsR0FBQU4sRUFDQVMsa0JDTkEzQixFQUFBRCxRQUFBLFNBQUFnTSxHQUNBLElBQ0EsUUFBQUEsSUFDRyxNQUFBaEgsR0FDSCwwQkNKQSxJQUFBMUMsRUFBQXJDLEVBQUFELFFBQUEsQ0FBNkJpTSxRQUFBLFNBQzdCLGlCQUFBQyxVQUFBNUosb0JDREEsSUFBQUQsRUFBYXZDLEVBQVEsR0FDckJ5QyxFQUFXekMsRUFBUSxJQUNuQnFNLEVBQVVyTSxFQUFRLElBQ2xCc00sRUFBVXRNLEVBQVEsR0FBUkEsQ0FBZ0IsT0FDMUJ1TSxFQUFnQnZNLEVBQVEsSUFFeEJ3TSxHQUFBLEdBQUFELEdBQUF4RyxNQURBLFlBR0EvRixFQUFRLElBQVN5TSxjQUFBLFNBQUFqSSxHQUNqQixPQUFBK0gsRUFBQWhNLEtBQUFpRSxLQUdBckUsRUFBQUQsUUFBQSxTQUFBOEUsRUFBQXJELEVBQUErSyxFQUFBQyxHQUNBLElBQUFDLEVBQUEsbUJBQUFGLEVBQ0FFLElBQUFQLEVBQUFLLEVBQUEsU0FBQWpLLEVBQUFpSyxFQUFBLE9BQUEvSyxJQUNBcUQsRUFBQXJELEtBQUErSyxJQUNBRSxJQUFBUCxFQUFBSyxFQUFBSixJQUFBN0osRUFBQWlLLEVBQUFKLEVBQUF0SCxFQUFBckQsR0FBQSxHQUFBcUQsRUFBQXJELEdBQUE2SyxFQUFBeEcsS0FBQTRDLE9BQUFqSCxNQUNBcUQsSUFBQXpDLEVBQ0F5QyxFQUFBckQsR0FBQStLLEVBQ0dDLEVBR0EzSCxFQUFBckQsR0FDSHFELEVBQUFyRCxHQUFBK0ssRUFFQWpLLEVBQUF1QyxFQUFBckQsRUFBQStLLFdBTEExSCxFQUFBckQsR0FDQWMsRUFBQXVDLEVBQUFyRCxFQUFBK0ssT0FPQzNJLFNBQUEvQixVQXZCRCxXQXVCQyxXQUNELHlCQUFBeUcsV0FBQTZELElBQUFDLEVBQUFoTSxLQUFBa0ksdUJDN0JBLElBQUF4RyxFQUFBLEdBQXVCQSxlQUN2QjlCLEVBQUFELFFBQUEsU0FBQXNFLEVBQUE3QyxHQUNBLE9BQUFNLEVBQUExQixLQUFBaUUsRUFBQTdDLHFCQ0RBLElBQUFrTCxFQUFjN00sRUFBUSxJQUN0QjhNLEVBQWM5TSxFQUFRLElBQ3RCRyxFQUFBRCxRQUFBLFNBQUFzRSxHQUNBLE9BQUFxSSxFQUFBQyxFQUFBdEksc0JDSEEsSUFBQXVJLEVBQWdCL00sRUFBUSxJQUN4QkcsRUFBQUQsUUFBQSxTQUFBOE0sRUFBQUMsRUFBQWpGLEdBRUEsR0FEQStFLEVBQUFDLFFBQ0FsSixJQUFBbUosRUFBQSxPQUFBRCxFQUNBLE9BQUFoRixHQUNBLHVCQUFBdEQsR0FDQSxPQUFBc0ksRUFBQXpNLEtBQUEwTSxFQUFBdkksSUFFQSx1QkFBQUEsRUFBQXlHLEdBQ0EsT0FBQTZCLEVBQUF6TSxLQUFBME0sRUFBQXZJLEVBQUF5RyxJQUVBLHVCQUFBekcsRUFBQXlHLEVBQUExSyxHQUNBLE9BQUF1TSxFQUFBek0sS0FBQTBNLEVBQUF2SSxFQUFBeUcsRUFBQTFLLElBR0Esa0JBQ0EsT0FBQXVNLEVBQUFqRCxNQUFBa0QsRUFBQXJHLDRCQ2pCQXpHLEVBQUFELFFBQUEsU0FBQXNFLEdBQ0Esc0JBQUFBLEVBQUEsTUFBQUMsVUFBQUQsRUFBQSx1QkFDQSxPQUFBQSxvQkNEQSxJQUFBMEksRUFBWWxOLEVBQVEsSUFDcEJtTixFQUFrQm5OLEVBQVEsSUFFMUJHLEVBQUFELFFBQUFZLE9BQUFpSSxNQUFBLFNBQUEvRCxHQUNBLE9BQUFrSSxFQUFBbEksRUFBQW1JLHFCQ0pBLElBQUFMLEVBQWM5TSxFQUFRLElBQ3RCRyxFQUFBRCxRQUFBLFNBQUFzRSxHQUNBLE9BQUExRCxPQUFBZ00sRUFBQXRJLG9CQ0hBckUsRUFBQUQsUUFBQSxTQUFBa04sRUFBQS9MLEdBQ0EsT0FDQUwsYUFBQSxFQUFBb00sR0FDQWpELGVBQUEsRUFBQWlELEdBQ0FoRCxXQUFBLEVBQUFnRCxHQUNBL0wseUJDTEEsSUFBQWdNLEVBQUEsRUFDQUMsRUFBQWxKLEtBQUF3QixTQUNBekYsRUFBQUQsUUFBQSxTQUFBeUIsR0FDQSxnQkFBQTRMLFlBQUF6SixJQUFBbkMsRUFBQSxHQUFBQSxFQUFBLFFBQUEwTCxFQUFBQyxHQUFBekgsU0FBQSxxQkNIQTFGLEVBQUFELFNBQUEsaUJDQUEsSUFBQTJGLEVBQUEsR0FBaUJBLFNBRWpCMUYsRUFBQUQsUUFBQSxTQUFBc0UsR0FDQSxPQUFBcUIsRUFBQXRGLEtBQUFpRSxHQUFBNEMsTUFBQSxzQkNIQWpILEVBQUFELFFBQUEsb0JDQUEsSUFBQXNDLEVBQVd4QyxFQUFRLElBQ25CdUMsRUFBYXZDLEVBQVEsR0FFckJvQyxFQUFBRyxFQURBLHdCQUNBQSxFQURBLHNCQUNBLEtBRUFwQyxFQUFBRCxRQUFBLFNBQUF5QixFQUFBTixHQUNBLE9BQUFlLEVBQUFULEtBQUFTLEVBQUFULFFBQUFtQyxJQUFBekMsSUFBQSxNQUNDLGVBQUFvRyxLQUFBLENBQ0QwRSxRQUFBM0osRUFBQTJKLFFBQ0E1SyxLQUFRdkIsRUFBUSxJQUFZLGdCQUM1QndOLFVBQUEsMERDVEEsSUFBQUMsRUFBVXpOLEVBQVEsSUFFbEJHLEVBQUFELFFBQUFZLE9BQUEsS0FBQTRNLHFCQUFBLEdBQUE1TSxPQUFBLFNBQUEwRCxHQUNBLGdCQUFBaUosRUFBQWpKLEtBQUF1QixNQUFBLElBQUFqRixPQUFBMEQscUJDSEEsSUFBQW1KLEVBQWdCM04sRUFBUSxJQUN4QjROLEVBQUF4SixLQUFBd0osSUFDQXpOLEVBQUFELFFBQUEsU0FBQXNFLEdBQ0EsT0FBQUEsRUFBQSxFQUFBb0osRUFBQUQsRUFBQW5KLEdBQUEsb0NDSkF0RSxFQUFBNkUsRUFBQWpFLE9BQUF5SixxQ0NBQXJLLEVBQUE2RSxFQUFBLEdBQWMySSxtRENDZCxJQUFBRyxFQUFZN04sRUFBUSxJQUVwQkcsRUFBQUQsUUFBQSxTQUFBNE4sRUFBQTdDLEdBQ0EsUUFBQTZDLEdBQUFELEVBQUEsV0FFQTVDLEVBQUE2QyxFQUFBdk4sS0FBQSxrQkFBdUQsR0FBQXVOLEVBQUF2TixLQUFBLDBCQ052RCxJQUFBd04sRUFBVS9OLEVBQVEsR0FBYytFLEVBQ2hDc0gsRUFBVXJNLEVBQVEsSUFDbEJnTyxFQUFVaE8sRUFBUSxFQUFSQSxDQUFnQixlQUUxQkcsRUFBQUQsUUFBQSxTQUFBc0UsRUFBQXlKLEVBQUFDLEdBQ0ExSixJQUFBNkgsRUFBQTdILEVBQUEwSixFQUFBMUosSUFBQXhDLFVBQUFnTSxJQUFBRCxFQUFBdkosRUFBQXdKLEVBQUEsQ0FBb0U3RCxjQUFBLEVBQUE5SSxNQUFBNE0sc0JDSnBFLElBQUFSLEVBQVV6TixFQUFRLElBQ2xCZ08sRUFBVWhPLEVBQVEsRUFBUkEsQ0FBZ0IsZUFFMUJtTyxFQUErQyxhQUEvQ1YsRUFBQSxXQUEyQixPQUFBN0csVUFBM0IsSUFTQXpHLEVBQUFELFFBQUEsU0FBQXNFLEdBQ0EsSUFBQVEsRUFBQW9KLEVBQUF6SyxFQUNBLFlBQUFHLElBQUFVLEVBQUEsbUJBQUFBLEVBQUEsT0FFQSxpQkFBQTRKLEVBVkEsU0FBQTVKLEVBQUE3QyxHQUNBLElBQ0EsT0FBQTZDLEVBQUE3QyxHQUNHLE1BQUF1RCxLQU9IbUosQ0FBQXJKLEVBQUFsRSxPQUFBMEQsR0FBQXdKLElBQUFJLEVBRUFELEVBQUFWLEVBQUF6SSxHQUVBLFdBQUFyQixFQUFBOEosRUFBQXpJLEtBQUEsbUJBQUFBLEVBQUFzSixPQUFBLFlBQUEzSyxrQ0NuQkEsU0FBQTRLLElBRUEsR0FDQSxvQkFBQUMsZ0NBQ0EsbUJBQUFBLCtCQUFBRCxTQWNBLElBRUFDLCtCQUFBRCxZQUNHLE1BQUFFLEdBR0hDLFFBQUE5QyxNQUFBNkMsSUFPQUYsR0FDQXBPLEVBQUFELFFBQW1CRixFQUFRLHFCQ2xDM0IsSUFBQXVFLEVBQWV2RSxFQUFRLEdBQ3ZCMk8sRUFBZTNPLEVBQVEsR0FBVzJPLFNBRWxDQyxFQUFBckssRUFBQW9LLElBQUFwSyxFQUFBb0ssRUFBQUUsZUFDQTFPLEVBQUFELFFBQUEsU0FBQXNFLEdBQ0EsT0FBQW9LLEVBQUFELEVBQUFFLGNBQUFySyxHQUFBLHFCQ0pBLElBQUFELEVBQWV2RSxFQUFRLEdBR3ZCRyxFQUFBRCxRQUFBLFNBQUFzRSxFQUFBakIsR0FDQSxJQUFBZ0IsRUFBQUMsR0FBQSxPQUFBQSxFQUNBLElBQUF3SSxFQUFBTixFQUNBLEdBQUFuSixHQUFBLG1CQUFBeUosRUFBQXhJLEVBQUFxQixZQUFBdEIsRUFBQW1JLEVBQUFNLEVBQUF6TSxLQUFBaUUsSUFBQSxPQUFBa0ksRUFDQSxzQkFBQU0sRUFBQXhJLEVBQUFzSyxXQUFBdkssRUFBQW1JLEVBQUFNLEVBQUF6TSxLQUFBaUUsSUFBQSxPQUFBa0ksRUFDQSxJQUFBbkosR0FBQSxtQkFBQXlKLEVBQUF4SSxFQUFBcUIsWUFBQXRCLEVBQUFtSSxFQUFBTSxFQUFBek0sS0FBQWlFLElBQUEsT0FBQWtJLEVBQ0EsTUFBQWpJLFVBQUEsMkRDVEF0RSxFQUFBRCxRQUFBLFNBQUFzRSxHQUNBLEdBQUFWLE1BQUFVLEVBQUEsTUFBQUMsVUFBQSx5QkFBQUQsR0FDQSxPQUFBQSxvQkNIQSxJQUFBdUssRUFBYS9PLEVBQVEsR0FBUkEsQ0FBbUIsUUFDaENxQyxFQUFVckMsRUFBUSxJQUNsQkcsRUFBQUQsUUFBQSxTQUFBeUIsR0FDQSxPQUFBb04sRUFBQXBOLEtBQUFvTixFQUFBcE4sR0FBQVUsRUFBQVYsb0JDRkF4QixFQUFBRCxRQUFBLGdHQUVBNkYsTUFBQSxzQkNGQSxJQUFBbUgsRUFBWWxOLEVBQVEsSUFDcEJnUCxFQUFpQmhQLEVBQVEsSUFBa0J1TixPQUFBLHNCQUUzQ3JOLEVBQUE2RSxFQUFBakUsT0FBQW1PLHFCQUFBLFNBQUFqSyxHQUNBLE9BQUFrSSxFQUFBbEksRUFBQWdLLHFCQ0xBLElBQUFFLEVBQVVsUCxFQUFRLElBQ2xCaU0sRUFBaUJqTSxFQUFRLElBQ3pCbVAsRUFBZ0JuUCxFQUFRLElBQ3hCNkUsRUFBa0I3RSxFQUFRLElBQzFCcU0sRUFBVXJNLEVBQVEsSUFDbEI0RSxFQUFxQjVFLEVBQVEsSUFDN0JvUCxFQUFBdE8sT0FBQTRKLHlCQUVBeEssRUFBQTZFLEVBQVkvRSxFQUFRLEdBQWdCb1AsRUFBQSxTQUFBcEssRUFBQXZCLEdBR3BDLEdBRkF1QixFQUFBbUssRUFBQW5LLEdBQ0F2QixFQUFBb0IsRUFBQXBCLEdBQUEsR0FDQW1CLEVBQUEsSUFDQSxPQUFBd0ssRUFBQXBLLEVBQUF2QixHQUNHLE1BQUF5QixJQUNILEdBQUFtSCxFQUFBckgsRUFBQXZCLEdBQUEsT0FBQXdJLEdBQUFpRCxFQUFBbkssRUFBQXhFLEtBQUF5RSxFQUFBdkIsR0FBQXVCLEVBQUF2QixzQkNQQSxJQUFBZCxFQUFVM0MsRUFBUSxJQUNsQjZNLEVBQWM3TSxFQUFRLElBQ3RCcVAsRUFBZXJQLEVBQVEsSUFDdkJzUCxFQUFldFAsRUFBUSxJQUN2QnVQLEVBQVV2UCxFQUFRLElBQ2xCRyxFQUFBRCxRQUFBLFNBQUFzUCxFQUFBQyxHQUNBLElBQUFDLEVBQUEsR0FBQUYsRUFDQUcsRUFBQSxHQUFBSCxFQUNBSSxFQUFBLEdBQUFKLEVBQ0FLLEVBQUEsR0FBQUwsRUFDQU0sRUFBQSxHQUFBTixFQUNBTyxFQUFBLEdBQUFQLEdBQUFNLEVBQ0FwTyxFQUFBK04sR0FBQUYsRUFDQSxnQkFBQVMsRUFBQUMsRUFBQWhELEdBUUEsSUFQQSxJQU1BUCxFQUFBd0QsRUFOQWxMLEVBQUFxSyxFQUFBVyxHQUNBM0wsRUFBQXdJLEVBQUE3SCxHQUNBRCxFQUFBcEMsRUFBQXNOLEVBQUFoRCxFQUFBLEdBQ0FqRixFQUFBc0gsRUFBQWpMLEVBQUEyRCxRQUNBTixFQUFBLEVBQ0F5SSxFQUFBVCxFQUFBaE8sRUFBQXNPLEVBQUFoSSxHQUFBMkgsRUFBQWpPLEVBQUFzTyxFQUFBLFFBQUFsTSxFQUVVa0UsRUFBQU4sRUFBZUEsSUFBQSxJQUFBcUksR0FBQXJJLEtBQUFyRCxLQUV6QjZMLEVBQUFuTCxFQURBMkgsRUFBQXJJLEVBQUFxRCxHQUNBQSxFQUFBMUMsR0FDQXdLLEdBQ0EsR0FBQUUsRUFBQVMsRUFBQXpJLEdBQUF3SSxPQUNBLEdBQUFBLEVBQUEsT0FBQVYsR0FDQSxnQkFDQSxjQUFBOUMsRUFDQSxjQUFBaEYsRUFDQSxPQUFBeUksRUFBQTFJLEtBQUFpRixRQUNTLEdBQUFtRCxFQUFBLFNBR1QsT0FBQUMsR0FBQSxFQUFBRixHQUFBQyxJQUFBTSxrQ0N2Q0EsSUFBQTVOLEVBQWF2QyxFQUFRLEdBQ3JCcU0sRUFBVXJNLEVBQVEsSUFDbEJvUSxFQUFrQnBRLEVBQVEsR0FDMUI0QyxFQUFjNUMsRUFBUSxHQUN0QjBDLEVBQWUxQyxFQUFRLElBQ3ZCcVEsRUFBV3JRLEVBQVEsSUFBU3NRLElBQzVCQyxFQUFhdlEsRUFBUSxJQUNyQitPLEVBQWEvTyxFQUFRLElBQ3JCd1EsRUFBcUJ4USxFQUFRLElBQzdCcUMsRUFBVXJDLEVBQVEsSUFDbEJ5USxFQUFVelEsRUFBUSxHQUNsQjBRLEVBQWExUSxFQUFRLElBQ3JCMlEsRUFBZ0IzUSxFQUFRLElBQ3hCNFEsRUFBZTVRLEVBQVEsSUFDdkI2USxFQUFjN1EsRUFBUSxJQUN0QjJFLEVBQWUzRSxFQUFRLEdBQ3ZCdUUsRUFBZXZFLEVBQVEsR0FDdkJxUCxFQUFlclAsRUFBUSxJQUN2Qm1QLEVBQWdCblAsRUFBUSxJQUN4QjZFLEVBQWtCN0UsRUFBUSxJQUMxQmlNLEVBQWlCak0sRUFBUSxJQUN6QjhRLEVBQWM5USxFQUFRLElBQ3RCK1EsRUFBYy9RLEVBQVEsSUFDdEJnUixFQUFZaFIsRUFBUSxJQUNwQmlSLEVBQVlqUixFQUFRLElBQ3BCa1IsRUFBVWxSLEVBQVEsR0FDbEJrTixFQUFZbE4sRUFBUSxJQUNwQm9QLEVBQUE0QixFQUFBak0sRUFDQUQsRUFBQW9NLEVBQUFuTSxFQUNBb00sRUFBQUosRUFBQWhNLEVBQ0FxTSxFQUFBN08sRUFBQXBCLE9BQ0FrUSxFQUFBOU8sRUFBQStPLEtBQ0FDLEVBQUFGLEtBQUFHLFVBRUFDLEVBQUFoQixFQUFBLFdBQ0FpQixFQUFBakIsRUFBQSxlQUNBa0IsRUFBQSxHQUFlakUscUJBQ2ZrRSxFQUFBN0MsRUFBQSxtQkFDQThDLEVBQUE5QyxFQUFBLFdBQ0ErQyxFQUFBL0MsRUFBQSxjQUNBZ0QsRUFBQWpSLE9BQUEsVUFDQWtSLEVBQUEsbUJBQUFaLEtBQUFILEVBQUFsTSxFQUNBa04sRUFBQTFQLEVBQUEwUCxRQUVBQyxHQUFBRCxNQUFBLFlBQUFBLEVBQUEsVUFBQUUsVUFHQUMsRUFBQWhDLEdBQUFHLEVBQUEsV0FDQSxPQUVHLEdBRkhPLEVBQUFoTSxFQUFBLEdBQXNCLEtBQ3RCN0QsSUFBQSxXQUFzQixPQUFBNkQsRUFBQTJELEtBQUEsS0FBdUJwSCxNQUFBLElBQVdxRCxNQUNyREEsSUFDRixTQUFBRixFQUFBN0MsRUFBQTBRLEdBQ0QsSUFBQUMsRUFBQWxELEVBQUEyQyxFQUFBcFEsR0FDQTJRLFVBQUFQLEVBQUFwUSxHQUNBbUQsRUFBQU4sRUFBQTdDLEVBQUEwUSxHQUNBQyxHQUFBOU4sSUFBQXVOLEdBQUFqTixFQUFBaU4sRUFBQXBRLEVBQUEyUSxJQUNDeE4sRUFFRHlOLEVBQUEsU0FBQXRFLEdBQ0EsSUFBQXhELEVBQUFvSCxFQUFBNUQsR0FBQTZDLEVBQUFNLEVBQUEsV0FFQSxPQURBM0csRUFBQStILEdBQUF2RSxFQUNBeEQsR0FHQWdJLEVBQUFULEdBQUEsaUJBQUFaLEVBQUFzQixTQUFBLFNBQUFsTyxHQUNBLHVCQUFBQSxHQUNDLFNBQUFBLEdBQ0QsT0FBQUEsYUFBQTRNLEdBR0F1QixFQUFBLFNBQUFuTyxFQUFBN0MsRUFBQTBRLEdBS0EsT0FKQTdOLElBQUF1TixHQUFBWSxFQUFBYixFQUFBblEsRUFBQTBRLEdBQ0ExTixFQUFBSCxHQUNBN0MsRUFBQWtELEVBQUFsRCxHQUFBLEdBQ0FnRCxFQUFBME4sR0FDQWhHLEVBQUF3RixFQUFBbFEsSUFDQTBRLEVBQUFyUixZQUlBcUwsRUFBQTdILEVBQUFpTixJQUFBak4sRUFBQWlOLEdBQUE5UCxLQUFBNkMsRUFBQWlOLEdBQUE5UCxJQUFBLEdBQ0EwUSxFQUFBdkIsRUFBQXVCLEVBQUEsQ0FBc0JyUixXQUFBaUwsRUFBQSxVQUp0QkksRUFBQTdILEVBQUFpTixJQUFBM00sRUFBQU4sRUFBQWlOLEVBQUF4RixFQUFBLE9BQ0F6SCxFQUFBaU4sR0FBQTlQLElBQUEsR0FJS3lRLEVBQUE1TixFQUFBN0MsRUFBQTBRLElBQ0Z2TixFQUFBTixFQUFBN0MsRUFBQTBRLElBRUhPLEVBQUEsU0FBQXBPLEVBQUFmLEdBQ0FrQixFQUFBSCxHQUtBLElBSkEsSUFHQTdDLEVBSEFvSCxFQUFBNkgsRUFBQW5OLEVBQUEwTCxFQUFBMUwsSUFDQXJELEVBQUEsRUFDQUMsRUFBQTBJLEVBQUFmLE9BRUEzSCxFQUFBRCxHQUFBdVMsRUFBQW5PLEVBQUE3QyxFQUFBb0gsRUFBQTNJLEtBQUFxRCxFQUFBOUIsSUFDQSxPQUFBNkMsR0FLQXFPLEVBQUEsU0FBQWxSLEdBQ0EsSUFBQW1SLEVBQUFuQixFQUFBcFIsS0FBQWtJLEtBQUE5RyxFQUFBa0QsRUFBQWxELEdBQUEsSUFDQSxRQUFBOEcsT0FBQXNKLEdBQUExRixFQUFBd0YsRUFBQWxRLEtBQUEwSyxFQUFBeUYsRUFBQW5RLFFBQ0FtUixJQUFBekcsRUFBQTVELEtBQUE5RyxLQUFBMEssRUFBQXdGLEVBQUFsUSxJQUFBMEssRUFBQTVELEtBQUFnSixJQUFBaEosS0FBQWdKLEdBQUE5UCxLQUFBbVIsSUFFQUMsRUFBQSxTQUFBdk8sRUFBQTdDLEdBR0EsR0FGQTZDLEVBQUEySyxFQUFBM0ssR0FDQTdDLEVBQUFrRCxFQUFBbEQsR0FBQSxHQUNBNkMsSUFBQXVOLElBQUExRixFQUFBd0YsRUFBQWxRLElBQUEwSyxFQUFBeUYsRUFBQW5RLEdBQUEsQ0FDQSxJQUFBMFEsRUFBQWpELEVBQUE1SyxFQUFBN0MsR0FFQSxPQURBMFEsSUFBQWhHLEVBQUF3RixFQUFBbFEsSUFBQTBLLEVBQUE3SCxFQUFBaU4sSUFBQWpOLEVBQUFpTixHQUFBOVAsS0FBQTBRLEVBQUFyUixZQUFBLEdBQ0FxUixJQUVBVyxFQUFBLFNBQUF4TyxHQUtBLElBSkEsSUFHQTdDLEVBSEFzUixFQUFBOUIsRUFBQWhDLEVBQUEzSyxJQUNBMkwsRUFBQSxHQUNBL1AsRUFBQSxFQUVBNlMsRUFBQWpMLE9BQUE1SCxHQUNBaU0sRUFBQXdGLEVBQUFsUSxFQUFBc1IsRUFBQTdTLE9BQUF1QixHQUFBOFAsR0FBQTlQLEdBQUEwTyxHQUFBRixFQUFBMUksS0FBQTlGLEdBQ0csT0FBQXdPLEdBRUgrQyxHQUFBLFNBQUExTyxHQU1BLElBTEEsSUFJQTdDLEVBSkF3UixFQUFBM08sSUFBQXVOLEVBQ0FrQixFQUFBOUIsRUFBQWdDLEVBQUFyQixFQUFBM0MsRUFBQTNLLElBQ0EyTCxFQUFBLEdBQ0EvUCxFQUFBLEVBRUE2UyxFQUFBakwsT0FBQTVILElBQ0FpTSxFQUFBd0YsRUFBQWxRLEVBQUFzUixFQUFBN1MsT0FBQStTLElBQUE5RyxFQUFBMEYsRUFBQXBRLElBQUF3TyxFQUFBMUksS0FBQW9LLEVBQUFsUSxJQUNHLE9BQUF3TyxHQUlINkIsSUFZQXRQLEdBWEEwTyxFQUFBLFdBQ0EsR0FBQTNJLGdCQUFBMkksRUFBQSxNQUFBM00sVUFBQSxnQ0FDQSxJQUFBd0osRUFBQTVMLEVBQUF1RSxVQUFBb0IsT0FBQSxFQUFBcEIsVUFBQSxRQUFBOUMsR0FDQXNQLEVBQUEsU0FBQS9SLEdBQ0FvSCxPQUFBc0osR0FBQXFCLEVBQUE3UyxLQUFBdVIsRUFBQXpRLEdBQ0FnTCxFQUFBNUQsS0FBQWdKLElBQUFwRixFQUFBNUQsS0FBQWdKLEdBQUF4RCxLQUFBeEYsS0FBQWdKLEdBQUF4RCxJQUFBLEdBQ0FtRSxFQUFBM0osS0FBQXdGLEVBQUFoQyxFQUFBLEVBQUE1SyxLQUdBLE9BREErTyxHQUFBOEIsR0FBQUUsRUFBQUwsRUFBQTlELEVBQUEsQ0FBZ0U5RCxjQUFBLEVBQUFrSixJQUFBRCxJQUNoRWIsRUFBQXRFLEtBRUEsZ0NBQ0EsT0FBQXhGLEtBQUErSixLQUdBeEIsRUFBQWpNLEVBQUFnTyxFQUNBN0IsRUFBQW5NLEVBQUE0TixFQUNFM1MsRUFBUSxJQUFnQitFLEVBQUFnTSxFQUFBaE0sRUFBQWlPLEVBQ3hCaFQsRUFBUSxJQUFlK0UsRUFBQThOLEVBQ3pCNUIsRUFBQWxNLEVBQUFtTyxHQUVBOUMsSUFBc0JwUSxFQUFRLEtBQzlCMEMsRUFBQXFQLEVBQUEsdUJBQUFjLEdBQUEsR0FHQW5DLEVBQUEzTCxFQUFBLFNBQUFwRSxHQUNBLE9BQUE0UixFQUFBOUIsRUFBQTlQLE1BSUFpQyxJQUFBUyxFQUFBVCxFQUFBcUIsRUFBQXJCLEVBQUFPLEdBQUE2TyxFQUFBLENBQTBEN1EsT0FBQWlRLElBRTFELFFBQUFrQyxHQUFBLGlIQUdBdk4sTUFBQSxLQUFBd04sR0FBQSxFQUFvQkQsR0FBQXRMLE9BQUF1TCxJQUF1QjlDLEVBQUE2QyxHQUFBQyxPQUUzQyxRQUFBQyxHQUFBdEcsRUFBQXVELEVBQUFyTyxPQUFBcVIsR0FBQSxFQUFvREQsR0FBQXhMLE9BQUF5TCxJQUE2QjlDLEVBQUE2QyxHQUFBQyxPQUVqRjdRLElBQUFXLEVBQUFYLEVBQUFPLEdBQUE2TyxFQUFBLFVBRUEwQixJQUFBLFNBQUEvUixHQUNBLE9BQUEwSyxFQUFBdUYsRUFBQWpRLEdBQUEsSUFDQWlRLEVBQUFqUSxHQUNBaVEsRUFBQWpRLEdBQUF5UCxFQUFBelAsSUFHQWdTLE9BQUEsU0FBQWxKLEdBQ0EsSUFBQWdJLEVBQUFoSSxHQUFBLE1BQUFoRyxVQUFBZ0csRUFBQSxxQkFDQSxRQUFBOUksS0FBQWlRLEVBQUEsR0FBQUEsRUFBQWpRLEtBQUE4SSxFQUFBLE9BQUE5SSxHQUVBaVMsVUFBQSxXQUEwQjFCLEdBQUEsR0FDMUIyQixVQUFBLFdBQTBCM0IsR0FBQSxLQUcxQnRQLElBQUFXLEVBQUFYLEVBQUFPLEdBQUE2TyxFQUFBLFVBRUF0USxPQS9GQSxTQUFBOEMsRUFBQWYsR0FDQSxZQUFBSyxJQUFBTCxFQUFBcU4sRUFBQXRNLEdBQUFvTyxFQUFBOUIsRUFBQXRNLEdBQUFmLElBZ0dBMUMsZUFBQTRSLEVBRUE5SCxpQkFBQStILEVBRUFsSSx5QkFBQXFJLEVBRUE5RCxvQkFBQStELEVBRUF6SSxzQkFBQTJJLEtBS0EsSUFBQVksR0FBQXZELEVBQUEsV0FBOENVLEVBQUFsTSxFQUFBLEtBRTlDbkMsSUFBQVcsRUFBQVgsRUFBQU8sRUFBQTJRLEdBQUEsVUFDQXZKLHNCQUFBLFNBQUEvRixHQUNBLE9BQUF5TSxFQUFBbE0sRUFBQXNLLEVBQUE3SyxPQUtBNk0sR0FBQXpPLElBQUFXLEVBQUFYLEVBQUFPLElBQUE2TyxHQUFBekIsRUFBQSxXQUNBLElBQUFoTixFQUFBNk4sSUFJQSxnQkFBQUcsRUFBQSxDQUFBaE8sS0FBMkQsTUFBM0RnTyxFQUFBLENBQW9EN00sRUFBQW5CLEtBQWUsTUFBQWdPLEVBQUF6USxPQUFBeUMsT0FDbEUsUUFDRGlPLFVBQUEsU0FBQWhOLEdBSUEsSUFIQSxJQUVBdVAsRUFBQUMsRUFGQW5JLEVBQUEsQ0FBQXJILEdBQ0FwRSxFQUFBLEVBRUF3RyxVQUFBb0IsT0FBQTVILEdBQUF5TCxFQUFBcEUsS0FBQWIsVUFBQXhHLE1BRUEsR0FEQTRULEVBQUFELEVBQUFsSSxFQUFBLElBQ0F0SCxFQUFBd1AsU0FBQWpRLElBQUFVLEtBQUFpTyxFQUFBak8sR0FNQSxPQUxBcU0sRUFBQWtELE9BQUEsU0FBQXBTLEVBQUFOLEdBRUEsR0FEQSxtQkFBQTJTLElBQUEzUyxFQUFBMlMsRUFBQXpULEtBQUFrSSxLQUFBOUcsRUFBQU4sS0FDQW9SLEVBQUFwUixHQUFBLE9BQUFBLElBRUF3SyxFQUFBLEdBQUFrSSxFQUNBeEMsRUFBQXhILE1BQUFzSCxFQUFBeEYsTUFLQXVGLEVBQUEsVUFBQU0sSUFBb0MxUixFQUFRLEdBQVJBLENBQWlCb1IsRUFBQSxVQUFBTSxFQUFBTixFQUFBLFVBQUF0QyxTQUVyRDBCLEVBQUFZLEVBQUEsVUFFQVosRUFBQXBNLEtBQUEsV0FFQW9NLEVBQUFqTyxFQUFBK08sS0FBQSw0QkNwUEEsSUFBQTNNLEVBQWUzRSxFQUFRLEdBQ3ZCaVUsRUFBVWpVLEVBQVEsSUFDbEJtTixFQUFrQm5OLEVBQVEsSUFDMUJrVSxFQUFlbFUsRUFBUSxHQUFSQSxDQUF1QixZQUN0Q21VLEVBQUEsYUFJQUMsRUFBQSxXQUVBLElBSUFDLEVBSkFDLEVBQWV0VSxFQUFRLEdBQVJBLENBQXVCLFVBQ3RDSSxFQUFBK00sRUFBQW5GLE9BY0EsSUFWQXNNLEVBQUFDLE1BQUFDLFFBQUEsT0FDRXhVLEVBQVEsSUFBU3lVLFlBQUFILEdBQ25CQSxFQUFBSSxJQUFBLGVBR0FMLEVBQUFDLEVBQUFLLGNBQUFoRyxVQUNBaUcsT0FDQVAsRUFBQVEsTUFBQUMsdUNBQ0FULEVBQUFVLFFBQ0FYLEVBQUFDLEVBQUFsUixFQUNBL0MsWUFBQWdVLEVBQUEsVUFBQWpILEVBQUEvTSxJQUNBLE9BQUFnVSxLQUdBalUsRUFBQUQsUUFBQVksT0FBQVksUUFBQSxTQUFBc0QsRUFBQWdRLEdBQ0EsSUFBQTdFLEVBUUEsT0FQQSxPQUFBbkwsR0FDQW1QLEVBQUEsVUFBQXhQLEVBQUFLLEdBQ0FtTCxFQUFBLElBQUFnRSxFQUNBQSxFQUFBLGVBRUFoRSxFQUFBK0QsR0FBQWxQLEdBQ0dtTCxFQUFBaUUsU0FDSHRRLElBQUFrUixFQUFBN0UsRUFBQThELEVBQUE5RCxFQUFBNkUscUJDdkNBLElBQUFwUyxFQUFjNUMsRUFBUSxHQUV0QjRDLElBQUFXLEVBQUFYLEVBQUFPLEdBQWlDbkQsRUFBUSxHQUFnQixVQUFjZSxlQUFpQmYsRUFBUSxHQUFjK0Usa0NDQzlHNUUsRUFBQUQsUUFBbUJGLEVBQVEsa0NDRzNCLElBQUFpVixFQUFjalYsRUFBUSxJQUN0QmtWLEVBQUEsQ0FDQUMsbUJBQUEsRUFDQUMsYUFBQSxFQUNBQyxjQUFBLEVBQ0FDLGNBQUEsRUFDQUMsYUFBQSxFQUNBQyxpQkFBQSxFQUNBQywwQkFBQSxFQUNBQywwQkFBQSxFQUNBQyxRQUFBLEVBQ0FDLFdBQUEsRUFDQS9TLE1BQUEsR0FHQWdULEVBQUEsQ0FDQWxWLE1BQUEsRUFDQXFILFFBQUEsRUFDQWhHLFdBQUEsRUFDQThULFFBQUEsRUFDQXhILFFBQUEsRUFDQTFILFdBQUEsRUFDQW1QLE9BQUEsR0FXQUMsRUFBQSxDQUNBQyxVQUFBLEVBQ0FDLFNBQUEsRUFDQVosY0FBQSxFQUNBQyxhQUFBLEVBQ0FLLFdBQUEsRUFDQS9TLE1BQUEsR0FHQXNULEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFwQixFQUFBcUIsT0FBQUQsR0FDQUwsRUFFQUcsRUFBQUUsRUFBQSxXQUFBbkIsRUFOQWlCLEVBQUFsQixFQUFBc0IsWUFsQkEsQ0FDQU4sVUFBQSxFQUNBTyxRQUFBLEVBQ0FsQixjQUFBLEVBQ0FDLGFBQUEsRUFDQUssV0FBQSxHQXNCQSxJQUFBN1UsRUFBQUQsT0FBQUMsZUFDQWtPLEVBQUFuTyxPQUFBbU8sb0JBQ0ExRSxFQUFBekosT0FBQXlKLHNCQUNBRyxFQUFBNUosT0FBQTRKLHlCQUNBbkUsRUFBQXpGLE9BQUF5RixlQUNBa1EsRUFBQTNWLE9BQUFrQixVQXVDQTdCLEVBQUFELFFBckNBLFNBQUF3VyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLG9CQUFBRCxFQUFBLENBR0EsR0FBQUgsRUFBQSxDQUNBLElBQUFLLEVBQUF2USxFQUFBcVEsR0FDQUUsT0FBQUwsR0FDQUMsRUFBQUMsRUFBQUcsRUFBQUQsR0FJQSxJQUFBOU4sRUFBQWtHLEVBQUEySCxHQUVBck0sSUFDQXhCLElBQUF3RSxPQUFBaEQsRUFBQXFNLEtBTUEsSUFIQSxJQUFBRyxFQUFBWCxFQUFBTyxHQUNBSyxFQUFBWixFQUFBUSxHQUVBeFcsRUFBQSxFQUF1QkEsRUFBQTJJLEVBQUFmLFNBQWlCNUgsRUFBQSxDQUN4QyxJQUFBdUIsRUFBQW9ILEVBQUEzSSxHQUNBLEtBQUF5VixFQUFBbFUsSUFBQWtWLEtBQUFsVixJQUFBcVYsS0FBQXJWLElBQUFvVixLQUFBcFYsSUFBQSxDQUNBLElBQUFzVixFQUFBdk0sRUFBQWtNLEVBQUFqVixHQUNBLElBRUFaLEVBQUE0VixFQUFBaFYsRUFBQXNWLEdBQ2lCLE1BQUEvUixNQUlqQixPQUFBeVIsRUFHQSxPQUFBQSxrQ0NuR0EsU0FBQXBVLEVBQUFwQyxHQUFBLElBR0ErVyxFQUhBQyxFQUFBblgsRUFBQSxJQU1Ba1gsRUFEQSxvQkFBQTdTLEtBQ0FBLEtBQ0Msb0JBQUFGLE9BQ0RBLFlBQ0MsSUFBQTVCLEVBQ0RBLEVBRUFwQyxFQUtBLElBQUFnUSxFQUFhclAsT0FBQXFXLEVBQUEsRUFBQXJXLENBQVFvVyxHQUNOL1IsRUFBQTs7Ozs7RUNWZixJQUFBb0YsRUFBQXpKLE9BQUF5SixzQkFDQXRJLEVBQUFuQixPQUFBa0IsVUFBQUMsZUFDQW1WLEVBQUF0VyxPQUFBa0IsVUFBQTBMLHFCQUVBLFNBQUEyQixFQUFBM0MsR0FDQSxHQUFBQSxRQUNBLFVBQUFqSSxVQUFBLHlEQUdBLE9BQUEzRCxPQUFBNEwsR0ErQ0F2TSxFQUFBRCxRQTVDQSxXQUNBLElBQ0EsSUFBQVksT0FBQXVXLE9BQ0EsU0FNQSxJQUFBQyxFQUFBLElBQUExTyxPQUFBLE9BRUEsR0FEQTBPLEVBQUEsUUFDQSxNQUFBeFcsT0FBQW1PLG9CQUFBcUksR0FBQSxHQUNBLFNBS0EsSUFEQSxJQUFBQyxFQUFBLEdBQ0FuWCxFQUFBLEVBQWlCQSxFQUFBLEdBQVFBLElBQ3pCbVgsRUFBQSxJQUFBM08sT0FBQTRPLGFBQUFwWCxNQUtBLGtCQUhBVSxPQUFBbU8sb0JBQUFzSSxHQUFBL0wsSUFBQSxTQUFBM0osR0FDQSxPQUFBMFYsRUFBQTFWLEtBRUFtRSxLQUFBLElBQ0EsU0FJQSxJQUFBeVIsRUFBQSxHQUlBLE1BSEEsdUJBQUExUixNQUFBLElBQUFvRCxRQUFBLFNBQUF1TyxHQUNBRCxFQUFBQyxPQUdBLHlCQURBNVcsT0FBQWlJLEtBQUFqSSxPQUFBdVcsT0FBQSxHQUFrQ0ksSUFBQXpSLEtBQUEsSUFNaEMsTUFBQXlJLEdBRUYsVUFJQWtKLEdBQUE3VyxPQUFBdVcsT0FBQSxTQUFBelQsRUFBQWQsR0FLQSxJQUpBLElBQUE4VSxFQUVBQyxFQURBQyxFQUFBekksRUFBQXpMLEdBR0F6QixFQUFBLEVBQWdCQSxFQUFBeUUsVUFBQW9CLE9BQXNCN0YsSUFBQSxDQUd0QyxRQUFBUixLQUZBaVcsRUFBQTlXLE9BQUE4RixVQUFBekUsSUFHQUYsRUFBQTFCLEtBQUFxWCxFQUFBalcsS0FDQW1XLEVBQUFuVyxHQUFBaVcsRUFBQWpXLElBSUEsR0FBQTRJLEVBQUEsQ0FDQXNOLEVBQUF0TixFQUFBcU4sR0FDQSxRQUFBeFgsRUFBQSxFQUFrQkEsRUFBQXlYLEVBQUE3UCxPQUFvQjVILElBQ3RDZ1gsRUFBQTdXLEtBQUFxWCxFQUFBQyxFQUFBelgsTUFDQTBYLEVBQUFELEVBQUF6WCxJQUFBd1gsRUFBQUMsRUFBQXpYLE1BTUEsT0FBQTBYLGtCQ3hGQSxJQUFBQyxFQUdBQSxFQUFBLFdBQ0EsT0FBQXRQLEtBREEsR0FJQSxJQUVBc1AsS0FBQSxJQUFBaFUsU0FBQSxpQkFDQyxNQUFBbUIsR0FFRCxpQkFBQWYsU0FBQTRULEVBQUE1VCxRQU9BaEUsRUFBQUQsUUFBQTZYLG1CQ25CQTVYLEVBQUFELFNBQWtCRixFQUFRLEtBQXNCQSxFQUFRLEdBQVJBLENBQWtCLFdBQ2xFLE9BQXVHLEdBQXZHYyxPQUFBQyxlQUErQmYsRUFBUSxHQUFSQSxDQUF1QixZQUFnQmlCLElBQUEsV0FBbUIsWUFBY3lELHFCQ0R2RyxJQUFBSSxFQUFTOUUsRUFBUSxHQUNqQjJFLEVBQWUzRSxFQUFRLEdBQ3ZCZ1ksRUFBY2hZLEVBQVEsSUFFdEJHLEVBQUFELFFBQWlCRixFQUFRLEdBQWdCYyxPQUFBK0osaUJBQUEsU0FBQTdGLEVBQUFnUSxHQUN6Q3JRLEVBQUFLLEdBS0EsSUFKQSxJQUdBdkIsRUFIQXNGLEVBQUFpUCxFQUFBaEQsR0FDQWhOLEVBQUFlLEVBQUFmLE9BQ0E1SCxFQUFBLEVBRUE0SCxFQUFBNUgsR0FBQTBFLEVBQUFDLEVBQUFDLEVBQUF2QixFQUFBc0YsRUFBQTNJLEtBQUE0VSxFQUFBdlIsSUFDQSxPQUFBdUIsb0JDWEEsSUFBQXFILEVBQVVyTSxFQUFRLElBQ2xCbVAsRUFBZ0JuUCxFQUFRLElBQ3hCaVksRUFBbUJqWSxFQUFRLEdBQVJBLEVBQTJCLEdBQzlDa1UsRUFBZWxVLEVBQVEsR0FBUkEsQ0FBdUIsWUFFdENHLEVBQUFELFFBQUEsU0FBQTRCLEVBQUFtUixHQUNBLElBR0F0UixFQUhBcUQsRUFBQW1LLEVBQUFyTixHQUNBMUIsRUFBQSxFQUNBK1AsRUFBQSxHQUVBLElBQUF4TyxLQUFBcUQsRUFBQXJELEdBQUF1UyxHQUFBN0gsRUFBQXJILEVBQUFyRCxJQUFBd08sRUFBQTFJLEtBQUE5RixHQUVBLEtBQUFzUixFQUFBakwsT0FBQTVILEdBQUFpTSxFQUFBckgsRUFBQXJELEVBQUFzUixFQUFBN1MsU0FDQTZYLEVBQUE5SCxFQUFBeE8sSUFBQXdPLEVBQUExSSxLQUFBOUYsSUFFQSxPQUFBd08sa0JDZEEsSUFBQStILEVBQUE5VCxLQUFBOFQsS0FDQUMsRUFBQS9ULEtBQUErVCxNQUNBaFksRUFBQUQsUUFBQSxTQUFBc0UsR0FDQSxPQUFBNFQsTUFBQTVULE1BQUEsR0FBQUEsRUFBQSxFQUFBMlQsRUFBQUQsR0FBQTFULHFCQ0hBLElBQUFpSixFQUFVek4sRUFBUSxJQUNsQkcsRUFBQUQsUUFBQThLLE1BQUE2RixTQUFBLFNBQUE1RixHQUNBLGVBQUF3QyxFQUFBeEMscUJDSEEvSyxFQUFBNkUsRUFBWS9FLEVBQVEsb0JDQXBCLElBQUF1QyxFQUFhdkMsRUFBUSxHQUNyQndDLEVBQVd4QyxFQUFRLElBQ25CcVksRUFBY3JZLEVBQVEsSUFDdEIwUSxFQUFhMVEsRUFBUSxJQUNyQmUsRUFBcUJmLEVBQVEsR0FBYytFLEVBQzNDNUUsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLElBQUF5USxFQUFBNU8sRUFBQXJCLFNBQUFxQixFQUFBckIsT0FBQWtYLEVBQUEsR0FBMEQ5VixFQUFBcEIsUUFBQSxJQUMxRCxLQUFBUixFQUFBMlgsT0FBQSxJQUFBM1gsS0FBQXlRLEdBQUFyUSxFQUFBcVEsRUFBQXpRLEVBQUEsQ0FBa0ZVLE1BQUFxUCxFQUFBM0wsRUFBQXBFLHVCQ1BsRixJQUFBZ08sRUFBZTNPLEVBQVEsR0FBVzJPLFNBQ2xDeE8sRUFBQUQsUUFBQXlPLEtBQUE0Siw4Q0NBQSxJQUFBQyxFQUF1QnhZLEVBQVEsSUFDL0J5WSxFQUFXelksRUFBUSxJQUNuQjBZLEVBQWdCMVksRUFBUSxJQUN4Qm1QLEVBQWdCblAsRUFBUSxJQU14QkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBUkEsQ0FBd0JnTCxNQUFBLGlCQUFBMk4sRUFBQUMsR0FDekNuUSxLQUFBb1EsR0FBQTFKLEVBQUF3SixHQUNBbFEsS0FBQWUsR0FBQSxFQUNBZixLQUFBK0osR0FBQW9HLEdBRUMsV0FDRCxJQUFBNVQsRUFBQXlELEtBQUFvUSxHQUNBRCxFQUFBblEsS0FBQStKLEdBQ0E5SyxFQUFBZSxLQUFBZSxLQUNBLE9BQUF4RSxHQUFBMEMsR0FBQTFDLEVBQUFnRCxRQUNBUyxLQUFBb1EsUUFBQS9VLEVBQ0EyVSxFQUFBLElBRUFBLEVBQUEsVUFBQUcsRUFBQWxSLEVBQ0EsVUFBQWtSLEVBQUE1VCxFQUFBMEMsR0FDQSxDQUFBQSxFQUFBMUMsRUFBQTBDLE1BQ0MsVUFHRGdSLEVBQUFJLFVBQUFKLEVBQUExTixNQUVBd04sRUFBQSxRQUNBQSxFQUFBLFVBQ0FBLEVBQUEseUNDL0JBLElBQUFPLEVBQWMvWSxFQUFRLElBQ3RCZ1osRUFBQSxHQUNBQSxFQUFLaFosRUFBUSxFQUFSQSxDQUFnQixvQkFDckJnWixFQUFBLGtCQUNFaFosRUFBUSxHQUFSQSxDQUFxQmMsT0FBQWtCLFVBQUEsc0JBQ3ZCLGlCQUFBK1csRUFBQXRRLE1BQUEsTUFDRyxvQkNSSHpJLEVBQVEsR0FBUkEsQ0FBdUIsa0NDQXZCLElBQUE0QyxFQUFjNUMsRUFBUSxHQUV0QjRDLElBQUFXLEVBQUEsVUFBOEI3QixPQUFTMUIsRUFBUSx1QkNEL0MsSUFBQTRDLEVBQWM1QyxFQUFRLEdBQ3RCNEMsSUFBQVcsRUFBQSxVQUE4QjBWLGVBQWlCalosRUFBUSxLQUFjcVQsdUJDRnJFLElBYUE2RixFQUFBQyxFQUFBQyxFQWJBelcsRUFBVTNDLEVBQVEsSUFDbEJxWixFQUFhclosRUFBUSxJQUNyQnNaLEVBQVd0WixFQUFRLElBQ25CdVosRUFBVXZaLEVBQVEsSUFDbEJ1QyxFQUFhdkMsRUFBUSxHQUNyQndaLEVBQUFqWCxFQUFBaVgsUUFDQUMsRUFBQWxYLEVBQUFtWCxhQUNBQyxFQUFBcFgsRUFBQXFYLGVBQ0FDLEVBQUF0WCxFQUFBc1gsZUFDQUMsRUFBQXZYLEVBQUF1WCxTQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FHQUMsRUFBQSxXQUNBLElBQUE1TSxHQUFBNUUsS0FFQSxHQUFBdVIsRUFBQS9YLGVBQUFvTCxHQUFBLENBQ0EsSUFBQUwsRUFBQWdOLEVBQUEzTSxVQUNBMk0sRUFBQTNNLEdBQ0FMLE1BR0F6RixFQUFBLFNBQUEyUyxHQUNBRCxFQUFBMVosS0FBQTJaLEVBQUFDLE9BR0FWLEdBQUFFLElBQ0FGLEVBQUEsU0FBQXpNLEdBR0EsSUFGQSxJQUFBbkIsRUFBQSxHQUNBekwsRUFBQSxFQUNBd0csVUFBQW9CLE9BQUE1SCxHQUFBeUwsRUFBQXBFLEtBQUFiLFVBQUF4RyxNQU1BLE9BTEE0WixJQUFBRCxHQUFBLFdBRUFWLEVBQUEsbUJBQUFyTSxJQUFBakosU0FBQWlKLEdBQUFuQixJQUVBcU4sRUFBQWEsR0FDQUEsR0FFQUosRUFBQSxTQUFBdE0sVUFDQTJNLEVBQUEzTSxJQUdzQixXQUFoQnJOLEVBQVEsR0FBUkEsQ0FBZ0J3WixHQUN0Qk4sRUFBQSxTQUFBN0wsR0FDQW1NLEVBQUFZLFNBQUF6WCxFQUFBc1gsRUFBQTVNLEVBQUEsS0FHR3lNLEtBQUFPLElBQ0huQixFQUFBLFNBQUE3TCxHQUNBeU0sRUFBQU8sSUFBQTFYLEVBQUFzWCxFQUFBNU0sRUFBQSxLQUdHd00sR0FFSFQsR0FEQUQsRUFBQSxJQUFBVSxHQUNBUyxNQUNBbkIsRUFBQW9CLE1BQUFDLFVBQUFqVCxFQUNBMlIsRUFBQXZXLEVBQUF5VyxFQUFBcUIsWUFBQXJCLEVBQUEsSUFHRzdXLEVBQUFtWSxrQkFBQSxtQkFBQUQsY0FBQWxZLEVBQUFvWSxlQUNIekIsRUFBQSxTQUFBN0wsR0FDQTlLLEVBQUFrWSxZQUFBcE4sRUFBQSxTQUVBOUssRUFBQW1ZLGlCQUFBLFVBQUFuVCxHQUFBLElBR0EyUixFQXZEQSx1QkFzREdLLEVBQUEsVUFDSCxTQUFBbE0sR0FDQWlNLEVBQUE3RSxZQUFBOEUsRUFBQSx5Q0FDQUQsRUFBQXNCLFlBQUFuUyxNQUNBd1IsRUFBQTFaLEtBQUE4TSxLQUtBLFNBQUFBLEdBQ0F3TixXQUFBbFksRUFBQXNYLEVBQUE1TSxFQUFBLFFBSUFsTixFQUFBRCxRQUFBLENBQ0FtVCxJQUFBb0csRUFDQXFCLE1BQUFuQixrQkNqRkF4WixFQUFBRCxRQUFBLFNBQUE4TSxFQUFBbkIsRUFBQW9CLEdBQ0EsSUFBQThOLE9BQUFqWCxJQUFBbUosRUFDQSxPQUFBcEIsRUFBQTdELFFBQ0EsY0FBQStTLEVBQUEvTixJQUNBQSxFQUFBek0sS0FBQTBNLEdBQ0EsY0FBQThOLEVBQUEvTixFQUFBbkIsRUFBQSxJQUNBbUIsRUFBQXpNLEtBQUEwTSxFQUFBcEIsRUFBQSxJQUNBLGNBQUFrUCxFQUFBL04sRUFBQW5CLEVBQUEsR0FBQUEsRUFBQSxJQUNBbUIsRUFBQXpNLEtBQUEwTSxFQUFBcEIsRUFBQSxHQUFBQSxFQUFBLElBQ0EsY0FBQWtQLEVBQUEvTixFQUFBbkIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQW1CLEVBQUF6TSxLQUFBME0sRUFBQXBCLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0EsY0FBQWtQLEVBQUEvTixFQUFBbkIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBbUIsRUFBQXpNLEtBQUEwTSxFQUFBcEIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNHLE9BQUFtQixFQUFBakQsTUFBQWtELEVBQUFwQixrQ0NaSCxJQUFBa0IsRUFBZ0IvTSxFQUFRLElBRXhCLFNBQUFnYixFQUFBQyxHQUNBLElBQUFDLEVBQUFDLEVBQ0ExUyxLQUFBMlMsUUFBQSxJQUFBSCxFQUFBLFNBQUFJLEVBQUFDLEdBQ0EsUUFBQXhYLElBQUFvWCxRQUFBcFgsSUFBQXFYLEVBQUEsTUFBQTFXLFVBQUEsMkJBQ0F5VyxFQUFBRyxFQUNBRixFQUFBRyxJQUVBN1MsS0FBQXlTLFFBQUFuTyxFQUFBbU8sR0FDQXpTLEtBQUEwUyxPQUFBcE8sRUFBQW9PLEdBR0FoYixFQUFBRCxRQUFBNkUsRUFBQSxTQUFBa1csR0FDQSxXQUFBRCxFQUFBQyxrQ0NkQSxJQUFBdFcsRUFBZTNFLEVBQVEsR0FDdkJ1YixFQUFnQnZiLEVBQVEsS0FDeEJ3YixFQUFpQnhiLEVBQVEsS0FHekJBLEVBQVEsSUFBUkEsQ0FBdUIsb0JBQUE4TSxFQUFBMk8sRUFBQUMsRUFBQUMsR0FDdkIsT0FHQSxTQUFBQyxHQUNBLElBQUE1VyxFQUFBOEgsRUFBQXJFLE1BQ0F1RSxFQUFBbEosTUFBQThYLE9BQUE5WCxFQUFBOFgsRUFBQUgsR0FDQSxZQUFBM1gsSUFBQWtKLElBQUF6TSxLQUFBcWIsRUFBQTVXLEdBQUEsSUFBQTZXLE9BQUFELEdBQUFILEdBQUE3UyxPQUFBNUQsS0FJQSxTQUFBNFcsR0FDQSxJQUFBMUwsRUFBQXlMLEVBQUFELEVBQUFFLEVBQUFuVCxNQUNBLEdBQUF5SCxFQUFBNEwsS0FBQSxPQUFBNUwsRUFBQTdPLE1BQ0EsSUFBQTBhLEVBQUFwWCxFQUFBaVgsR0FDQXJZLEVBQUFxRixPQUFBSCxNQUNBdVQsRUFBQUQsRUFBQUUsVUFDQVYsRUFBQVMsRUFBQSxLQUFBRCxFQUFBRSxVQUFBLEdBQ0EsSUFBQTlMLEVBQUFxTCxFQUFBTyxFQUFBeFksR0FFQSxPQURBZ1ksRUFBQVEsRUFBQUUsVUFBQUQsS0FBQUQsRUFBQUUsVUFBQUQsR0FDQSxPQUFBN0wsR0FBQSxFQUFBQSxFQUFBekksd0NDekJBLElBYUF3VSxFQUNBQyxFQWRBQyxFQUFrQnBjLEVBQVEsS0FFMUJxYyxFQUFBUixPQUFBN1osVUFBQWtLLEtBSUFvUSxFQUFBMVQsT0FBQTVHLFVBQUErSixRQUVBd1EsRUFBQUYsRUFJQUcsR0FDQU4sRUFBQSxJQUNBQyxFQUFBLE1BQ0FFLEVBQUE5YixLQUFBMmIsRUFBQSxLQUNBRyxFQUFBOWIsS0FBQTRiLEVBQUEsS0FDQSxJQUFBRCxFQUFBLGVBQUFDLEVBQUEsV0FJQU0sT0FBQTNZLElBQUEsT0FBQW9JLEtBQUEsUUFFQXNRLEdBQUFDLEtBR0FGLEVBQUEsU0FBQUcsR0FDQSxJQUNBVCxFQUFBVSxFQUFBQyxFQUFBeGMsRUFEQXljLEVBQUFwVSxLQXdCQSxPQXJCQWdVLElBQ0FFLEVBQUEsSUFBQWQsT0FBQSxJQUFBZ0IsRUFBQS9aLE9BQUEsV0FBQXNaLEVBQUE3YixLQUFBc2MsS0FFQUwsSUFBQVAsRUFBQVksRUFBQSxXQUVBRCxFQUFBUCxFQUFBOWIsS0FBQXNjLEVBQUFILEdBRUFGLEdBQUFJLElBQ0FDLEVBQUEsVUFBQUEsRUFBQXRhLE9BQUFxYSxFQUFBbFYsTUFBQWtWLEVBQUEsR0FBQTVVLE9BQUFpVSxHQUVBUSxHQUFBRyxLQUFBNVUsT0FBQSxHQUlBc1UsRUFBQS9iLEtBQUFxYyxFQUFBLEdBQUFELEVBQUEsV0FDQSxJQUFBdmMsRUFBQSxFQUFtQkEsRUFBQXdHLFVBQUFvQixPQUFBLEVBQTBCNUgsU0FDN0MwRCxJQUFBOEMsVUFBQXhHLEtBQUF3YyxFQUFBeGMsUUFBQTBELEtBS0E4WSxJQUlBemMsRUFBQUQsUUFBQXFjLG1CQ3hEQSxJQUFBM1osRUFBYzVDLEVBQVEsR0FFdEI0QyxJQUFBYSxFQUFBLFlBQWdDN0IsS0FBTzVCLEVBQVEscUNDSy9DRyxFQUFBRCxRQUFBLFNBQUE0YyxHQUNBLElBQUFDLEVBQUEsR0FtREEsT0FqREFBLEVBQUFsWCxTQUFBLFdBQ0EsT0FBQTRDLEtBQUErQyxJQUFBLFNBQUF3UixHQUNBLElBQUFDLEVBa0RBLFNBQUFELEVBQUFGLEdBQ0EsSUFBQUcsRUFBQUQsRUFBQSxPQUVBRSxFQUFBRixFQUFBLEdBRUEsSUFBQUUsRUFDQSxPQUFBRCxFQUdBLEdBQUFILEdBQUEsbUJBQUFLLEtBQUEsQ0FDQSxJQUFBQyxHQVdBQyxFQVhBSCxFQWFBSSxFQUFBSCxLQUFBSSxTQUFBQyxtQkFBQWxNLEtBQUFFLFVBQUE2TCxNQUNBbEQsRUFBQSwrREFBbUU1TSxPQUFBK1AsR0FDbkUsT0FBQS9QLE9BQUE0TSxFQUFBLFFBZEFzRCxFQUFBUCxFQUFBUSxRQUFBbFMsSUFBQSxTQUFBMUksR0FDQSx1QkFBQXlLLE9BQUEyUCxFQUFBUyxZQUFBcFEsT0FBQXpLLEVBQUEsU0FFQSxPQUFBbWEsR0FBQTFQLE9BQUFrUSxHQUFBbFEsT0FBQSxDQUFBNlAsSUFBQXBYLEtBQUEsTUFPQSxJQUFBcVgsRUFFQUMsRUFDQW5ELEVBUEEsT0FBQThDLEdBQUFqWCxLQUFBLE1BbkVBNFgsQ0FBQVosRUFBQUYsR0FFQSxPQUFBRSxFQUFBLEdBQ0EsVUFBQXpQLE9BQUF5UCxFQUFBLFFBQTJDelAsT0FBQTBQLEVBQUEsS0FHM0NBLElBQ0tqWCxLQUFBLEtBS0wrVyxFQUFBM2MsRUFBQSxTQUFBRSxFQUFBdWQsR0FDQSxpQkFBQXZkLElBRUFBLEVBQUEsT0FBQUEsRUFBQSxNQUtBLElBRkEsSUFBQXdkLEVBQUEsR0FFQTFkLEVBQUEsRUFBbUJBLEVBQUFxSSxLQUFBVCxPQUFpQjVILElBQUEsQ0FFcEMsSUFBQWlOLEVBQUE1RSxLQUFBckksR0FBQSxHQUVBLE1BQUFpTixJQUNBeVEsRUFBQXpRLElBQUEsR0FJQSxRQUFBN0QsRUFBQSxFQUFvQkEsRUFBQWxKLEVBQUEwSCxPQUFxQndCLElBQUEsQ0FDekMsSUFBQXdULEVBQUExYyxFQUFBa0osR0FLQSxNQUFBd1QsRUFBQSxJQUFBYyxFQUFBZCxFQUFBLE1BQ0FhLElBQUFiLEVBQUEsR0FDQUEsRUFBQSxHQUFBYSxFQUNTQSxJQUNUYixFQUFBLE9BQUF6UCxPQUFBeVAsRUFBQSxjQUFBelAsT0FBQXNRLEVBQUEsTUFHQWQsRUFBQXRWLEtBQUF1VixNQUtBRCxvQkN2REEsSUFFQS9QLEVBQ0ErUSxFQUhBQyxFQUFBLEdBV0FDLEdBVEFqUixFQVNBLFdBTUEsT0FBQTdJLFFBQUF3SyxtQkFBQXVQLE1BQUEvWixPQUFBZ2EsTUFaQSxXQUVBLFlBREEsSUFBQUosTUFBQS9RLEVBQUFqRCxNQUFBdEIsS0FBQTdCLFlBQ0FtWCxJQW9CQUssRUFBQSxTQUFBcFIsR0FDQSxJQUFBK1EsRUFBQSxHQUVBLGdCQUFBbmEsRUFBQXlhLEdBTUEsc0JBQUF6YSxFQUNBLE9BQUFBLElBRUEsWUFBQW1hLEVBQUFuYSxHQUFBLENBQ0EsSUFBQTBhLEVBcEJBLFNBQUExYSxFQUFBeWEsR0FDQSxPQUFBQSxFQUNBQSxFQUFBRSxjQUFBM2EsR0FFQStLLFNBQUE0UCxjQUFBM2EsSUFnQkFyRCxLQUFBa0ksS0FBQTdFLEVBQUF5YSxHQUVBLEdBQUFsYSxPQUFBcWEsbUJBQUFGLGFBQUFuYSxPQUFBcWEsa0JBQ0EsSUFHQUYsSUFBQUcsZ0JBQUFDLEtBQ0ssTUFBQXhaLEdBQ0xvWixFQUFBLEtBR0FQLEVBQUFuYSxHQUFBMGEsRUFFQSxPQUFBUCxFQUFBbmEsSUExQkEsR0E4QkErYSxFQUFBLEtBQ0FDLEVBQUEsRUFDQUMsRUFBQSxHQUVBQyxFQUFjOWUsRUFBUSxLQXFEdEIsU0FBQStlLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQTdlLEVBQUEsRUFBZ0JBLEVBQUE0ZSxFQUFBaFgsT0FBbUI1SCxJQUFBLENBQ25DLElBQUE0YyxFQUFBZ0MsRUFBQTVlLEdBQ0E4ZSxFQUFBbEIsRUFBQWhCLEVBQUEzUCxJQUVBLEdBQUE2UixFQUFBLENBQ0FBLEVBQUFDLE9BRUEsUUFBQTVMLEVBQUEsRUFBaUJBLEVBQUEyTCxFQUFBRSxNQUFBcFgsT0FBMkJ1TCxJQUM1QzJMLEVBQUFFLE1BQUE3TCxHQUFBeUosRUFBQW9DLE1BQUE3TCxJQUdBLEtBQVFBLEVBQUF5SixFQUFBb0MsTUFBQXBYLE9BQXVCdUwsSUFDL0IyTCxFQUFBRSxNQUFBM1gsS0FBQTRYLEVBQUFyQyxFQUFBb0MsTUFBQTdMLEdBQUEwTCxRQUVHLENBQ0gsSUFBQUcsRUFBQSxHQUVBLElBQUE3TCxFQUFBLEVBQWlCQSxFQUFBeUosRUFBQW9DLE1BQUFwWCxPQUF1QnVMLElBQ3hDNkwsRUFBQTNYLEtBQUE0WCxFQUFBckMsRUFBQW9DLE1BQUE3TCxHQUFBMEwsSUFHQWpCLEVBQUFoQixFQUFBM1AsSUFBQSxDQUEyQkEsR0FBQTJQLEVBQUEzUCxHQUFBOFIsS0FBQSxFQUFBQyxXQUszQixTQUFBRSxFQUFBdkMsRUFBQWtDLEdBSUEsSUFIQSxJQUFBRCxFQUFBLEdBQ0FPLEVBQUEsR0FFQW5mLEVBQUEsRUFBZ0JBLEVBQUEyYyxFQUFBL1UsT0FBaUI1SCxJQUFBLENBQ2pDLElBQUE0YyxFQUFBRCxFQUFBM2MsR0FDQWlOLEVBQUE0UixFQUFBTyxLQUFBeEMsRUFBQSxHQUFBaUMsRUFBQU8sS0FBQXhDLEVBQUEsR0FJQXlDLEVBQUEsQ0FBY0MsSUFIZDFDLEVBQUEsR0FHYzJDLE1BRmQzQyxFQUFBLEdBRWNLLFVBRGRMLEVBQUEsSUFHQXVDLEVBQUFsUyxHQUNBa1MsRUFBQWxTLEdBQUErUixNQUFBM1gsS0FBQWdZLEdBREFULEVBQUF2WCxLQUFBOFgsRUFBQWxTLEdBQUEsQ0FBa0RBLEtBQUErUixNQUFBLENBQUFLLEtBSWxELE9BQUFULEVBR0EsU0FBQVksRUFBQVgsRUFBQTFLLEdBQ0EsSUFBQTNRLEVBQUF3YSxFQUFBYSxFQUFBWSxZQUVBLElBQUFqYyxFQUNBLFVBQUFpRCxNQUFBLCtHQUdBLElBQUFpWixFQUFBakIsSUFBQTdXLE9BQUEsR0FFQSxXQUFBaVgsRUFBQWMsU0FDQUQsRUFFR0EsRUFBQUUsWUFDSHBjLEVBQUFxYyxhQUFBMUwsRUFBQXVMLEVBQUFFLGFBRUFwYyxFQUFBNlEsWUFBQUYsR0FKQTNRLEVBQUFxYyxhQUFBMUwsRUFBQTNRLEVBQUFzYyxZQU1BckIsRUFBQXBYLEtBQUE4TSxRQUNFLGNBQUEwSyxFQUFBYyxTQUNGbmMsRUFBQTZRLFlBQUFGLE9BQ0UscUJBQUEwSyxFQUFBYyxXQUFBZCxFQUFBYyxTQUFBSSxPQUlGLFVBQUF0WixNQUFBLDhMQUhBLElBQUFtWixFQUFBNUIsRUFBQWEsRUFBQWMsU0FBQUksT0FBQXZjLEdBQ0FBLEVBQUFxYyxhQUFBMUwsRUFBQXlMLElBTUEsU0FBQUksRUFBQTdMLEdBQ0EsVUFBQUEsRUFBQThMLFdBQUEsU0FDQTlMLEVBQUE4TCxXQUFBekYsWUFBQXJHLEdBRUEsSUFBQStMLEVBQUF6QixFQUFBbFgsUUFBQTRNLEdBQ0ErTCxHQUFBLEdBQ0F6QixFQUFBalgsT0FBQTBZLEVBQUEsR0FJQSxTQUFBQyxFQUFBdEIsR0FDQSxJQUFBMUssRUFBQTVGLFNBQUFFLGNBQUEsU0FNQSxRQUpBL0ssSUFBQW1iLEVBQUF1QixNQUFBM2QsT0FDQW9jLEVBQUF1QixNQUFBM2QsS0FBQSxpQkFHQWlCLElBQUFtYixFQUFBdUIsTUFBQUMsTUFBQSxDQUNBLElBQUFBLEVBZ0NBLFdBQ0ssRUFJTCxPQUFRemdCLEVBQUEwZ0IsR0FyQ1JDLEdBQ0FGLElBQ0F4QixFQUFBdUIsTUFBQUMsU0FPQSxPQUhBRyxFQUFBck0sRUFBQTBLLEVBQUF1QixPQUNBWixFQUFBWCxFQUFBMUssR0FFQUEsRUFpQkEsU0FBQXFNLEVBQUFDLEVBQUFMLEdBQ0ExZixPQUFBaUksS0FBQXlYLEdBQUFyWCxRQUFBLFNBQUF4SCxHQUNBa2YsRUFBQUMsYUFBQW5mLEVBQUE2ZSxFQUFBN2UsTUFZQSxTQUFBMGQsRUFBQWhaLEVBQUE0WSxHQUNBLElBQUExSyxFQUFBd00sRUFBQUMsRUFBQTdRLEVBR0EsR0FBQThPLEVBQUFnQyxXQUFBNWEsRUFBQXFaLElBQUEsQ0FLQSxLQUpBdlAsRUFBQSxtQkFBQThPLEVBQUFnQyxVQUNBaEMsRUFBQWdDLFVBQUE1YSxFQUFBcVosS0FDQVQsRUFBQWdDLFVBQUFDLFFBQUE3YSxFQUFBcVosTUFTQSxvQkFKQXJaLEVBQUFxWixJQUFBdlAsRUFVQSxHQUFBOE8sRUFBQU4sVUFBQSxDQUNBLElBQUF3QyxFQUFBdkMsSUFFQXJLLEVBQUFvSyxNQUFBNEIsRUFBQXRCLElBRUE4QixFQUFBSyxFQUFBeGYsS0FBQSxLQUFBMlMsRUFBQTRNLEdBQUEsR0FDQUgsRUFBQUksRUFBQXhmLEtBQUEsS0FBQTJTLEVBQUE0TSxHQUFBLFFBR0E5YSxFQUFBZ1gsV0FDQSxtQkFBQWdFLEtBQ0EsbUJBQUFBLElBQUFDLGlCQUNBLG1CQUFBRCxJQUFBRSxpQkFDQSxtQkFBQUMsTUFDQSxtQkFBQXJFLE1BRUE1SSxFQWxFQSxTQUFBMEssR0FDQSxJQUFBd0MsRUFBQTlTLFNBQUFFLGNBQUEsUUFVQSxZQVJBL0ssSUFBQW1iLEVBQUF1QixNQUFBM2QsT0FDQW9jLEVBQUF1QixNQUFBM2QsS0FBQSxZQUVBb2MsRUFBQXVCLE1BQUFrQixJQUFBLGFBRUFkLEVBQUFhLEVBQUF4QyxFQUFBdUIsT0FDQVosRUFBQVgsRUFBQXdDLEdBRUFBLEVBdURBRSxDQUFBMUMsR0FDQThCLEVBaUZBLFNBQUFVLEVBQUF4QyxFQUFBNVksR0FDQSxJQUFBcVosRUFBQXJaLEVBQUFxWixJQUNBckMsRUFBQWhYLEVBQUFnWCxVQVFBdUUsT0FBQTlkLElBQUFtYixFQUFBNEMsdUJBQUF4RSxHQUVBNEIsRUFBQTRDLHVCQUFBRCxLQUNBbEMsRUFBQVosRUFBQVksSUFHQXJDLElBRUFxQyxHQUFBLHVEQUF1RHZDLEtBQUFJLFNBQUFDLG1CQUFBbE0sS0FBQUUsVUFBQTZMLE1BQUEsT0FHdkQsSUFBQXlFLEVBQUEsSUFBQU4sS0FBQSxDQUFBOUIsR0FBQSxDQUE2QjdjLEtBQUEsYUFFN0JrZixFQUFBTixFQUFBTyxLQUVBUCxFQUFBTyxLQUFBWCxJQUFBQyxnQkFBQVEsR0FFQUMsR0FBQVYsSUFBQUUsZ0JBQUFRLElBNUdBbmdCLEtBQUEsS0FBQTJTLEVBQUEwSyxHQUNBK0IsRUFBQSxXQUNBWixFQUFBN0wsR0FFQUEsRUFBQXlOLE1BQUFYLElBQUFFLGdCQUFBaE4sRUFBQXlOLFNBR0F6TixFQUFBZ00sRUFBQXRCLEdBQ0E4QixFQXNEQSxTQUFBeE0sRUFBQWxPLEdBQ0EsSUFBQXFaLEVBQUFyWixFQUFBcVosSUFDQUMsRUFBQXRaLEVBQUFzWixNQUVBQSxHQUNBcEwsRUFBQXVNLGFBQUEsUUFBQW5CLEdBR0EsR0FBQXBMLEVBQUEwTixXQUNBMU4sRUFBQTBOLFdBQUFDLFFBQUF4QyxNQUNFLENBQ0YsS0FBQW5MLEVBQUEyTCxZQUNBM0wsRUFBQXFHLFlBQUFyRyxFQUFBMkwsWUFHQTNMLEVBQUFFLFlBQUE5RixTQUFBd1QsZUFBQXpDLE1BckVBOWQsS0FBQSxLQUFBMlMsR0FDQXlNLEVBQUEsV0FDQVosRUFBQTdMLEtBTUEsT0FGQXdNLEVBQUExYSxHQUVBLFNBQUErYixHQUNBLEdBQUFBLEVBQUEsQ0FDQSxHQUNBQSxFQUFBMUMsTUFBQXJaLEVBQUFxWixLQUNBMEMsRUFBQXpDLFFBQUF0WixFQUFBc1osT0FDQXlDLEVBQUEvRSxZQUFBaFgsRUFBQWdYLFVBRUEsT0FHQTBELEVBQUExYSxFQUFBK2IsUUFFQXBCLEtBMVBBN2dCLEVBQUFELFFBQUEsU0FBQTZjLEVBQUFrQyxHQUNBLHVCQUFBb0QsY0FDQSxpQkFBQTFULFNBQUEsVUFBQTlILE1BQUEsaUVBR0FvWSxLQUFBLElBRUF1QixNQUFBLGlCQUFBdkIsRUFBQXVCLE1BQUF2QixFQUFBdUIsTUFBQSxHQUlBdkIsRUFBQU4sV0FBQSxrQkFBQU0sRUFBQU4sWUFBQU0sRUFBQU4sVUFBQVYsS0FHQWdCLEVBQUFZLGFBQUFaLEVBQUFZLFdBQUEsUUFHQVosRUFBQWMsV0FBQWQsRUFBQWMsU0FBQSxVQUVBLElBQUFmLEVBQUFNLEVBQUF2QyxFQUFBa0MsR0FJQSxPQUZBRixFQUFBQyxFQUFBQyxHQUVBLFNBQUFxRCxHQUdBLElBRkEsSUFBQUMsRUFBQSxHQUVBbmlCLEVBQUEsRUFBaUJBLEVBQUE0ZSxFQUFBaFgsT0FBbUI1SCxJQUFBLENBQ3BDLElBQUE0YyxFQUFBZ0MsRUFBQTVlLElBQ0E4ZSxFQUFBbEIsRUFBQWhCLEVBQUEzUCxLQUVBOFIsT0FDQW9ELEVBQUE5YSxLQUFBeVgsR0FHQW9ELEdBRUF2RCxFQURBTyxFQUFBZ0QsRUFBQXJELEdBQ0FBLEdBR0EsSUFBQTdlLEVBQUEsRUFBaUJBLEVBQUFtaUIsRUFBQXZhLE9BQXNCNUgsSUFBQSxDQUN2QyxJQUFBOGUsRUFFQSxRQUZBQSxFQUFBcUQsRUFBQW5pQixJQUVBK2UsS0FBQSxDQUNBLFFBQUE1TCxFQUFBLEVBQW1CQSxFQUFBMkwsRUFBQUUsTUFBQXBYLE9BQTJCdUwsSUFBQTJMLEVBQUFFLE1BQUE3TCxZQUU5Q3lLLEVBQUFrQixFQUFBN1IsUUFrTkEsSUFDQW1WLEVBREFDLEdBQ0FELEVBQUEsR0FFQSxTQUFBOWEsRUFBQWdiLEdBR0EsT0FGQUYsRUFBQTlhLEdBQUFnYixFQUVBRixFQUFBaFksT0FBQW1ZLFNBQUEzYyxLQUFBLFFBSUEsU0FBQW9iLEVBQUE3TSxFQUFBN00sRUFBQXNaLEVBQUEzYSxHQUNBLElBQUFxWixFQUFBc0IsRUFBQSxHQUFBM2EsRUFBQXFaLElBRUEsR0FBQW5MLEVBQUEwTixXQUNBMU4sRUFBQTBOLFdBQUFDLFFBQUFPLEVBQUEvYSxFQUFBZ1ksT0FDRSxDQUNGLElBQUFrRCxFQUFBalUsU0FBQXdULGVBQUF6QyxHQUNBbUQsRUFBQXRPLEVBQUFzTyxXQUVBQSxFQUFBbmIsSUFBQTZNLEVBQUFxRyxZQUFBaUksRUFBQW5iLElBRUFtYixFQUFBN2EsT0FDQXVNLEVBQUEwTCxhQUFBMkMsRUFBQUMsRUFBQW5iLElBRUE2TSxFQUFBRSxZQUFBbU8sbUNDM1ZlLFNBQUFFLEVBQUE1TCxHQUNmLElBQUEvRyxFQUNBaFAsRUFBQStWLEVBQUEvVixPQWFBLE1BWEEsbUJBQUFBLEVBQ0FBLEVBQUE0aEIsV0FDQTVTLEVBQUFoUCxFQUFBNGhCLFlBRUE1UyxFQUFBaFAsRUFBQSxjQUNBQSxFQUFBNGhCLFdBQUE1UyxHQUdBQSxFQUFBLGVBR0FBLEVBZkFuUSxFQUFBVSxFQUFBeUUsRUFBQSxzQkFBQTJkLGtDQ0VBLElBQUF0ZCxFQUFjeEYsRUFBUSxHQUFPd0YsUUFFN0J0RixFQUFBc0IsWUFBQSxFQUNBdEIsRUFBQThpQixvQkFDQSxvQkFBQTdlLGVBQUE4ZSxxQ0FDQTllLE9BQUE4ZSxxQ0FDQSxXQUNBLE9BQUFyYyxVQUFBb0IsT0FDQSx1QkFBQXBCLFVBQUEsR0FBQXBCLEVBQ0FBLEVBQUF1RSxNQUFBLEtBQUFuRCxZQUlBMUcsRUFBQWdqQixpQkFDQSxvQkFBQS9lLGVBQUFnZiw2QkFDQWhmLE9BQUFnZiw2QkFDQSxXQUFnQixnQkFBQUMsR0FBd0IsT0FBQUEscUJDbEJ4Q2pqQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCOzs7Ozs7OztHQ1MzQixJQUFBdVIsRUFBTXpULEVBQVEsSUFBZTZCLEVBQUEsbUJBQUFWLGVBQUF1UyxJQUFBeFIsRUFBQUwsRUFBQVYsT0FBQXVTLElBQUEsdUJBQUEyUCxFQUFBeGhCLEVBQUFWLE9BQUF1UyxJQUFBLHNCQUFBeFMsRUFBQVcsRUFBQVYsT0FBQXVTLElBQUEsd0JBQUFwUyxFQUFBTyxFQUFBVixPQUFBdVMsSUFBQSwyQkFBQTRQLEVBQUF6aEIsRUFBQVYsT0FBQXVTLElBQUEsd0JBQUE2UCxFQUFBMWhCLEVBQUFWLE9BQUF1UyxJQUFBLHdCQUFBOFAsRUFBQTNoQixFQUFBVixPQUFBdVMsSUFBQSx1QkFBQStQLEVBQUE1aEIsRUFBQVYsT0FBQXVTLElBQUEsK0JBQUFnUSxFQUFBN2hCLEVBQUFWLE9BQUF1UyxJQUFBLDJCQUFBaVEsRUFBQTloQixFQUFBVixPQUFBdVMsSUFBQSx3QkFBQWtRLEVBQUEvaEIsRUFBQVYsT0FBQXVTLElBQUEsY0FDMUMsTUFBQW1RLEVBQUFoaUIsRUFBQVYsT0FBQXVTLElBQUEsb0JBQUFvUSxFQUFBLG1CQUFBM2lCLGVBQUF1UixTQUNBLFNBQUEvTyxFQUFBZSxHQUFjLFFBQUF5RyxFQUFBdkUsVUFBQW9CLE9BQUEsRUFBQXRILEVBQUEseURBQUFnRSxFQUFBakUsRUFBQSxFQUE4RkEsRUFBQTBLLEVBQUkxSyxJQUFBQyxHQUFBLFdBQUE4YyxtQkFBQTVXLFVBQUFuRyxFQUFBLEtBRHhCLFNBQUFpRSxFQUFBeUcsRUFBQXpLLEVBQUFELEVBQUF5RSxFQUFBNlMsRUFBQWdNLEVBQUFoZixHQUE2QixJQUFBTCxFQUFBLENBQWdCLEdBQVRBLE9BQUEsT0FBUyxJQUFBeUcsRUFBQXpHLEVBQUFtQyxNQUFBLHFJQUF1SixDQUFLLElBQUF4RyxFQUFBLENBQUFLLEVBQUFELEVBQUF5RSxFQUFBNlMsRUFBQWdNLEVBQUFoZixHQUFBdkUsRUFBQSxHQUF3QmtFLEVBQUFtQyxNQUFBc0UsRUFBQVksUUFBQSxpQkFBbUMsT0FBQTFMLEVBQUFHLFNBQWlCRyxLQUFBLHNCQUE2QyxNQUFoQitELEVBQUFzSCxZQUFBLEVBQWdCdEgsR0FDclBzZixFQUFBLDJCQUFBdGYsRUFBQSw0SEFBbUNoRSxHQUE2SCxJQUFBdWEsRUFBQSxDQUFPZ0osVUFBQSxXQUFxQixVQUFTQyxtQkFBQSxhQUFnQ0Msb0JBQUEsYUFBaUNDLGdCQUFBLGNBQThCL1IsRUFBQSxHQUN6YyxTQUFBUyxFQUFBcE8sRUFBQXlHLEVBQUF6SyxHQUFrQitILEtBQUE0YixNQUFBM2YsRUFBYStELEtBQUE2YixRQUFBblosRUFBZTFDLEtBQUEwVyxLQUFBOU0sRUFBWTVKLEtBQUE4YixRQUFBN2pCLEdBQUF1YSxFQUFzUyxTQUFBOVgsS0FBc0MsU0FBQUUsRUFBQXFCLEVBQUF5RyxFQUFBekssR0FBa0IrSCxLQUFBNGIsTUFBQTNmLEVBQWErRCxLQUFBNmIsUUFBQW5aLEVBQWUxQyxLQUFBMFcsS0FBQTlNLEVBQVk1SixLQUFBOGIsUUFBQTdqQixHQUFBdWEsRUFBcFhuSSxFQUFBOVEsVUFBQXdpQixpQkFBQSxHQUFnQzFSLEVBQUE5USxVQUFBeWlCLFNBQUEsU0FBQS9mLEVBQUF5RyxHQUFtQyxpQkFBQXpHLEdBQUEsbUJBQUFBLEdBQUEsTUFBQUEsR0FBQWYsRUFBQSxNQUFtRThFLEtBQUE4YixRQUFBSCxnQkFBQTNiLEtBQUEvRCxFQUFBeUcsRUFBQSxhQUFtRDJILEVBQUE5USxVQUFBMGlCLFlBQUEsU0FBQWhnQixHQUFvQytELEtBQUE4YixRQUFBTCxtQkFBQXpiLEtBQUEvRCxFQUFBLGdCQUFxRXZCLEVBQUFuQixVQUFBOFEsRUFBQTlRLFVBQW9HLElBQUEyaUIsRUFBQXRoQixFQUFBckIsVUFBQSxJQUFBbUIsRUFDbGR3aEIsRUFBQUMsWUFBQXZoQixFQUFnQm9RLEVBQUFrUixFQUFBN1IsRUFBQTlRLFdBQWlCMmlCLEVBQUFFLHNCQUFBLEVBQTBCLElBQUFDLEVBQUEsQ0FBT0MsUUFBQSxNQUFhQyxFQUFBLENBQUlELFFBQUEsTUFBYUUsRUFBQW5rQixPQUFBa0IsVUFBQUMsZUFBQWlqQixFQUFBLENBQXNDdmpCLEtBQUEsRUFBQXdqQixLQUFBLEVBQUFDLFFBQUEsRUFBQUMsVUFBQSxHQUN0SSxTQUFBQyxFQUFBNWdCLEVBQUF5RyxFQUFBekssR0FBa0IsSUFBQUQsT0FBQSxFQUFBeUUsRUFBQSxHQUFpQjZTLEVBQUEsS0FBQWdNLEVBQUEsS0FBZSxTQUFBNVksRUFBQSxJQUFBMUssVUFBQSxJQUFBMEssRUFBQWdhLE1BQUFwQixFQUFBNVksRUFBQWdhLFVBQUEsSUFBQWhhLEVBQUF4SixNQUFBb1csRUFBQSxHQUFBNU0sRUFBQXhKLEtBQUF3SixFQUFBOFosRUFBQTFrQixLQUFBNEssRUFBQTFLLEtBQUF5a0IsRUFBQWpqQixlQUFBeEIsS0FBQXlFLEVBQUF6RSxHQUFBMEssRUFBQTFLLElBQTRILElBQUFzRSxFQUFBNkIsVUFBQW9CLE9BQUEsRUFBeUIsT0FBQWpELEVBQUFHLEVBQUFxZ0IsU0FBQTdrQixPQUFzQixLQUFBcUUsRUFBQSxDQUFhLFFBQUExRSxFQUFBMkssTUFBQWpHLEdBQUF2RSxFQUFBLEVBQXVCQSxFQUFBdUUsRUFBSXZFLElBQUFILEVBQUFHLEdBQUFvRyxVQUFBcEcsRUFBQSxHQUF3QjBFLEVBQUFxZ0IsU0FBQWxsQixFQUFhLEdBQUFxRSxLQUFBNFEsYUFBQSxJQUFBN1UsS0FBQXNFLEVBQUFMLEVBQUE0USxrQkFBQSxJQUFBcFEsRUFBQXpFLEtBQUF5RSxFQUFBekUsR0FBQXNFLEVBQUF0RSxJQUE0RSxPQUFPd1YsU0FBQS9ULEVBQUFXLEtBQUE2QixFQUFBL0MsSUFBQW9XLEVBQUFvTixJQUFBcEIsRUFBQU0sTUFBQW5mLEVBQUFzZ0IsT0FBQVIsRUFBQUQsU0FDL1IsU0FBQVUsRUFBQS9nQixHQUFjLHVCQUFBQSxHQUFBLE9BQUFBLEtBQUF1UixXQUFBL1QsRUFBNEosSUFBQThDLEVBQUEsT0FBQXZCLEVBQUEsR0FBa0IsU0FBQWlpQixFQUFBaGhCLEVBQUF5RyxFQUFBekssRUFBQUQsR0FBb0IsR0FBQWdELEVBQUF1RSxPQUFBLENBQWEsSUFBQTlDLEVBQUF6QixFQUFBa2lCLE1BQXNFLE9BQXhEemdCLEVBQUFpTCxPQUFBekwsRUFBV1EsRUFBQTBnQixVQUFBemEsRUFBY2pHLEVBQUEyZ0IsS0FBQW5sQixFQUFTd0UsRUFBQW9mLFFBQUE3akIsRUFBWXlFLEVBQUE0Z0IsTUFBQSxFQUFVNWdCLEVBQVMsT0FBT2lMLE9BQUF6TCxFQUFBa2hCLFVBQUF6YSxFQUFBMGEsS0FBQW5sQixFQUFBNGpCLFFBQUE3akIsRUFBQXFsQixNQUFBLEdBQ2paLFNBQUE1aEIsRUFBQVEsR0FBY0EsRUFBQXlMLE9BQUEsS0FBY3pMLEVBQUFraEIsVUFBQSxLQUFpQmxoQixFQUFBbWhCLEtBQUEsS0FBWW5oQixFQUFBNGYsUUFBQSxLQUFlNWYsRUFBQW9oQixNQUFBLEVBQVUsR0FBQXJpQixFQUFBdUUsUUFBQXZFLEVBQUFnRSxLQUFBL0MsR0FFbUcsU0FBQVYsRUFBQVUsRUFBQXlHLEVBQUF6SyxHQUFrQixhQUFBZ0UsRUFBQSxFQUR2TSxTQUFBbkIsRUFBQW1CLEVBQUF5RyxFQUFBekssRUFBQUQsR0FBb0IsSUFBQXlFLFNBQUFSLEVBQWUsY0FBQVEsR0FBQSxZQUFBQSxJQUFBUixFQUFBLE1BQXlDLElBQUFxVCxHQUFBLEVBQVMsVUFBQXJULEVBQUFxVCxHQUFBLE9BQWlCLE9BQUE3UyxHQUFlLDBCQUFBNlMsR0FBQSxFQUFpQyxNQUFNLG9CQUFBclQsRUFBQXVSLFVBQWlDLEtBQUEvVCxFQUFBLEtBQUFtaEIsRUFBQXRMLEdBQUEsR0FBb0IsR0FBQUEsRUFBQSxPQUFBclgsRUFBQUQsRUFBQWlFLEVBQUEsS0FBQXlHLEVBQUEsSUFBQWlELEVBQUExSixFQUFBLEdBQUF5RyxHQUFBLEVBQWdFLEdBQXZCNE0sRUFBQSxFQUFJNU0sRUFBQSxLQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBbUJILE1BQUE2RixRQUFBbk0sR0FBQSxRQUFBcWYsRUFBQSxFQUFnQ0EsRUFBQXJmLEVBQUFzRCxPQUFXK2IsSUFBQSxDQUFZLElBQUFoZixFQUFBb0csRUFBQWlELEVBQVBsSixFQUFBUixFQUFBcWYsR0FBT0EsR0FBZWhNLEdBQUF4VSxFQUFBMkIsRUFBQUgsRUFBQXJFLEVBQUFELFFBQWMsR0FBQXNFLEVBQUEsT0FBQUwsR0FBQSxpQkFBQUEsRUFBQSx3QkFBQUssRUFBQStlLEdBQUFwZixFQUFBb2YsSUFBQXBmLEVBQUEsZUFBQUssRUFBQSx3QkFBQUEsRUFBQSxJQUFBTCxFQUFBSyxFQUFBeEUsS0FBQW1FLEdBQUFxZixFQUNyVyxJQUFFN2UsRUFBQVIsRUFBQTZELFFBQUF1VCxNQUFtQi9ELEdBQUF4VSxFQUFBMkIsSUFBQTdELE1BQUEwRCxFQUFBb0csRUFBQWlELEVBQUFsSixFQUFBNmUsS0FBQXJqQixFQUFBRCxPQUFzQyxXQUFBeUUsR0FBQXZCLEVBQUEseUJBQUFqRCxFQUFBLEdBQUFnRSxHQUFBLHFCQUEwRTVELE9BQUFpSSxLQUFBckUsR0FBQXNCLEtBQUEsVUFBOEJ0RixFQUFBLElBQVMsT0FBQXFYLEVBQTJCeFUsQ0FBQW1CLEVBQUEsR0FBQXlHLEVBQUF6SyxHQUE2QixTQUFBME4sRUFBQTFKLEVBQUF5RyxHQUFnQix1QkFBQXpHLEdBQUEsT0FBQUEsR0FBQSxNQUFBQSxFQUFBL0MsSUFIcEYsU0FBQStDLEdBQW1CLElBQUF5RyxFQUFBLENBQU80YSxJQUFBLEtBQUFDLElBQUEsTUFBbUIsY0FBQXRoQixHQUFBcUgsUUFBQSxpQkFBQXJILEdBQTZDLE9BQUF5RyxFQUFBekcsS0FHTnVoQixDQUFBdmhCLEVBQUEvQyxLQUFBd0osRUFBQXRGLFNBQUEsSUFBOEUsU0FBQXFnQixFQUFBeGhCLEVBQUF5RyxHQUFpQnpHLEVBQUFtaEIsS0FBQXRsQixLQUFBbUUsRUFBQTRmLFFBQUFuWixFQUFBekcsRUFBQW9oQixTQUNuVixTQUFBSyxFQUFBemhCLEVBQUF5RyxFQUFBekssR0FBbUIsSUFBQUQsRUFBQWlFLEVBQUF5TCxPQUFBakwsRUFBQVIsRUFBQWtoQixVQUE2QmxoQixJQUFBbWhCLEtBQUF0bEIsS0FBQW1FLEVBQUE0ZixRQUFBblosRUFBQXpHLEVBQUFvaEIsU0FBcUM5YSxNQUFBNkYsUUFBQW5NLEdBQUEwaEIsRUFBQTFoQixFQUFBakUsRUFBQUMsRUFBQSxTQUFBZ0UsR0FBcUMsT0FBQUEsSUFBUyxNQUFBQSxJQUFBK2dCLEVBQUEvZ0IsT0FKbkksU0FBQUEsRUFBQXlHLEdBQWlCLE9BQU84SyxTQUFBL1QsRUFBQVcsS0FBQTZCLEVBQUE3QixLQUFBbEIsSUFBQXdKLEVBQUFnYSxJQUFBemdCLEVBQUF5Z0IsSUFBQWQsTUFBQTNmLEVBQUEyZixNQUFBbUIsT0FBQTlnQixFQUFBOGdCLFFBSTJHYSxDQUFBM2hCLEVBQUFRLElBQUFSLEVBQUEvQyxLQUFBd0osS0FBQXhKLE1BQUErQyxFQUFBL0MsSUFBQSxPQUFBK0MsRUFBQS9DLEtBQUFvSyxRQUFBL0csRUFBQSxZQUFBdEUsSUFBQUQsRUFBQWdILEtBQUEvQyxJQUF5RyxTQUFBMGhCLEVBQUExaEIsRUFBQXlHLEVBQUF6SyxFQUFBRCxFQUFBeUUsR0FBc0IsSUFBQTZTLEVBQUEsR0FBUyxNQUFBclgsSUFBQXFYLEdBQUEsR0FBQXJYLEdBQUFxTCxRQUFBL0csRUFBQSxZQUFzRGhCLEVBQUFVLEVBQUF5aEIsRUFBYmhiLEVBQUF1YSxFQUFBdmEsRUFBQTRNLEVBQUF0WCxFQUFBeUUsSUFBdUJoQixFQUFBaUgsR0FBSyxTQUFBbEgsSUFBYSxJQUFBUyxFQUFBb2dCLEVBQUFDLFFBQXlDLE9BQXpCLE9BQUFyZ0IsR0FBQWYsRUFBQSxPQUF5QmUsRUFDdFksSUFBQTRoQixFQUFBLENBQU9DLFNBQUEsQ0FBVS9hLElBQUEsU0FBQTlHLEVBQUF5RyxFQUFBekssR0FBb0IsU0FBQWdFLEVBQUEsT0FBQUEsRUFBb0IsSUFBQWpFLEVBQUEsR0FBeUIsT0FBaEIybEIsRUFBQTFoQixFQUFBakUsRUFBQSxLQUFBMEssRUFBQXpLLEdBQWdCRCxHQUFTMEksUUFBQSxTQUFBekUsRUFBQXlHLEVBQUF6SyxHQUF5QixTQUFBZ0UsRUFBQSxPQUFBQSxFQUF1Q1YsRUFBQVUsRUFBQXdoQixFQUFuQi9hLEVBQUF1YSxFQUFBLFVBQUF2YSxFQUFBekssSUFBNkJ3RCxFQUFBaUgsSUFBSzJhLE1BQUEsU0FBQXBoQixHQUFtQixPQUFBVixFQUFBVSxFQUFBLFdBQXNCLGFBQVksT0FBTzhoQixRQUFBLFNBQUE5aEIsR0FBcUIsSUFBQXlHLEVBQUEsR0FBMkMsT0FBbENpYixFQUFBMWhCLEVBQUF5RyxFQUFBLGNBQUF6RyxHQUF1QixPQUFBQSxJQUFXeUcsR0FBU3NiLEtBQUEsU0FBQS9oQixHQUF1QyxPQUFyQitnQixFQUFBL2dCLElBQUFmLEVBQUEsT0FBcUJlLElBQVVnaUIsVUFBQSxXQUFzQixPQUFPM0IsUUFBQSxPQUFjNEIsVUFBQTdULEVBQUE4VCxjQUFBdmpCLEVBQUF3akIsY0FBQSxTQUFBbmlCLEVBQUF5RyxHQUMzUixZQURvVixJQUFBQSxNQUFBLE9BQXFCekcsRUFBQSxDQUFHdVIsU0FBQXVOLEVBQUFzRCxzQkFBQTNiLEVBQzVkNGIsY0FBQXJpQixFQUFBc2lCLGVBQUF0aUIsRUFBQXVpQixhQUFBLEVBQUFDLFNBQUEsS0FBQUMsU0FBQSxPQUE2RUQsU0FBQSxDQUFZalIsU0FBQXNOLEVBQUE2RCxTQUFBMWlCLEdBQXVCQSxFQUFBeWlCLFNBQUF6aUIsR0FBb0IyaUIsV0FBQSxTQUFBM2lCLEdBQXdCLE9BQU91UixTQUFBeU4sRUFBQWxOLE9BQUE5UixJQUFxQjRpQixLQUFBLFNBQUE1aUIsR0FBa0IsT0FBT3VSLFNBQUE0TixFQUFBMEQsTUFBQTdpQixFQUFBOGlCLFNBQUEsRUFBQUMsUUFBQSxPQUE2QzFKLEtBQUEsU0FBQXJaLEVBQUF5RyxHQUFvQixPQUFPOEssU0FBQTJOLEVBQUEvZ0IsS0FBQTZCLEVBQUF3UixhQUFBLElBQUEvSyxFQUFBLEtBQUFBLElBQThDdWMsWUFBQSxTQUFBaGpCLEVBQUF5RyxHQUEyQixPQUFBbEgsSUFBQXlqQixZQUFBaGpCLEVBQUF5RyxJQUE0QndjLFdBQUEsU0FBQWpqQixFQUFBeUcsR0FBMEIsT0FBQWxILElBQUEwakIsV0FBQWpqQixFQUFBeUcsSUFBMkJ5YyxVQUFBLFNBQUFsakIsRUFBQXlHLEdBQXlCLE9BQUFsSCxJQUFBMmpCLFVBQUFsakIsRUFBQXlHLElBQTBCMGMsb0JBQUEsU0FBQW5qQixFQUN0ZXlHLEVBQUF6SyxHQUFLLE9BQUF1RCxJQUFBNGpCLG9CQUFBbmpCLEVBQUF5RyxFQUFBekssSUFBc0NvbkIsY0FBQSxhQUEyQkMsZ0JBQUEsU0FBQXJqQixFQUFBeUcsR0FBK0IsT0FBQWxILElBQUE4akIsZ0JBQUFyakIsRUFBQXlHLElBQWdDNmMsUUFBQSxTQUFBdGpCLEVBQUF5RyxHQUF1QixPQUFBbEgsSUFBQStqQixRQUFBdGpCLEVBQUF5RyxJQUF3QjhjLFdBQUEsU0FBQXZqQixFQUFBeUcsRUFBQXpLLEdBQTRCLE9BQUF1RCxJQUFBZ2tCLFdBQUF2akIsRUFBQXlHLEVBQUF6SyxJQUE2QnduQixPQUFBLFNBQUF4akIsR0FBb0IsT0FBQVQsSUFBQWlrQixPQUFBeGpCLElBQXFCeWpCLFNBQUEsU0FBQXpqQixHQUFzQixPQUFBVCxJQUFBa2tCLFNBQUF6akIsSUFBdUIwakIsU0FBQWxuQixFQUFBbW5CLFdBQUEvbUIsRUFBQWduQixTQUFBM0UsRUFBQTlVLGNBQUF5VyxFQUFBaUQsYUFBQSxTQUFBN2pCLEVBQUF5RyxFQUFBekssR0FBaUYsTUFBQWdFLEdBQUFmLEVBQUEsTUFBQWUsR0FBdUMsSUFBQWpFLE9BQUEsRUFBQXlFLEVBQUF1TyxFQUFBLEdBQW1CL08sRUFBQTJmLE9BQUF0TSxFQUFBclQsRUFBQS9DLElBQUFvaUIsRUFBQXJmLEVBQUF5Z0IsSUFBQXBnQixFQUFBTCxFQUFBOGdCLE9BQXFDLFNBQ25mcmEsRUFBQSxNQUFHLElBQUFBLEVBQUFnYSxNQUFBcEIsRUFBQTVZLEVBQUFnYSxJQUFBcGdCLEVBQUFpZ0IsRUFBQUQsY0FBc0MsSUFBQTVaLEVBQUF4SixNQUFBb1csRUFBQSxHQUFBNU0sRUFBQXhKLEtBQTZCLElBQUF0QixPQUFBLEVBQWtFLElBQUFJLEtBQXJEaUUsRUFBQTdCLE1BQUE2QixFQUFBN0IsS0FBQXlTLGVBQUFqVixFQUFBcUUsRUFBQTdCLEtBQUF5UyxjQUFxRG5LLEVBQUE4WixFQUFBMWtCLEtBQUE0SyxFQUFBMUssS0FBQXlrQixFQUFBampCLGVBQUF4QixLQUFBeUUsRUFBQXpFLFFBQUEsSUFBQTBLLEVBQUExSyxTQUFBLElBQUFKLElBQUFJLEdBQUEwSyxFQUFBMUssSUFBOEcsUUFBckJBLEVBQUFtRyxVQUFBb0IsT0FBQSxHQUFxQjlDLEVBQUFxZ0IsU0FBQTdrQixPQUFzQixLQUFBRCxFQUFBLENBQWFKLEVBQUEySyxNQUFBdkssR0FBVyxRQUFBRCxFQUFBLEVBQVlBLEVBQUFDLEVBQUlELElBQUFILEVBQUFHLEdBQUFvRyxVQUFBcEcsRUFBQSxHQUF3QjBFLEVBQUFxZ0IsU0FBQWxsQixFQUFhLE9BQU80VixTQUFBL1QsRUFBQVcsS0FBQTZCLEVBQUE3QixLQUFBbEIsSUFBQW9XLEVBQUFvTixJQUFBcEIsRUFBQU0sTUFBQW5mLEVBQUFzZ0IsT0FBQXpnQixJQUFxRHlqQixjQUFBLFNBQUE5akIsR0FBMkIsSUFBQXlHLEVBQUFtYSxFQUFBMWpCLEtBQUEsS0FBQThDLEdBQThCLE9BQVR5RyxFQUFBdEksS0FBQTZCLEVBQVN5RyxHQUFTc2QsZUFBQWhELEVBQUF0WixRQUFBLFNBQ3ZkdWMsd0JBQUFqRixFQUFBa0Ysa0JBQUFyRixFQUFBc0YsbURBQUEsQ0FBa0dDLHVCQUFBL0QsRUFBQWdFLGtCQUFBOUQsRUFBQTNOLE9BQUE1RCxJQUF1RHNWLEVBQUEsQ0FBSTdILFFBQUFvRixHQUFVMEMsRUFBQUQsR0FBQXpDLEdBQUF5QyxFQUFXNW9CLEVBQUFELFFBQUE4b0IsRUFBQTlILFNBQUE4SDs7Ozs7Ozs7R0NackssSUFBQXBGLEVBQU81akIsRUFBUSxHQUFPNkIsRUFBSTdCLEVBQVEsSUFBZWtCLEVBQUlsQixFQUFRLElBQzFFLFNBQUF5akIsRUFBQS9lLEdBQWMsUUFBQXlHLEVBQUF2RSxVQUFBb0IsT0FBQSxFQUFBdkgsRUFBQSx5REFBQWlFLEVBQUFoRSxFQUFBLEVBQThGQSxFQUFBeUssRUFBSXpLLElBQUFELEdBQUEsV0FBQStjLG1CQUFBNVcsVUFBQWxHLEVBQUEsS0FEekIsU0FBQWdFLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEVBQUFILEVBQUFnVCxFQUFBZ00sR0FBNkIsSUFBQXJmLEVBQUEsQ0FBZ0IsR0FBVEEsT0FBQSxPQUFTLElBQUF5RyxFQUFBekcsRUFBQW1DLE1BQUEscUlBQXVKLENBQUssSUFBQXhHLEVBQUEsQ0FBQUksRUFBQUMsRUFBQXdFLEVBQUFILEVBQUFnVCxFQUFBZ00sR0FBQXRRLEVBQUEsR0FBd0IvTyxFQUFBbUMsTUFBQXNFLEVBQUFZLFFBQUEsaUJBQW1DLE9BQUExTCxFQUFBb1QsU0FBaUI5UyxLQUFBLHNCQUE2QyxNQUFoQitELEVBQUFzSCxZQUFBLEVBQWdCdEgsR0FDcFBtZixFQUFBLDJCQUFBbmYsRUFBQSw0SEFBbUNqRSxHQUE2SG1qQixHQUFBSCxFQUFBLE9BQ3JVLElBQUE0QyxHQUFBLEVBQUFILEVBQUEsS0FBQUMsR0FBQSxFQUFBOEMsRUFBQSxLQUFBQyxFQUFBLENBQW9DQyxRQUFBLFNBQUF6a0IsR0FBb0IyaEIsR0FBQSxFQUFNSCxFQUFBeGhCLElBQU8sU0FBQTBrQixFQUFBMWtCLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEVBQUFILEVBQUFnVCxFQUFBZ00sRUFBQTFqQixHQUErQmdtQixHQUFBLEVBQU1ILEVBQUEsS0FEOE8sU0FBQXhoQixFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxFQUFBSCxFQUFBZ1QsRUFBQWdNLEVBQUExakIsR0FBK0IsSUFBQW9ULEVBQUF6SSxNQUFBaEosVUFBQW9GLE1BQUE3RyxLQUFBcUcsVUFBQSxHQUE4QyxJQUFJdUUsRUFBQXBCLE1BQUF0SixFQUFBZ1QsR0FBYSxNQUFBalQsR0FBU2lJLEtBQUEwZ0IsUUFBQTNvQixLQUM3VXVKLE1BQUFtZixFQUFBdGlCLFdBQTZKLElBQUF5aUIsRUFBQSxLQUFBQyxFQUFBLEdBQy9RLFNBQUFDLElBQWMsR0FBQUYsRUFBQSxRQUFBM2tCLEtBQUE0a0IsRUFBQSxDQUF1QixJQUFBbmUsRUFBQW1lLEVBQUE1a0IsR0FBQWpFLEVBQUE0b0IsRUFBQTFoQixRQUFBakQsR0FBa0QsSUFBdEIsRUFBQWpFLEdBQUFnakIsRUFBQSxLQUFBL2UsSUFBc0I4a0IsRUFBQS9vQixHQUFtRSxRQUFBQyxLQUF4RHlLLEVBQUFzZSxlQUFBaEcsRUFBQSxLQUFBL2UsR0FBaUM4a0IsRUFBQS9vQixHQUFBMEssRUFBUTFLLEVBQUEwSyxFQUFBdWUsV0FBZSxDQUFnQixJQUFBeGtCLE9BQUEsRUFBYUgsRUFBQXRFLEVBQUFDLEdBQUFxWCxFQUFBNU0sRUFBQTRZLEVBQUFyakIsRUFBbUJpcEIsRUFBQTFuQixlQUFBOGhCLElBQUFOLEVBQUEsS0FBQU0sR0FBc0M0RixFQUFBNUYsR0FBQWhmLEVBQVEsSUFBQTFFLEVBQUEwRSxFQUFBNmtCLHdCQUFnQyxHQUFBdnBCLEVBQUEsQ0FBTSxJQUFBNkUsS0FBQTdFLElBQUE0QixlQUFBaUQsSUFBQTJrQixFQUFBeHBCLEVBQUE2RSxHQUFBNlMsRUFBQWdNLEdBQTZDN2UsR0FBQSxPQUFLSCxFQUFBK2tCLGtCQUFBRCxFQUFBOWtCLEVBQUEra0IsaUJBQUEvUixFQUFBZ00sR0FBQTdlLEdBQUEsR0FBQUEsR0FBQSxFQUErREEsR0FBQXVlLEVBQUEsS0FBQS9pQixFQUFBZ0UsS0FDL1ksU0FBQW1sQixFQUFBbmxCLEVBQUF5RyxFQUFBMUssR0FBbUJzcEIsRUFBQXJsQixJQUFBK2UsRUFBQSxNQUFBL2UsR0FBd0JxbEIsRUFBQXJsQixHQUFBeUcsRUFBUTZlLEVBQUF0bEIsR0FBQXlHLEVBQUF1ZSxXQUFBanBCLEdBQUF3cEIsYUFBbUMsSUFBQVQsRUFBQSxHQUFBRyxFQUFBLEdBQWVJLEVBQUEsR0FBTUMsRUFBQSxHQUFNRSxFQUFBLEtBQUFDLEVBQUEsS0FBQUMsRUFBQSxLQUF5QixTQUFBQyxFQUFBM2xCLEVBQUF5RyxFQUFBMUssR0FBbUIsSUFBQUMsRUFBQWdFLEVBQUE3QixNQUFBLGdCQUE4QjZCLEVBQUE0bEIsY0FBQUYsRUFBQTNwQixHQUZsRCxTQUFBaUUsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsRUFBQUgsRUFBQWdULEVBQUFnTSxFQUFBMWpCLEdBQXdELEdBQXpCK29CLEVBQUFyZixNQUFBdEIsS0FBQTdCLFdBQXlCeWYsRUFBQSxDQUFPLEdBQUFBLEVBQUEsQ0FBTyxJQUFBNVMsRUFBQXlTLEVBQVNHLEdBQUEsRUFBTUgsRUFBQSxVQUFRekMsRUFBQSxPQUFBaFEsT0FBQSxFQUF1QjBTLE9BQUEsRUFBQThDLEVBQUF4VixJQUU1QzhXLENBQUE3cEIsRUFBQXlLLE9BQUEsRUFBQXpHLEdBQWlCQSxFQUFBNGxCLGNBQUEsS0FBcUIsU0FBQUUsRUFBQTlsQixFQUFBeUcsR0FBd0MsT0FBdkIsTUFBQUEsR0FBQXNZLEVBQUEsTUFBdUIsTUFBQS9lLEVBQUF5RyxFQUFvQkgsTUFBQTZGLFFBQUFuTSxHQUFxQnNHLE1BQUE2RixRQUFBMUYsSUFBQXpHLEVBQUErQyxLQUFBc0MsTUFBQXJGLEVBQUF5RyxHQUFBekcsSUFBK0NBLEVBQUErQyxLQUFBMEQsR0FBVXpHLEdBQVNzRyxNQUFBNkYsUUFBQTFGLEdBQUEsQ0FBQXpHLEdBQUE2SSxPQUFBcEMsR0FBQSxDQUFBekcsRUFBQXlHLEdBQzFZLFNBQUFzZixFQUFBL2xCLEVBQUF5RyxFQUFBMUssR0FBbUJ1SyxNQUFBNkYsUUFBQW5NLEtBQUF5RSxRQUFBZ0MsRUFBQTFLLEdBQUFpRSxHQUFBeUcsRUFBQTVLLEtBQUFFLEVBQUFpRSxHQUErQyxJQUFBZ21CLEVBQUEsS0FBWSxTQUFBQyxFQUFBam1CLEdBQWUsR0FBQUEsRUFBQSxDQUFNLElBQUF5RyxFQUFBekcsRUFBQWttQixtQkFBQW5xQixFQUFBaUUsRUFBQW1tQixtQkFBa0QsR0FBQTdmLE1BQUE2RixRQUFBMUYsR0FBQSxRQUFBekssRUFBQSxFQUFnQ0EsRUFBQXlLLEVBQUFuRCxTQUFBdEQsRUFBQW9tQix1QkFBc0NwcUIsSUFBQTJwQixFQUFBM2xCLEVBQUF5RyxFQUFBekssR0FBQUQsRUFBQUMsU0FBb0J5SyxHQUFBa2YsRUFBQTNsQixFQUFBeUcsRUFBQTFLLEdBQWtCaUUsRUFBQWttQixtQkFBQSxLQUEwQmxtQixFQUFBbW1CLG1CQUFBLEtBQTBCbm1CLEVBQUFxbUIsZ0JBQUFybUIsRUFBQWtnQixZQUFBb0csUUFBQXRtQixJQUNyVCxJQUFBdW1CLEVBQUEsQ0FBUUMsdUJBQUEsU0FBQXhtQixHQUFtQzJrQixHQUFBNUYsRUFBQSxPQUFtQjRGLEVBQUFyZSxNQUFBaEosVUFBQW9GLE1BQUE3RyxLQUFBbUUsR0FBaUM2a0IsS0FBSzRCLHlCQUFBLFNBQUF6bUIsR0FBc0MsSUFBQWpFLEVBQUEwSyxHQUFBLEVBQVcsSUFBQTFLLEtBQUFpRSxFQUFBLEdBQUFBLEVBQUF6QyxlQUFBeEIsR0FBQSxDQUFtQyxJQUFBQyxFQUFBZ0UsRUFBQWpFLEdBQVc2b0IsRUFBQXJuQixlQUFBeEIsSUFBQTZvQixFQUFBN29CLEtBQUFDLElBQUE0b0IsRUFBQTdvQixJQUFBZ2pCLEVBQUEsTUFBQWhqQixHQUFBNm9CLEVBQUE3b0IsR0FBQUMsRUFBQXlLLEdBQUEsR0FBd0VBLEdBQUFvZSxNQUMzUSxTQUFBNkIsRUFBQTFtQixFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBMm1CLFVBQWtCLElBQUE1cUIsRUFBQSxZQUFrQixJQUFBQyxFQUFBd3BCLEVBQUF6cEIsR0FBWSxJQUFBQyxFQUFBLFlBQWtCRCxFQUFBQyxFQUFBeUssR0FBT3pHLEVBQUEsT0FBQXlHLEdBQVksZ05BQUF6SyxLQUFBNHFCLFlBQUE1cUIsSUFBQSxZQUFBZ0UsSUFBQTdCLE9BQUEsVUFBQTZCLEdBQUEsV0FBQUEsR0FBQSxhQUFBQSxJQUFrVEEsR0FBQWhFLEVBQUssTUFBQWdFLEVBQVEsUUFBQUEsR0FBQSxFQUFhLE9BQUFBLEVBQUEsTUFBaUJqRSxHQUFBLG1CQUFBQSxHQUFBZ2pCLEVBQUEsTUFBQXRZLFNBQUExSyxHQUNuY0EsR0FBUyxTQUFBOHFCLEVBQUE3bUIsR0FBb0QsR0FBckMsT0FBQUEsSUFBQWdtQixFQUFBRixFQUFBRSxFQUFBaG1CLElBQXdCQSxFQUFBZ21CLEVBQUtBLEVBQUEsS0FBUWhtQixJQUFBK2xCLEVBQUEvbEIsRUFBQWltQixHQUFBRCxHQUFBakgsRUFBQSxNQUFBMEMsR0FBQSxNQUFBemhCLEVBQUF1a0IsRUFBQTlDLEdBQUEsRUFBQThDLEVBQUEsS0FBQXZrQixFQUFrRSxJQUFBOG1CLEVBQUFwbkIsS0FBQXdCLFNBQUFDLFNBQUEsSUFBQXVCLE1BQUEsR0FBQXFrQixFQUFBLDJCQUFBRCxFQUFBRSxFQUFBLHdCQUFBRixFQUEwRyxTQUFBRyxFQUFBam5CLEdBQWUsR0FBQUEsRUFBQSttQixHQUFBLE9BQUEvbUIsRUFBQSttQixHQUFzQixNQUFLL21CLEVBQUErbUIsSUFBTyxLQUFBL21CLEVBQUEyYixXQUFnQyxZQUFoQzNiLElBQUEyYixXQUF5RCxZQUFSM2IsSUFBQSttQixJQUFReGQsS0FBQSxJQUFBdkosRUFBQXVKLElBQUF2SixFQUFBLEtBQW1DLFNBQUFrbkIsRUFBQWxuQixHQUF1QixRQUFSQSxJQUFBK21CLEtBQVEsSUFBQS9tQixFQUFBdUosS0FBQSxJQUFBdkosRUFBQXVKLElBQUEsS0FBQXZKLEVBQzdZLFNBQUFtbkIsRUFBQW5uQixHQUFlLE9BQUFBLEVBQUF1SixLQUFBLElBQUF2SixFQUFBdUosSUFBQSxPQUFBdkosRUFBQTJtQixVQUEyQzVILEVBQUEsTUFBUSxTQUFBcUksRUFBQXBuQixHQUFlLE9BQUFBLEVBQUFnbkIsSUFBQSxLQUFtQixTQUFBSyxFQUFBcm5CLEdBQWUsR0FBQUEsSUFBQXNuQixhQUFjdG5CLEdBQUEsSUFBQUEsRUFBQXVKLEtBQW9CLE9BQUF2SixHQUFBLEtBQWdCLFNBQUF1bkIsRUFBQXZuQixFQUFBeUcsRUFBQTFLLElBQW1CMEssRUFBQWlnQixFQUFBMW1CLEVBQUFqRSxFQUFBeXJCLGVBQUF0Qyx3QkFBQXplLE9BQUExSyxFQUFBbXFCLG1CQUFBSixFQUFBL3BCLEVBQUFtcUIsbUJBQUF6ZixHQUFBMUssRUFBQW9xQixtQkFBQUwsRUFBQS9wQixFQUFBb3FCLG1CQUFBbm1CLElBQ3hMLFNBQUF5bkIsRUFBQXpuQixHQUFlLEdBQUFBLEtBQUF3bkIsZUFBQXRDLHdCQUFBLENBQWdELFFBQUF6ZSxFQUFBekcsRUFBQTBuQixZQUFBM3JCLEVBQUEsR0FBNkIwSyxHQUFFMUssRUFBQWdILEtBQUEwRCxLQUFBNGdCLEVBQUE1Z0IsR0FBbUIsSUFBQUEsRUFBQTFLLEVBQUF1SCxPQUFlLEVBQUFtRCxLQUFNOGdCLEVBQUF4ckIsRUFBQTBLLEdBQUEsV0FBQXpHLEdBQXVCLElBQUF5RyxFQUFBLEVBQVFBLEVBQUExSyxFQUFBdUgsT0FBV21ELElBQUE4Z0IsRUFBQXhyQixFQUFBMEssR0FBQSxVQUFBekcsSUFBMEIsU0FBQTJuQixFQUFBM25CLEVBQUF5RyxFQUFBMUssR0FBbUJpRSxHQUFBakUsS0FBQXlyQixlQUFBcEMsbUJBQUEzZSxFQUFBaWdCLEVBQUExbUIsRUFBQWpFLEVBQUF5ckIsZUFBQXBDLHFCQUFBcnBCLEVBQUFtcUIsbUJBQUFKLEVBQUEvcEIsRUFBQW1xQixtQkFBQXpmLEdBQUExSyxFQUFBb3FCLG1CQUFBTCxFQUFBL3BCLEVBQUFvcUIsbUJBQUFubUIsSUFBd0wsU0FBQTRuQixFQUFBNW5CLEdBQWVBLEtBQUF3bkIsZUFBQXBDLGtCQUFBdUMsRUFBQTNuQixFQUFBMG5CLFlBQUEsS0FBQTFuQixHQUNwYSxTQUFBNm5CLEVBQUE3bkIsR0FBZStsQixFQUFBL2xCLEVBQUF5bkIsR0FBUyxJQUFBSyxJQUFBLG9CQUFBcm9CLGdCQUFBd0ssV0FBQXhLLE9BQUF3SyxTQUFBRSxlQUF3RixTQUFBNGQsRUFBQS9uQixFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUEsR0FBd0YsT0FBL0VBLEVBQUFpRSxFQUFBZ29CLGVBQUF2aEIsRUFBQXVoQixjQUFtQ2pzQixFQUFBLFNBQUFpRSxHQUFBLFNBQUF5RyxFQUF5QjFLLEVBQUEsTUFBQWlFLEdBQUEsTUFBQXlHLEVBQW1CMUssRUFBUyxJQUFBa3NCLEVBQUEsQ0FBUUMsYUFBQUgsRUFBQSw0QkFBQUksbUJBQUFKLEVBQUEsa0NBQUFLLGVBQUFMLEVBQUEsOEJBQUFNLGNBQUFOLEVBQUEsK0JBQW1NTyxFQUFBLEdBQU1DLEVBQUEsR0FDL0wsU0FBQUMsRUFBQXhvQixHQUFlLEdBQUFzb0IsRUFBQXRvQixHQUFBLE9BQUFzb0IsRUFBQXRvQixHQUFzQixJQUFBaW9CLEVBQUFqb0IsR0FBQSxPQUFBQSxFQUFtQixJQUFBakUsRUFBQTBLLEVBQUF3aEIsRUFBQWpvQixHQUFjLElBQUFqRSxLQUFBMEssRUFBQSxHQUFBQSxFQUFBbEosZUFBQXhCLFNBQUF3c0IsRUFBQSxPQUFBRCxFQUFBdG9CLEdBQUF5RyxFQUFBMUssR0FBNkQsT0FBQWlFLEVBQXZYOG5CLElBQUFTLEVBQUF0ZSxTQUFBRSxjQUFBLE9BQUEwRixNQUFBLG1CQUFBcFEsZ0JBQUF3b0IsRUFBQUMsYUFBQU8saUJBQUFSLEVBQUFFLG1CQUFBTSxpQkFBQVIsRUFBQUcsZUFBQUssV0FBQSxvQkFBQWhwQixlQUFBd29CLEVBQUFJLGNBQUFLLFlBQ0EsSUFBQUMsRUFBQUgsRUFBQSxnQkFBQUksRUFBQUosRUFBQSxzQkFBQUssRUFBQUwsRUFBQSxrQkFBQU0sR0FBQU4sRUFBQSxpQkFBQU8sR0FBQSxzTkFBQTFuQixNQUFBLEtBQUEybkIsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FDQSxTQUFBQyxLQUFjLEdBQUFELEdBQUEsT0FBQUEsR0FBZ0IsSUFBQWxwQixFQUFBaEUsRUFBQXlLLEVBQUF3aUIsR0FBQWx0QixFQUFBMEssRUFBQW5ELE9BQUE5QyxFQUFBLFVBQUF3b0IsTUFBQXJzQixNQUFBcXNCLEdBQUFJLFlBQUEvb0IsRUFBQUcsRUFBQThDLE9BQTBFLElBQUF0RCxFQUFBLEVBQVFBLEVBQUFqRSxHQUFBMEssRUFBQXpHLEtBQUFRLEVBQUFSLEdBQWlCQSxLQUFLLElBQUFxVCxFQUFBdFgsRUFBQWlFLEVBQVUsSUFBQWhFLEVBQUEsRUFBUUEsR0FBQXFYLEdBQUE1TSxFQUFBMUssRUFBQUMsS0FBQXdFLEVBQUFILEVBQUFyRSxHQUFzQkEsS0FBSyxPQUFBa3RCLEdBQUExb0IsRUFBQWtDLE1BQUExQyxFQUFBLEVBQUFoRSxFQUFBLEVBQUFBLE9BQUEsR0FBb0MsU0FBQXF0QixLQUFjLFNBQVMsU0FBQUMsS0FBYyxTQUM1UCxTQUFBdEssR0FBQWhmLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBNkcsUUFBQXdFLEtBQXpGdUQsS0FBQXlqQixlQUFBeG5CLEVBQXNCK0QsS0FBQTJqQixZQUFBamhCLEVBQW1CMUMsS0FBQXdsQixZQUFBeHRCLEVBQW1CaUUsRUFBQStELEtBQUFtYyxZQUFBc0osVUFBNkJ4cEIsRUFBQXpDLGVBQUFpRCxNQUFBaUcsRUFBQXpHLEVBQUFRLElBQUF1RCxLQUFBdkQsR0FBQWlHLEVBQUExSyxHQUFBLFdBQUF5RSxFQUFBdUQsS0FBQTdFLE9BQUFsRCxFQUFBK0gsS0FBQXZELEdBQUF6RSxFQUFBeUUsSUFBZ08sT0FBNUh1RCxLQUFBMGxCLG9CQUFBLE1BQUExdEIsRUFBQTJ0QixpQkFBQTN0QixFQUFBMnRCLGtCQUFBLElBQUEzdEIsRUFBQTR0QixhQUFBTixHQUFBQyxHQUErRnZsQixLQUFBcWlCLHFCQUFBa0QsR0FBNkJ2bEIsS0FHOUUsU0FBQTZsQixHQUFBNXBCLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBcUIsR0FBQStILEtBQUE4bEIsVUFBQXZtQixPQUFBLENBQTBCLElBQUE5QyxFQUFBdUQsS0FBQThsQixVQUFBNUksTUFBZ0QsT0FBckJsZCxLQUFBbEksS0FBQTJFLEVBQUFSLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBcUJ3RSxFQUFTLFdBQUF1RCxLQUFBL0QsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUF5QixTQUFBOHRCLEdBQUE5cEIsR0FBZUEsYUFBQStELE1BQUFnYixFQUFBLE9BQWtDL2UsRUFBQStwQixhQUFlLEdBQUFobUIsS0FBQThsQixVQUFBdm1CLFFBQUFTLEtBQUE4bEIsVUFBQTltQixLQUFBL0MsR0FDaGMsU0FBQWdxQixHQUFBaHFCLEdBQWVBLEVBQUE2cEIsVUFBQSxHQUFlN3BCLEVBQUFpcUIsVUFBQUwsR0FBZTVwQixFQUFBc21CLFFBQUF3RCxHQUg3QzNzQixFQUFBNmhCLEdBQUExaEIsVUFBQSxDQUFlNHNCLGVBQUEsV0FBMEJubUIsS0FBQTJsQixrQkFBQSxFQUF5QixJQUFBMXBCLEVBQUErRCxLQUFBd2xCLFlBQXVCdnBCLE1BQUFrcUIsZUFBQWxxQixFQUFBa3FCLGlCQUFBLGtCQUFBbHFCLEVBQUEycEIsY0FBQTNwQixFQUFBMnBCLGFBQUEsR0FBQTVsQixLQUFBMGxCLG1CQUFBSixLQUF5SGMsZ0JBQUEsV0FBNEIsSUFBQW5xQixFQUFBK0QsS0FBQXdsQixZQUF1QnZwQixNQUFBbXFCLGdCQUFBbnFCLEVBQUFtcUIsa0JBQUEsa0JBQUFucUIsRUFBQW9xQixlQUFBcHFCLEVBQUFvcUIsY0FBQSxHQUFBcm1CLEtBQUFxaUIscUJBQUFpRCxLQUErSGdCLFFBQUEsV0FBb0J0bUIsS0FBQXNpQixhQUFBZ0QsSUFBcUJoRCxhQUFBaUQsR0FBQVMsV0FBQSxXQUF1QyxJQUNwZHRqQixFQURvZHpHLEVBQUErRCxLQUFBbWMsWUFBQXNKLFVBQ2xkLElBQUEvaUIsS0FBQXpHLEVBQUErRCxLQUFBMEMsR0FBQSxLQUF3QjFDLEtBQUF3bEIsWUFBQXhsQixLQUFBMmpCLFlBQUEzakIsS0FBQXlqQixlQUFBLEtBQTJEempCLEtBQUFxaUIscUJBQUFyaUIsS0FBQTBsQixtQkFBQUgsR0FBcUR2bEIsS0FBQW9pQixtQkFBQXBpQixLQUFBbWlCLG1CQUFBLFFBQXdEbEgsR0FBQXdLLFVBQUEsQ0FBYXJyQixLQUFBLEtBQUFlLE9BQUEsS0FBQTBtQixjQUFBLFdBQStDLGFBQVkwRSxXQUFBLEtBQUFDLFFBQUEsS0FBQUMsV0FBQSxLQUFBQyxVQUFBLFNBQUF6cUIsR0FBb0UsT0FBQUEsRUFBQXlxQixXQUFBQyxLQUFBL1UsT0FBK0IrVCxpQkFBQSxLQUFBaUIsVUFBQSxNQUM3VzNMLEdBQUE0TCxPQUFBLFNBQUE1cUIsR0FBcUIsU0FBQXlHLEtBQWMsU0FBQTFLLElBQWEsT0FBQUMsRUFBQXFKLE1BQUF0QixLQUFBN0IsV0FBK0IsSUFBQWxHLEVBQUErSCxLQUFXMEMsRUFBQW5KLFVBQUF0QixFQUFBc0IsVUFBd0IsSUFBQWtELEVBQUEsSUFBQWlHLEVBQTZILE9BQWpIdEosRUFBQXFELEVBQUF6RSxFQUFBdUIsV0FBaUJ2QixFQUFBdUIsVUFBQWtELEVBQWN6RSxFQUFBdUIsVUFBQTRpQixZQUFBbmtCLEVBQTBCQSxFQUFBeXRCLFVBQUFyc0IsRUFBQSxHQUFnQm5CLEVBQUF3dEIsVUFBQXhwQixHQUFnQmpFLEVBQUE2dUIsT0FBQTV1QixFQUFBNHVCLE9BQWtCWixHQUFBanVCLEdBQU1BLEdBQVVpdUIsR0FBQWhMLElBQy9MLElBQUE2TCxHQUFBN0wsR0FBQTRMLE9BQUEsQ0FBaUJuVixLQUFBLE9BQVVxVixHQUFBOUwsR0FBQTRMLE9BQUEsQ0FBZW5WLEtBQUEsT0FBVXNWLEdBQUEsYUFBQUMsR0FBQWxELEdBQUEscUJBQUFyb0IsT0FBQXdyQixHQUFBLEtBQTZEbkQsR0FBQSxpQkFBQTdkLFdBQUFnaEIsR0FBQWhoQixTQUFBaWhCLGNBQzNLLElBQUFDLEdBQUFyRCxHQUFBLGNBQUFyb0IsU0FBQXdyQixHQUFBRyxHQUFBdEQsS0FBQWtELElBQUFDLElBQUEsRUFBQUEsSUFBQSxJQUFBQSxJQUFBSSxHQUFBbm5CLE9BQUE0TyxhQUFBLElBQUF3WSxHQUFBLENBQW1HQyxZQUFBLENBQWFyRyx3QkFBQSxDQUF5QnNHLFFBQUEsZ0JBQUFDLFNBQUEsd0JBQXdEbEcsYUFBQSxtREFBZ0VtRyxlQUFBLENBQWlCeEcsd0JBQUEsQ0FBeUJzRyxRQUFBLG1CQUFBQyxTQUFBLDJCQUE4RGxHLGFBQUEsdURBQUFsa0IsTUFBQSxNQUFnRnNxQixpQkFBQSxDQUFtQnpHLHdCQUFBLENBQXlCc0csUUFBQSxxQkFDcmVDLFNBQUEsNkJBQXFDbEcsYUFBQSx5REFBQWxrQixNQUFBLE1BQWtGdXFCLGtCQUFBLENBQW9CMUcsd0JBQUEsQ0FBeUJzRyxRQUFBLHNCQUFBQyxTQUFBLDhCQUFvRWxHLGFBQUEsMERBQUFsa0IsTUFBQSxPQUFvRndxQixJQUFBLEVBQzVULFNBQUFDLEdBQUE5ckIsRUFBQXlHLEdBQWlCLE9BQUF6RyxHQUFVLHVCQUFBK3FCLEdBQUE5bkIsUUFBQXdELEVBQUFzbEIsU0FBOEMsMkJBQUF0bEIsRUFBQXNsQixRQUFzQyxtREFBc0Qsa0JBQWtCLFNBQUFDLEdBQUFoc0IsR0FBMEIsdUJBQVhBLElBQUFpc0IsU0FBVyxTQUFBanNCLElBQUF5VixLQUFBLEtBQWtELElBQUF5VyxJQUFBLEVBRW5RLElBQUFDLEdBQUEsQ0FBUW5ILFdBQUFzRyxHQUFBdkcsY0FBQSxTQUFBL2tCLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBOEMsSUFBQXdFLE9BQUEsRUFBYUgsT0FBQSxFQUFhLEdBQUEycUIsR0FBQXZrQixFQUFBLENBQVMsT0FBQXpHLEdBQVUsdUJBQUFRLEVBQUE4cUIsR0FBQUssaUJBQThDLE1BQUFsbEIsRUFBUSxxQkFBQWpHLEVBQUE4cUIsR0FBQUksZUFBMEMsTUFBQWpsQixFQUFRLHdCQUFBakcsRUFBQThxQixHQUFBTSxrQkFBZ0QsTUFBQW5sQixFQUFRakcsT0FBQSxPQUFTMHJCLEdBQUFKLEdBQUE5ckIsRUFBQWpFLEtBQUF5RSxFQUFBOHFCLEdBQUFJLGdCQUFBLFlBQUExckIsR0FBQSxNQUFBakUsRUFBQWd3QixVQUFBdnJCLEVBQUE4cUIsR0FBQUssa0JBQy9GLE9BRDhMbnJCLEdBQUE0cUIsSUFBQSxPQUFBcnZCLEVBQUFxd0IsU0FBQUYsSUFBQTFyQixJQUFBOHFCLEdBQUFLLGlCQUFBbnJCLElBQUE4cUIsR0FBQUksZ0JBQUFRLEtBQUE3ckIsRUFBQThvQixPQUFBRixHQUFBLFVBQUFELEdBQUFodEIsR0FBQWd0QixHQUFBcnNCLE1BQUFxc0IsR0FBQUksWUFBQThDLElBQzNXLElBQUExckIsRUFBQXFxQixHQUFBWixVQUFBenBCLEVBQUFpRyxFQUFBMUssRUFBQUMsR0FBQXFFLEVBQUFHLEVBQUFpVixLQUFBcFYsRUFBQSxRQUFBQSxFQUFBMnJCLEdBQUFqd0IsTUFBQXlFLEVBQUFpVixLQUFBcFYsR0FBQXduQixFQUFBcm5CLEdBQUFILEVBQUFHLEdBQUFILEVBQUEsTUFBeUZMLEVBQUFtckIsR0FIb0wsU0FBQW5yQixFQUFBeUcsR0FBaUIsT0FBQXpHLEdBQVUsNEJBQUFnc0IsR0FBQXZsQixHQUFtQywyQkFBQUEsRUFBQTRsQixNQUFBLE1BQTRDUixJQUFBLEVBQU1SLElBQVUsdUJBQUFyckIsRUFBQXlHLEVBQUFnUCxRQUFBNFYsSUFBQVEsR0FBQSxLQUFBN3JCLEVBQW1ELHFCQUdqV3NzQixDQUFBdHNCLEVBQUFqRSxHQUZ6RixTQUFBaUUsRUFBQXlHLEdBQWlCLEdBQUF5bEIsR0FBQSx5QkFBQWxzQixJQUFBZ3JCLElBQUFjLEdBQUE5ckIsRUFBQXlHLElBQUF6RyxFQUFBbXBCLEtBQUFELEdBQUFELEdBQUFELEdBQUEsS0FBQWtELElBQUEsRUFBQWxzQixHQUFBLEtBQW1GLE9BQUFBLEdBQVUsd0JBQXlCLG9CQUFBeUcsRUFBQThsQixTQUFBOWxCLEVBQUErbEIsUUFBQS9sQixFQUFBZ21CLFVBQUFobUIsRUFBQThsQixTQUFBOWxCLEVBQUErbEIsT0FBQSxDQUEyRSxHQUFBL2xCLEVBQUFpbUIsTUFBQSxFQUFBam1CLEVBQUFpbUIsS0FBQXBwQixPQUFBLE9BQUFtRCxFQUFBaW1CLEtBQXlDLEdBQUFqbUIsRUFBQTRsQixNQUFBLE9BQUFub0IsT0FBQTRPLGFBQUFyTSxFQUFBNGxCLE9BQStDLFlBQVksNEJBQUFqQixJQUFBLE9BQUEza0IsRUFBQTJsQixPQUFBLEtBQUEzbEIsRUFBQWdQLEtBQTZELHFCQUUxUmtYLENBQUEzc0IsRUFBQWpFLE1BQUEwSyxFQUFBcWtCLEdBQUFiLFVBQUFxQixHQUFBQyxZQUFBOWtCLEVBQUExSyxFQUFBQyxJQUFBeVosS0FBQXpWLEVBQUE2bkIsRUFBQXBoQixNQUFBLEtBQW9GLE9BQUFwRyxFQUFBb0csRUFBQSxPQUFBQSxFQUFBcEcsRUFBQSxDQUFBQSxFQUFBb0csS0FBb0NtbUIsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBeUIsU0FBQUMsR0FBQS9zQixHQUFlLEdBQUFBLEVBQUF5bEIsRUFBQXpsQixHQUFBLENBQVksbUJBQUE0c0IsSUFBQTdOLEVBQUEsT0FBdUMsSUFBQXRZLEVBQUErZSxFQUFBeGxCLEVBQUEybUIsV0FBc0JpRyxHQUFBNXNCLEVBQUEybUIsVUFBQTNtQixFQUFBN0IsS0FBQXNJLElBQTBCLFNBQUF1bUIsR0FBQWh0QixHQUFlNnNCLEdBQUFDLE1BQUEvcEIsS0FBQS9DLEdBQUE4c0IsR0FBQSxDQUFBOXNCLEdBQUE2c0IsR0FBQTdzQixFQUE2QixTQUFBaXRCLEtBQWMsR0FBQUosR0FBQSxDQUFPLElBQUE3c0IsRUFBQTZzQixHQUFBcG1CLEVBQUFxbUIsR0FBK0IsR0FBakJBLEdBQUFELEdBQUEsS0FBV0UsR0FBQS9zQixHQUFNeUcsRUFBQSxJQUFBekcsRUFBQSxFQUFhQSxFQUFBeUcsRUFBQW5ELE9BQVd0RCxJQUFBK3NCLEdBQUF0bUIsRUFBQXpHLEtBQ3BkLFNBQUFrdEIsR0FBQWx0QixFQUFBeUcsR0FBaUIsT0FBQXpHLEVBQUF5RyxHQUFZLFNBQUEwbUIsR0FBQW50QixFQUFBeUcsRUFBQTFLLEdBQW1CLE9BQUFpRSxFQUFBeUcsRUFBQTFLLEdBQWMsU0FBQXF4QixNQUFlLElBQUFDLElBQUEsRUFBVSxTQUFBQyxHQUFBdHRCLEVBQUF5RyxHQUFpQixHQUFBNG1CLEdBQUEsT0FBQXJ0QixFQUFBeUcsR0FBa0I0bUIsSUFBQSxFQUFNLElBQUksT0FBQUgsR0FBQWx0QixFQUFBeUcsR0FBZSxRQUFRNG1CLElBQUEsVUFBQVIsSUFBQSxPQUFBQyxNQUFBTSxLQUFBSCxPQUF5QyxJQUFBTSxHQUFBLENBQVFDLE9BQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLGtCQUFBLEVBQUFDLE9BQUEsRUFBQUMsT0FBQSxFQUFBQyxRQUFBLEVBQUFDLFVBQUEsRUFBQUMsT0FBQSxFQUFBQyxRQUFBLEVBQUFDLEtBQUEsRUFBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUFDLEtBQUEsRUFBQUMsTUFBQSxHQUFtSixTQUFBQyxHQUFBdnVCLEdBQWUsSUFBQXlHLEVBQUF6RyxLQUFBd3VCLFVBQUF4dUIsRUFBQXd1QixTQUFBeEcsY0FBOEMsZ0JBQUF2aEIsSUFBQThtQixHQUFBdnRCLEVBQUE3QixNQUFBLGFBQUFzSSxFQUM1WixTQUFBZ29CLEdBQUF6dUIsR0FBeUcsT0FBMUZBLElBQUFkLFFBQUFjLEVBQUEwdUIsWUFBQWp2QixRQUFpQ2t2QiwwQkFBQTN1QixJQUFBMnVCLHlCQUF5RCxJQUFBM3VCLEVBQUE0dUIsU0FBQTV1QixFQUFBMmIsV0FBQTNiLEVBQXFDLFNBQUE2dUIsR0FBQTd1QixHQUFlLElBQUE4bkIsRUFBQSxTQUF5QixJQUFBcmhCLEdBQVR6RyxFQUFBLEtBQUFBLEtBQVNpSyxTQUFnSCxPQUE1RnhELE9BQUF3RCxTQUFBRSxjQUFBLFFBQUFpUyxhQUFBcGMsRUFBQSxXQUE2RHlHLEVBQUEsbUJBQUFBLEVBQUF6RyxJQUErQnlHLEVBQVMsU0FBQXFvQixHQUFBOXVCLEdBQWUsSUFBQXlHLEVBQUF6RyxFQUFBN0IsS0FBYSxPQUFBNkIsSUFBQXd1QixXQUFBLFVBQUF4dUIsRUFBQWdvQixnQkFBQSxhQUFBdmhCLEdBQUEsVUFBQUEsR0FFdlQsU0FBQXNvQixHQUFBL3VCLEdBQWVBLEVBQUFndkIsZ0JBQUFodkIsRUFBQWd2QixjQURuQyxTQUFBaHZCLEdBQWUsSUFBQXlHLEVBQUFxb0IsR0FBQTl1QixHQUFBLGtCQUFBakUsRUFBQUssT0FBQTRKLHlCQUFBaEcsRUFBQWtnQixZQUFBNWlCLFVBQUFtSixHQUFBekssRUFBQSxHQUFBZ0UsRUFBQXlHLEdBQXFHLElBQUF6RyxFQUFBekMsZUFBQWtKLFNBQUEsSUFBQTFLLEdBQUEsbUJBQUFBLEVBQUFRLEtBQUEsbUJBQUFSLEVBQUE0UyxJQUFBLENBQXVHLElBQUFuTyxFQUFBekUsRUFBQVEsSUFBQThELEVBQUF0RSxFQUFBNFMsSUFBaU0sT0FBN0t2UyxPQUFBQyxlQUFBMkQsRUFBQXlHLEVBQUEsQ0FBMkJoQixjQUFBLEVBQUFsSixJQUFBLFdBQStCLE9BQUFpRSxFQUFBM0UsS0FBQWtJLE9BQW9CNEssSUFBQSxTQUFBM08sR0FBaUJoRSxFQUFBLEdBQUFnRSxFQUFPSyxFQUFBeEUsS0FBQWtJLEtBQUEvRCxNQUFrQjVELE9BQUFDLGVBQUEyRCxFQUFBeUcsRUFBQSxDQUEyQm5LLFdBQUFQLEVBQUFPLGFBQTBCLENBQU8yeUIsU0FBQSxXQUFvQixPQUFBanpCLEdBQVNrekIsU0FBQSxTQUFBbHZCLEdBQXNCaEUsRUFBQSxHQUFBZ0UsR0FBT212QixhQUFBLFdBQXlCbnZCLEVBQUFndkIsY0FDdGYsWUFBS2h2QixFQUFBeUcsTUFBOEIyb0IsQ0FBQXB2QixJQUF5QyxTQUFBcXZCLEdBQUFydkIsR0FBZSxJQUFBQSxFQUFBLFNBQWUsSUFBQXlHLEVBQUF6RyxFQUFBZ3ZCLGNBQXNCLElBQUF2b0IsRUFBQSxTQUFlLElBQUExSyxFQUFBMEssRUFBQXdvQixXQUFtQmp6QixFQUFBLEdBQTJELE9BQWxEZ0UsSUFBQWhFLEVBQUE4eUIsR0FBQTl1QixLQUFBc3ZCLFFBQUEsZUFBQXR2QixFQUFBckQsUUFBOENxRCxFQUFBaEUsS0FBSUQsSUFBQTBLLEVBQUF5b0IsU0FBQWx2QixJQUFBLEdBQW1DLElBQUF1dkIsR0FBQXJRLEVBQUFnRixtREFBNkRxTCxHQUFBaHlCLGVBQUEsNEJBQUFneUIsR0FBQXBMLHVCQUFBLENBQXlFOUQsUUFBQSxPQUN0WSxJQUFBbVAsR0FBQSxjQUFBdlEsR0FBQSxtQkFBQXhpQixlQUFBdVMsSUFBQXlnQixHQUFBeFEsR0FBQXhpQixPQUFBdVMsSUFBQSx1QkFBQTBnQixHQUFBelEsR0FBQXhpQixPQUFBdVMsSUFBQSxzQkFBQTJnQixHQUFBMVEsR0FBQXhpQixPQUFBdVMsSUFBQSx3QkFBQTRnQixHQUFBM1EsR0FBQXhpQixPQUFBdVMsSUFBQSwyQkFBQTZnQixHQUFBNVEsR0FBQXhpQixPQUFBdVMsSUFBQSx3QkFBQThnQixHQUFBN1EsR0FBQXhpQixPQUFBdVMsSUFBQSx3QkFBQStnQixHQUFBOVEsR0FBQXhpQixPQUFBdVMsSUFBQSx1QkFBQWdoQixHQUFBL1EsR0FBQXhpQixPQUFBdVMsSUFBQSwrQkFBQWloQixHQUFBaFIsR0FBQXhpQixPQUFBdVMsSUFBQSwyQkFBQWtoQixHQUFBalIsR0FBQXhpQixPQUFBdVMsSUFBQSx3QkFBQW1oQixHQUFBbFIsR0FBQXhpQixPQUFBdVMsSUFBQSxjQUNBLE1BQUFvaEIsR0FBQW5SLEdBQUF4aUIsT0FBQXVTLElBQUEsb0JBQUFxaEIsR0FBQSxtQkFBQTV6QixlQUFBdVIsU0FBeUYsU0FBQXNpQixHQUFBdHdCLEdBQWUsY0FBQUEsR0FBQSxpQkFBQUEsRUFBQSxLQUEwRSxtQkFBN0JBLEVBQUFxd0IsSUFBQXJ3QixFQUFBcXdCLEtBQUFyd0IsRUFBQSxlQUE2QkEsRUFBQSxLQUNsTCxTQUFBdXdCLEdBQUF2d0IsR0FBZSxTQUFBQSxFQUFBLFlBQXVCLHNCQUFBQSxFQUFBLE9BQUFBLEVBQUE2USxhQUFBN1EsRUFBQS9ELE1BQUEsS0FBNEQsb0JBQUErRCxFQUFBLE9BQUFBLEVBQWdDLE9BQUFBLEdBQVUsS0FBQWd3QixHQUFBLHVCQUErQixLQUFBTCxHQUFBLGlCQUF5QixLQUFBRCxHQUFBLGVBQXVCLEtBQUFHLEdBQUEsaUJBQXlCLEtBQUFELEdBQUEsbUJBQTJCLEtBQUFNLEdBQUEsaUJBQXlCLG9CQUFBbHdCLEVBQUEsT0FBQUEsRUFBQXVSLFVBQTBDLEtBQUF3ZSxHQUFBLHlCQUFpQyxLQUFBRCxHQUFBLHlCQUFpQyxLQUFBRyxHQUFBLElBQUF4cEIsRUFBQXpHLEVBQUE4UixPQUFtRCxPQUE1QnJMLElBQUFvSyxhQUFBcEssRUFBQXhLLE1BQUEsR0FBNEIrRCxFQUFBNlEsY0FBQSxLQUFBcEssRUFBQSxjQUFBQSxFQUN2YyxrQkFBa0IsS0FBQTBwQixHQUFBLE9BQUFJLEdBQUF2d0IsRUFBQTdCLE1BQTBCLEtBQUFpeUIsR0FBQSxHQUFBcHdCLEVBQUEsSUFBQUEsRUFBQThpQixRQUFBOWlCLEVBQUEraUIsUUFBQSxZQUFBd04sR0FBQXZ3QixHQUF1RCxZQUFZLFNBQUF3d0IsR0FBQXh3QixHQUFlLElBQUF5RyxFQUFBLEdBQVMsR0FBR3pHLEVBQUEsT0FBQUEsRUFBQXVKLEtBQWdCLCtDQUFBeE4sRUFBQSxHQUFvRCxNQUFBaUUsRUFBUSxZQUFBaEUsRUFBQWdFLEVBQUF5d0IsWUFBQWp3QixFQUFBUixFQUFBMHdCLGFBQUFyd0IsRUFBQWt3QixHQUFBdndCLEVBQUE3QixNQUEwRHBDLEVBQUEsS0FBT0MsSUFBQUQsRUFBQXcwQixHQUFBdjBCLEVBQUFtQyxPQUFrQm5DLEVBQUFxRSxFQUFJQSxFQUFBLEdBQUtHLEVBQUFILEVBQUEsUUFBQUcsRUFBQW13QixTQUFBdHBCLFFBQUFtb0IsR0FBQSxRQUFBaHZCLEVBQUFvd0IsV0FBQSxJQUFBNzBCLElBQUFzRSxFQUFBLGdCQUFBdEUsRUFBQSxLQUF3RkEsRUFBQSxhQUFBQyxHQUFBLFdBQUFxRSxFQUErQm9HLEdBQUExSyxFQUFLaUUsSUFBQXNuQixhQUFXdG5CLEdBQVMsT0FBQXlHLEVBQ2xjLElBQUFvcUIsR0FBQSw4VkFBQUMsR0FBQTEwQixPQUFBa0IsVUFBQUMsZUFBQXd6QixHQUFBLEdBQTZZL1UsR0FBQSxHQUVyTCxTQUFBekYsR0FBQXZXLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQXNCdUQsS0FBQWl0QixnQkFBQSxJQUFBdnFCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQUF5QzFDLEtBQUFrdEIsY0FBQWoxQixFQUFxQitILEtBQUFtdEIsbUJBQUExd0IsRUFBMEJ1RCxLQUFBb3RCLGdCQUFBcDFCLEVBQXVCZ0ksS0FBQXF0QixhQUFBcHhCLEVBQW9CK0QsS0FBQTVGLEtBQUFzSSxFQUFZLElBQUFrSCxHQUFBLEdBQzdYLHVJQUFBdE0sTUFBQSxLQUFBb0QsUUFBQSxTQUFBekUsR0FBc0syTixHQUFBM04sR0FBQSxJQUFBdVcsR0FBQXZXLEVBQUEsS0FBQUEsRUFBQSxRQUE0Qix3R0FBQXlFLFFBQUEsU0FBQXpFLEdBQTRILElBQUF5RyxFQUFBekcsRUFBQSxHQUFXMk4sR0FBQWxILEdBQUEsSUFBQThQLEdBQUE5UCxFQUFBLEtBQUF6RyxFQUFBLFdBQStCLHFEQUFBeUUsUUFBQSxTQUFBekUsR0FBeUUyTixHQUFBM04sR0FBQSxJQUFBdVcsR0FBQXZXLEVBQUEsS0FBQUEsRUFBQWdvQixjQUFBLFFBQ2piLHdFQUFBdmpCLFFBQUEsU0FBQXpFLEdBQTRGMk4sR0FBQTNOLEdBQUEsSUFBQXVXLEdBQUF2VyxFQUFBLEtBQUFBLEVBQUEsUUFBNEIsZ01BQUFxQixNQUFBLEtBQUFvRCxRQUFBLFNBQUF6RSxHQUErTjJOLEdBQUEzTixHQUFBLElBQUF1VyxHQUFBdlcsRUFBQSxLQUFBQSxFQUFBZ29CLGNBQUEsUUFBMEMsMENBQUF2akIsUUFBQSxTQUFBekUsR0FBOEQyTixHQUFBM04sR0FBQSxJQUFBdVcsR0FBQXZXLEVBQUEsS0FBQUEsRUFBQSxRQUMvYix1QkFBQXlFLFFBQUEsU0FBQXpFLEdBQTJDMk4sR0FBQTNOLEdBQUEsSUFBQXVXLEdBQUF2VyxFQUFBLEtBQUFBLEVBQUEsUUFBNEIsOEJBQUF5RSxRQUFBLFNBQUF6RSxHQUFrRDJOLEdBQUEzTixHQUFBLElBQUF1VyxHQUFBdlcsRUFBQSxLQUFBQSxFQUFBLFFBQTRCLG9CQUFBeUUsUUFBQSxTQUFBekUsR0FBd0MyTixHQUFBM04sR0FBQSxJQUFBdVcsR0FBQXZXLEVBQUEsS0FBQUEsRUFBQWdvQixjQUFBLFFBQTBDLElBQUFxSixHQUFBLGdCQUF1QixTQUFBQyxHQUFBdHhCLEdBQWUsT0FBQUEsRUFBQSxHQUFBdXhCLGNBRzdRLFNBQUFDLEdBQUF4eEIsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFxQixJQUFBd0UsRUFBQW1OLEdBQUFwUSxlQUFBa0osR0FBQWtILEdBQUFsSCxHQUFBLE1BQW9DLE9BQUFqRyxFQUFBLElBQUFBLEVBQUFyQyxNQUFBbkMsSUFBQSxFQUFBeUssRUFBQW5ELFNBQUEsTUFBQW1ELEVBQUEsVUFBQUEsRUFBQSxZQUFBQSxFQUFBLFVBQUFBLEVBQUEsUUFOekQsU0FBQXpHLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBcUIsU0FBQXlLLEdBRDhGLFNBQUF6RyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQXFCLFVBQUFELEdBQUEsSUFBQUEsRUFBQW9DLEtBQUEsU0FBaUMsY0FBQXNJLEdBQWlCLHFDQUF1QyxxQkFBQXpLLElBQTZCLE9BQUFELEtBQUFpMUIsZ0JBQWtFLFdBQTdCaHhCLElBQUFnb0IsY0FBQXRsQixNQUFBLE9BQTZCLFVBQUExQyxHQUErQixrQkFDMVV5eEIsQ0FBQXp4QixFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQUEsU0FBMEQsR0FBQUEsRUFBQSxTQUFjLFVBQUFELEVBQUEsT0FBQUEsRUFBQW9DLE1BQTJCLGNBQUFzSSxFQUFnQixrQkFBQUEsRUFBb0IsY0FBQWlOLE1BQUFqTixHQUF1QixjQUFBaU4sTUFBQWpOLElBQUEsRUFBQUEsRUFBNEIsU0FNbkRpckIsQ0FBQWpyQixFQUFBMUssRUFBQXlFLEVBQUF4RSxLQUFBRCxFQUFBLE1BQUFDLEdBQUEsT0FBQXdFLEVBUDVKLFNBQUFSLEdBQWUsUUFBQTh3QixHQUFBajFCLEtBQUFtZ0IsR0FBQWhjLEtBQTBCOHdCLEdBQUFqMUIsS0FBQWsxQixHQUFBL3dCLEtBQTBCNndCLEdBQUF2YyxLQUFBdFUsR0FBQWdjLEdBQUFoYyxJQUFBLEdBQThCK3dCLEdBQUEvd0IsSUFBQSxHQUFTLElBT2tEMnhCLENBQUFsckIsS0FBQSxPQUFBMUssRUFBQWlFLEVBQUE0eEIsZ0JBQUFuckIsR0FBQXpHLEVBQUFvYyxhQUFBM1YsRUFBQSxHQUFBMUssSUFBQXlFLEVBQUEyd0IsZ0JBQUFueEIsRUFBQVEsRUFBQTR3QixjQUFBLE9BQUFyMUIsRUFBQSxJQUFBeUUsRUFBQXJDLE1BQUEsR0FBQXBDLEdBQUEwSyxFQUFBakcsRUFBQXl3QixjQUFBajFCLEVBQUF3RSxFQUFBMHdCLG1CQUFBLE9BQUFuMUIsRUFBQWlFLEVBQUE0eEIsZ0JBQUFuckIsSUFBQTFLLEVBQUEsS0FBQXlFLElBQUFyQyxPQUFBLElBQUFxQyxJQUFBLElBQUF6RSxFQUFBLE1BQUFBLEVBQUFDLEVBQUFnRSxFQUFBNnhCLGVBQUE3MUIsRUFBQXlLLEVBQUExSyxHQUFBaUUsRUFBQW9jLGFBQUEzVixFQUFBMUssTUFDNUosU0FBQSsxQixHQUFBOXhCLEdBQWUsY0FBQUEsR0FBaUIsNEVBQUFBLEVBQW1GLGtCQUFrQixTQUFBK3hCLEdBQUEveEIsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBMEssRUFBQTZvQixRQUFnQixPQUFBbnlCLEVBQUEsR0FBV3NKLEVBQUEsQ0FBSXVyQixvQkFBQSxFQUFBQyxrQkFBQSxFQUFBdDFCLFdBQUEsRUFBQTJ5QixRQUFBLE1BQUF2ekIsSUFBQWlFLEVBQUFreUIsY0FBQUMsaUJBQ3JMLFNBQUFDLEdBQUFweUIsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBLE1BQUEwSyxFQUFBd3JCLGFBQUEsR0FBQXhyQixFQUFBd3JCLGFBQUFqMkIsRUFBQSxNQUFBeUssRUFBQTZvQixRQUFBN29CLEVBQUE2b0IsUUFBQTdvQixFQUFBdXJCLGVBQTBGajJCLEVBQUErMUIsR0FBQSxNQUFBcnJCLEVBQUE5SixNQUFBOEosRUFBQTlKLE1BQUFaLEdBQThCaUUsRUFBQWt5QixjQUFBLENBQWlCQyxlQUFBbjJCLEVBQUFxMkIsYUFBQXQyQixFQUFBdTJCLFdBQUEsYUFBQTdyQixFQUFBdEksTUFBQSxVQUFBc0ksRUFBQXRJLEtBQUEsTUFBQXNJLEVBQUE2b0IsUUFBQSxNQUFBN29CLEVBQUE5SixPQUFnSCxTQUFBNDFCLEdBQUF2eUIsRUFBQXlHLEdBQTZCLE9BQVpBLElBQUE2b0IsVUFBWWtDLEdBQUF4eEIsRUFBQSxVQUFBeUcsR0FBQSxHQUN2UyxTQUFBK3JCLEdBQUF4eUIsRUFBQXlHLEdBQWlCOHJCLEdBQUF2eUIsRUFBQXlHLEdBQVEsSUFBQTFLLEVBQUErMUIsR0FBQXJyQixFQUFBOUosT0FBQVgsRUFBQXlLLEVBQUF0SSxLQUEyQixTQUFBcEMsRUFBQSxXQUFBQyxHQUE0QixJQUFBRCxHQUFBLEtBQUFpRSxFQUFBckQsT0FBQXFELEVBQUFyRCxPQUFBWixLQUFBaUUsRUFBQXJELE1BQUEsR0FBQVosR0FBZ0RpRSxFQUFBckQsUUFBQSxHQUFBWixJQUFBaUUsRUFBQXJELE1BQUEsR0FBQVosUUFBb0MsY0FBQUMsR0FBQSxVQUFBQSxFQUE4RCxZQUEzQmdFLEVBQUE0eEIsZ0JBQUEsU0FBa0NuckIsRUFBQWxKLGVBQUEsU0FBQWsxQixHQUFBenlCLEVBQUF5RyxFQUFBdEksS0FBQXBDLEdBQUEwSyxFQUFBbEosZUFBQSxpQkFBQWsxQixHQUFBenlCLEVBQUF5RyxFQUFBdEksS0FBQTJ6QixHQUFBcnJCLEVBQUF3ckIsZUFBMkcsTUFBQXhyQixFQUFBNm9CLFNBQUEsTUFBQTdvQixFQUFBdXJCLGlCQUFBaHlCLEVBQUFneUIsaUJBQUF2ckIsRUFBQXVyQixnQkFDcFYsU0FBQVUsR0FBQTF5QixFQUFBeUcsRUFBQTFLLEdBQW1CLEdBQUEwSyxFQUFBbEosZUFBQSxVQUFBa0osRUFBQWxKLGVBQUEsaUJBQWdFLElBQUF2QixFQUFBeUssRUFBQXRJLEtBQWEsZ0JBQUFuQyxHQUFBLFVBQUFBLFFBQUEsSUFBQXlLLEVBQUE5SixPQUFBLE9BQUE4SixFQUFBOUosT0FBQSxPQUF5RThKLEVBQUEsR0FBQXpHLEVBQUFreUIsY0FBQUcsYUFBa0N0MkIsR0FBQTBLLElBQUF6RyxFQUFBckQsUUFBQXFELEVBQUFyRCxNQUFBOEosR0FBNEJ6RyxFQUFBaXlCLGFBQUF4ckIsRUFBMEIsTUFBVDFLLEVBQUFpRSxFQUFBL0QsUUFBUytELEVBQUEvRCxLQUFBLElBQW9CK0QsRUFBQWd5QixnQkFBQWh5QixFQUFBZ3lCLGVBQW1DaHlCLEVBQUFneUIsaUJBQUFoeUIsRUFBQWt5QixjQUFBQyxlQUFrRCxLQUFBcDJCLElBQUFpRSxFQUFBL0QsS0FBQUYsR0FDMVcsU0FBQTAyQixHQUFBenlCLEVBQUF5RyxFQUFBMUssR0FBbUIsV0FBQTBLLEdBQUF6RyxFQUFBMnlCLGNBQUFDLGdCQUFBNXlCLElBQUEsTUFBQWpFLEVBQUFpRSxFQUFBaXlCLGFBQUEsR0FBQWp5QixFQUFBa3lCLGNBQUFHLGFBQUFyeUIsRUFBQWl5QixlQUFBLEdBQUFsMkIsSUFBQWlFLEVBQUFpeUIsYUFBQSxHQUFBbDJCLElBUG5CLDBqQ0FBQXNGLE1BQUEsS0FBQW9ELFFBQUEsU0FBQXpFLEdBQXlsQyxJQUFBeUcsRUFBQXpHLEVBQUFxSCxRQUFBZ3FCLEdBQ3psQ0MsSUFBSTNqQixHQUFBbEgsR0FBQSxJQUFBOFAsR0FBQTlQLEVBQUEsS0FBQXpHLEVBQUEsUUFBNEIsc0ZBQUFxQixNQUFBLEtBQUFvRCxRQUFBLFNBQUF6RSxHQUFxSCxJQUFBeUcsRUFBQXpHLEVBQUFxSCxRQUFBZ3FCLEdBQUFDLElBQXVCM2pCLEdBQUFsSCxHQUFBLElBQUE4UCxHQUFBOVAsRUFBQSxLQUFBekcsRUFBQSxrQ0FBc0Qsb0NBQUF5RSxRQUFBLFNBQUF6RSxHQUF3RCxJQUFBeUcsRUFBQXpHLEVBQUFxSCxRQUFBZ3FCLEdBQUFDLElBQXVCM2pCLEdBQUFsSCxHQUFBLElBQUE4UCxHQUFBOVAsRUFBQSxLQUFBekcsRUFBQSwwQ0FBOEQsMkJBQUF5RSxRQUFBLFNBQUF6RSxHQUErQzJOLEdBQUEzTixHQUFBLElBQUF1VyxHQUFBdlcsRUFBQSxLQUFBQSxFQUFBZ29CLGNBQUEsUUFNcFAsSUFBQTZLLEdBQUEsQ0FBUUMsT0FBQSxDQUFRNU4sd0JBQUEsQ0FBeUJzRyxRQUFBLFdBQUFDLFNBQUEsbUJBQThDbEcsYUFBQSw4REFBQWxrQixNQUFBLE9BQXlGLFNBQUEweEIsR0FBQS95QixFQUFBeUcsRUFBQTFLLEdBQThFLE9BQTNEaUUsRUFBQWdmLEdBQUFpTCxVQUFBNEksR0FBQUMsT0FBQTl5QixFQUFBeUcsRUFBQTFLLElBQStCb0MsS0FBQSxTQUFnQjZ1QixHQUFBanhCLEdBQU04ckIsRUFBQTduQixHQUFNQSxFQUFTLElBQUFnekIsR0FBQSxLQUFBQyxHQUFBLEtBQW9CLFNBQUFDLEdBQUFsekIsR0FBZTZtQixFQUFBN21CLEdBQ3BkLFNBQUFtekIsR0FBQW56QixHQUEyQixHQUFBcXZCLEdBQVpsSSxFQUFBbm5CLElBQVksT0FBQUEsRUFBa0IsU0FBQW96QixHQUFBcHpCLEVBQUF5RyxHQUFpQixjQUFBekcsRUFBQSxPQUFBeUcsRUFBeUIsSUFBQTRzQixJQUFBLEVBQWtGLFNBQUFDLEtBQWNOLFFBQUFPLFlBQUEsbUJBQUFDLElBQUFQLEdBQUFELEdBQUEsTUFBdUQsU0FBQVEsR0FBQXh6QixHQUFlLFVBQUFBLEVBQUFveEIsY0FBQStCLEdBQUFGLEtBQUEzRixHQUFBNEYsR0FBQWx6QixFQUFBK3lCLEdBQUFFLEdBQUFqekIsRUFBQXl1QixHQUFBenVCLEtBQThELFNBQUF5ekIsR0FBQXp6QixFQUFBeUcsRUFBQTFLLEdBQW1CLFVBQUFpRSxHQUFBc3pCLEtBQUFMLEdBQUFsM0IsR0FBQWkzQixHQUFBdnNCLEdBQUFpdEIsWUFBQSxtQkFBQUYsS0FBQSxTQUFBeHpCLEdBQUFzekIsS0FBb0YsU0FBQUssR0FBQTN6QixHQUFlLHVCQUFBQSxHQUFBLFVBQUFBLEdBQUEsWUFBQUEsRUFBQSxPQUFBbXpCLEdBQUFGLElBQ2piLFNBQUFXLEdBQUE1ekIsRUFBQXlHLEdBQWlCLGFBQUF6RyxFQUFBLE9BQUFtekIsR0FBQTFzQixHQUE0QixTQUFBb3RCLEdBQUE3ekIsRUFBQXlHLEdBQWlCLGFBQUF6RyxHQUFBLFdBQUFBLEVBQUEsT0FBQW16QixHQUFBMXNCLEdBRG1DcWhCLElBQUF1TCxHQUFBeEUsR0FBQSxZQUFBNWtCLFNBQUFpaEIsY0FBQSxFQUFBamhCLFNBQUFpaEIsZUFFakcsSUFBQTRJLEdBQUEsQ0FBUTlPLFdBQUE2TixHQUFBa0IsdUJBQUFWLEdBQUF0TyxjQUFBLFNBQUEva0IsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUF3RSxJQUFBd0UsRUFBQWlHLEVBQUEwZ0IsRUFBQTFnQixHQUFBaEgsT0FBQVksT0FBQSxFQUFBZ1QsT0FBQSxFQUFBZ00sRUFBQTdlLEVBQUFndUIsVUFBQWh1QixFQUFBZ3VCLFNBQUF4RyxjQUFtUCxHQUFySyxXQUFBM0ksR0FBQSxVQUFBQSxHQUFBLFNBQUE3ZSxFQUFBckMsS0FBQWtDLEVBQUEreUIsR0FBQTdFLEdBQUEvdEIsR0FBQTZ5QixHQUFBaHpCLEVBQUF3ekIsSUFBQXh6QixFQUFBc3pCLEdBQUF0Z0IsRUFBQW9nQixLQUFBcFUsRUFBQTdlLEVBQUFndUIsV0FBQSxVQUFBblAsRUFBQTJJLGdCQUFBLGFBQUF4bkIsRUFBQXJDLE1BQUEsVUFBQXFDLEVBQUFyQyxRQUFBa0MsRUFBQXV6QixJQUFxS3Z6QixRQUFBTCxFQUFBeUcsSUFBQSxPQUFBc3NCLEdBQUExeUIsRUFBQXRFLEVBQUFDLEdBQWtDcVgsS0FBQXJULEVBQUFRLEVBQUFpRyxHQUFZLFNBQUF6RyxNQUFBUSxFQUFBMHhCLGdCQUFBbHlCLEVBQUFzeUIsWUFBQSxXQUFBOXhCLEVBQUFyQyxNQUFBczBCLEdBQUFqeUIsRUFBQSxTQUFBQSxFQUFBN0QsU0FBMEZxM0IsR0FBQWhWLEdBQUE0TCxPQUFBLENBQWNxSixLQUFBLEtBQUFoSSxPQUFBLE9BQXNCaUksR0FBQSxDQUFNQyxJQUFBLFNBQ3JmQyxRQUFBLFVBQUFDLEtBQUEsVUFBQUMsTUFBQSxZQUFtRCxTQUFBQyxHQUFBdjBCLEdBQWUsSUFBQXlHLEVBQUExQyxLQUFBd2xCLFlBQXVCLE9BQUE5aUIsRUFBQSt0QixpQkFBQS90QixFQUFBK3RCLGlCQUFBeDBCLFFBQUFrMEIsR0FBQWwwQixPQUFBeUcsRUFBQXpHLEdBQW9FLFNBQUF5MEIsS0FBYyxPQUFBRixHQUMzSyxJQUFBRyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLEdBQUFkLEdBQUFwSixPQUFBLENBQXdDbUssUUFBQSxLQUFBQyxRQUFBLEtBQUFDLFFBQUEsS0FBQUMsUUFBQSxLQUFBQyxNQUFBLEtBQUFDLE1BQUEsS0FBQTdJLFFBQUEsS0FBQThJLFNBQUEsS0FBQTdJLE9BQUEsS0FBQUMsUUFBQSxLQUFBK0gsaUJBQUFDLEdBQUFhLE9BQUEsS0FBQUMsUUFBQSxLQUFBQyxjQUFBLFNBQUF4MUIsR0FBcU0sT0FBQUEsRUFBQXcxQixnQkFBQXgxQixFQUFBeTFCLGNBQUF6MUIsRUFBQTB1QixXQUFBMXVCLEVBQUEwMUIsVUFBQTExQixFQUFBeTFCLGNBQWlGRSxVQUFBLFNBQUEzMUIsR0FBdUIsaUJBQUFBLEVBQUEsT0FBQUEsRUFBQTIxQixVQUFzQyxJQUFBbHZCLEVBQUFpdUIsR0FBc0IsT0FBYkEsR0FBQTEwQixFQUFBKzBCLFFBQWFILEdBQUEsY0FBQTUwQixFQUFBN0IsS0FBQTZCLEVBQUErMEIsUUFBQXR1QixFQUFBLEdBQUFtdUIsSUFBQSxNQUF1RGdCLFVBQUEsU0FBQTUxQixHQUF1QixpQkFBQUEsRUFBQSxPQUFBQSxFQUFBNDFCLFVBQy9kLElBQUFudkIsRUFBQWt1QixHQUFzQixPQUFiQSxHQUFBMzBCLEVBQUFnMUIsUUFBYUgsR0FBQSxjQUFBNzBCLEVBQUE3QixLQUFBNkIsRUFBQWcxQixRQUFBdnVCLEVBQUEsR0FBQW91QixJQUFBLFFBQXdEZ0IsR0FBQWYsR0FBQWxLLE9BQUEsQ0FBZ0JrTCxVQUFBLEtBQUFDLE1BQUEsS0FBQUMsT0FBQSxLQUFBQyxTQUFBLEtBQUFDLG1CQUFBLEtBQUFDLE1BQUEsS0FBQUMsTUFBQSxLQUFBQyxNQUFBLEtBQUFDLFlBQUEsS0FBQUMsVUFBQSxPQUE2SUMsR0FBQSxDQUFNQyxXQUFBLENBQVlyUixpQkFBQSxlQUFBRyxhQUFBLDBCQUFzRW1SLFdBQUEsQ0FBYXRSLGlCQUFBLGVBQUFHLGFBQUEsMEJBQXNFb1IsYUFBQSxDQUFldlIsaUJBQUEsaUJBQUFHLGFBQUEsOEJBQTRFcVIsYUFBQSxDQUFleFIsaUJBQUEsaUJBQ2hnQkcsYUFBQSwrQkFBMkNzUixHQUFBLENBQUs3UixXQUFBd1IsR0FBQXpSLGNBQUEsU0FBQS9rQixFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQThDLElBQUF3RSxFQUFBLGNBQUFSLEdBQUEsZ0JBQUFBLEVBQUFLLEVBQUEsYUFBQUwsR0FBQSxlQUFBQSxFQUE0RSxHQUFBUSxJQUFBekUsRUFBQXk1QixlQUFBejVCLEVBQUEwNUIsZUFBQXAxQixJQUFBRyxFQUFBLFlBQWtNLEdBQXZJQSxFQUFBeEUsRUFBQXlELFNBQUF6RCxLQUFBd0UsRUFBQXhFLEVBQUEyMkIsZUFBQW55QixFQUFBczJCLGFBQUF0MkIsRUFBQXUyQixhQUFBdDNCLE9BQTBFWSxLQUFBb0csT0FBQTFLLEVBQUF5NUIsZUFBQXo1QixFQUFBMjVCLFdBQUF6TyxFQUFBeGdCLEdBQUEsTUFBQXBHLEVBQUEsS0FBNkRBLElBQUFvRyxFQUFBLFlBQXFCLElBQUE0TSxPQUFBLEVBQUFnTSxPQUFBLEVBQUExakIsT0FBQSxFQUFBb1QsT0FBQSxFQUF3QyxhQUFBL08sR0FBQSxjQUFBQSxHQUFBcVQsRUFBQXloQixHQUFBelYsRUFBQW1YLEdBQUFFLFdBQUEvNkIsRUFBQTY2QixHQUFBQyxXQUFBMW5CLEVBQUEsU0FDemEsZUFBQS9PLEdBQUEsZ0JBQUFBLElBQUFxVCxFQUFBd2lCLEdBQUF4VyxFQUFBbVgsR0FBQUksYUFBQWo3QixFQUFBNjZCLEdBQUFHLGFBQUE1bkIsRUFBQSxXQUFpRyxJQUFBalQsRUFBQSxNQUFBdUUsRUFBQUcsRUFBQTJtQixFQUFBOW1CLEdBQXNMLEdBQWhLRyxFQUFBLE1BQUFpRyxFQUFBakcsRUFBQTJtQixFQUFBMWdCLElBQWtCekcsRUFBQXFULEVBQUE0VyxVQUFBNUssRUFBQWhmLEVBQUF0RSxFQUFBQyxJQUF1Qm1DLEtBQUE0USxFQUFBLFFBQWlCL08sRUFBQWQsT0FBQXBELEVBQVdrRSxFQUFBdzFCLGNBQUFoMUIsR0FBa0J6RSxFQUFBc1gsRUFBQTRXLFVBQUF0dUIsRUFBQThLLEVBQUExSyxFQUFBQyxJQUF1Qm1DLEtBQUE0USxFQUFBLFFBQWlCaFQsRUFBQW1ELE9BQUFzQixFQUFXekUsRUFBQXk1QixjQUFBMTVCLEVBQWtCRSxFQUFBeUssRUFBSXBHLEdBQUFyRSxFQUFBZ0UsRUFBQSxDQUF1QixJQUFSUSxFQUFBeEUsRUFBSStTLEVBQUEsRUFBSXNFLEVBQVo1TSxFQUFBcEcsRUFBb0JnVCxFQUFFQSxFQUFBZ1UsRUFBQWhVLEdBQUF0RSxJQUFnQixJQUFKc0UsRUFBQSxFQUFJMVgsRUFBQTZFLEVBQVE3RSxFQUFFQSxFQUFBMHJCLEVBQUExckIsR0FBQTBYLElBQVksS0FBSyxFQUFBdEUsRUFBQXNFLEdBQU01TSxFQUFBNGdCLEVBQUE1Z0IsR0FBQXNJLElBQWEsS0FBSyxFQUFBc0UsRUFBQXRFLEdBQU12TyxFQUFBNm1CLEVBQUE3bUIsR0FBQTZTLElBQWEsS0FBS3RFLEtBQUksQ0FBRSxHQUFBdEksSUFBQWpHLEdBQUFpRyxJQUFBakcsRUFBQXcyQixVQUFBLE1BQUFoM0IsRUFBa0N5RyxFQUFBNGdCLEVBQUE1Z0IsR0FBUWpHLEVBQUE2bUIsRUFBQTdtQixHQUFRaUcsRUFBQSxVQUFPQSxFQUFBLEtBQWdCLElBQUpqRyxFQUFBaUcsRUFBSUEsRUFBQSxHQUFTcEcsT0FBQUcsSUFDL2QsUUFEMGV1TyxFQUN0ZjFPLEVBQUEyMkIsWUFBWWpvQixJQUFBdk8sSUFBeUJpRyxFQUFBMUQsS0FBQTFDLEdBQVVBLEVBQUFnbkIsRUFBQWhuQixHQUFRLElBQUFBLEVBQUEsR0FBU3JFLE9BQUF3RSxJQUF5QixRQUFkdU8sRUFBQS9TLEVBQUFnN0IsWUFBY2pvQixJQUFBdk8sSUFBeUJILEVBQUEwQyxLQUFBL0csR0FBVUEsRUFBQXFyQixFQUFBcnJCLEdBQVEsSUFBQUEsRUFBQSxFQUFRQSxFQUFBeUssRUFBQW5ELE9BQVd0SCxJQUFBMnJCLEVBQUFsaEIsRUFBQXpLLEdBQUEsVUFBQWdFLEdBQXlCLElBQUFoRSxFQUFBcUUsRUFBQWlELE9BQWUsRUFBQXRILEtBQU0yckIsRUFBQXRuQixFQUFBckUsR0FBQSxXQUFBRCxHQUF1QixPQUFBaUUsRUFBQWpFLEtBQWMsU0FBQWs3QixHQUFBajNCLEVBQUF5RyxHQUFpQixPQUFBekcsSUFBQXlHLElBQUEsSUFBQXpHLEdBQUEsRUFBQUEsR0FBQSxFQUFBeUcsSUFBQXpHLE1BQUF5RyxLQUErQyxJQUFBeXdCLEdBQUE5NkIsT0FBQWtCLFVBQUFDLGVBQzFTLFNBQUE0NUIsR0FBQW4zQixFQUFBeUcsR0FBaUIsR0FBQXd3QixHQUFBajNCLEVBQUF5RyxHQUFBLFNBQW9CLG9CQUFBekcsR0FBQSxPQUFBQSxHQUFBLGlCQUFBeUcsR0FBQSxPQUFBQSxFQUFBLFNBQXlFLElBQUExSyxFQUFBSyxPQUFBaUksS0FBQXJFLEdBQUFoRSxFQUFBSSxPQUFBaUksS0FBQW9DLEdBQXNDLEdBQUExSyxFQUFBdUgsU0FBQXRILEVBQUFzSCxPQUFBLFNBQWdDLElBQUF0SCxFQUFBLEVBQVFBLEVBQUFELEVBQUF1SCxPQUFXdEgsSUFBQSxJQUFBazdCLEdBQUFyN0IsS0FBQTRLLEVBQUExSyxFQUFBQyxNQUFBaTdCLEdBQUFqM0IsRUFBQWpFLEVBQUFDLElBQUF5SyxFQUFBMUssRUFBQUMsS0FBQSxTQUF1RCxTQUFTLFNBQUFvN0IsR0FBQXAzQixHQUFlLElBQUF5RyxFQUFBekcsRUFBUSxHQUFBQSxFQUFBZzNCLFVBQUEsS0FBb0J2d0IsRUFBQTZnQixRQUFTN2dCLElBQUE2Z0IsV0FBWSxDQUFLLFNBQUE3Z0IsRUFBQTR3QixXQUFBLFNBQWdDLEtBQUs1d0IsRUFBQTZnQixRQUFTLFVBQUE3Z0IsSUFBQTZnQixRQUFBK1AsV0FBQSxTQUE0QyxXQUFBNXdCLEVBQUE4QyxJQUFBLElBQXFCLFNBQUErdEIsR0FBQXQzQixHQUFlLElBQUFvM0IsR0FBQXAzQixJQUFBK2UsRUFBQSxPQUU1VixTQUFBd1ksR0FBQXYzQixHQUF1QixLQUFSQSxFQUQ3SCxTQUFBQSxHQUFlLElBQUF5RyxFQUFBekcsRUFBQWczQixVQUFrQixJQUFBdndCLEVBQUEsWUFBQUEsRUFBQTJ3QixHQUFBcDNCLEtBQUErZSxFQUFBLFdBQUF0WSxFQUFBLEtBQUF6RyxFQUF3RCxRQUFBakUsRUFBQWlFLEVBQUFoRSxFQUFBeUssSUFBaUIsQ0FBRSxJQUFBakcsRUFBQXpFLEVBQUF1ckIsT0FBQWpuQixFQUFBRyxJQUFBdzJCLFVBQUEsS0FBb0MsSUFBQXgyQixJQUFBSCxFQUFBLE1BQWdCLEdBQUFHLEVBQUFnM0IsUUFBQW4zQixFQUFBbTNCLE1BQUEsQ0FBc0IsUUFBQW5rQixFQUFBN1MsRUFBQWczQixNQUFrQm5rQixHQUFFLENBQUUsR0FBQUEsSUFBQXRYLEVBQUEsT0FBQXU3QixHQUFBOTJCLEdBQUFSLEVBQXdCLEdBQUFxVCxJQUFBclgsRUFBQSxPQUFBczdCLEdBQUE5MkIsR0FBQWlHLEVBQXdCNE0sSUFBQW9rQixRQUFZMVksRUFBQSxPQUFTLEdBQUFoakIsRUFBQXVyQixTQUFBdHJCLEVBQUFzckIsT0FBQXZyQixFQUFBeUUsRUFBQXhFLEVBQUFxRSxNQUErQixDQUFLZ1QsR0FBQSxFQUFLLFFBQUFnTSxFQUFBN2UsRUFBQWczQixNQUFrQm5ZLEdBQUUsQ0FBRSxHQUFBQSxJQUFBdGpCLEVBQUEsQ0FBVXNYLEdBQUEsRUFBS3RYLEVBQUF5RSxFQUFJeEUsRUFBQXFFLEVBQUksTUFBTSxHQUFBZ2YsSUFBQXJqQixFQUFBLENBQVVxWCxHQUFBLEVBQUtyWCxFQUFBd0UsRUFBSXpFLEVBQUFzRSxFQUFJLE1BQU1nZixJQUFBb1ksUUFBWSxJQUFBcGtCLEVBQUEsQ0FBTyxJQUFBZ00sRUFBQWhmLEVBQUFtM0IsTUFBY25ZLEdBQUUsQ0FBRSxHQUFBQSxJQUFBdGpCLEVBQUEsQ0FBVXNYLEdBQUEsRUFBS3RYLEVBQUFzRSxFQUFJckUsRUFBQXdFLEVBQUksTUFBTSxHQUFBNmUsSUFBQXJqQixFQUFBLENBQVVxWCxHQUFBLEVBQUtyWCxFQUFBcUUsRUFBSXRFLEVBQUF5RSxFQUFJLE1BQU02ZSxJQUFBb1ksUUFBWXBrQixHQUNyZjBMLEVBQUEsUUFBaUJoakIsRUFBQWk3QixZQUFBaDdCLEdBQUEraUIsRUFBQSxPQUEwRCxPQUExQixJQUFBaGpCLEVBQUF3TixLQUFBd1YsRUFBQSxPQUEwQmhqQixFQUFBNHFCLFVBQUF0RyxVQUFBdGtCLEVBQUFpRSxFQUFBeUcsRUFBa0RpeEIsQ0FBQTEzQixJQUFRLFlBQWtCLFFBQUF5RyxFQUFBekcsSUFBYSxDQUFFLE9BQUF5RyxFQUFBOEMsS0FBQSxJQUFBOUMsRUFBQThDLElBQUEsT0FBQTlDLEVBQWlDLEdBQUFBLEVBQUErd0IsTUFBQS93QixFQUFBK3dCLE1BQUFsUSxPQUFBN2dCLE1BQUErd0IsVUFBc0MsQ0FBSyxHQUFBL3dCLElBQUF6RyxFQUFBLE1BQWUsTUFBS3lHLEVBQUFneEIsU0FBVyxDQUFFLElBQUFoeEIsRUFBQTZnQixRQUFBN2dCLEVBQUE2Z0IsU0FBQXRuQixFQUFBLFlBQXVDeUcsSUFBQTZnQixPQUFXN2dCLEVBQUFneEIsUUFBQW5RLE9BQUE3Z0IsRUFBQTZnQixPQUEwQjdnQixJQUFBZ3hCLFNBQWEsWUFDNVcsSUFBQTl1QixHQUFBcVcsR0FBQTRMLE9BQUEsQ0FBaUIrTSxjQUFBLEtBQUFDLFlBQUEsS0FBQUMsY0FBQSxPQUF1REMsR0FBQTlZLEdBQUE0TCxPQUFBLENBQWVtTixjQUFBLFNBQUEvM0IsR0FBMEIsd0JBQUFBLElBQUErM0IsY0FBQXQ0QixPQUFBczRCLGlCQUFnRUMsR0FBQWhFLEdBQUFwSixPQUFBLENBQWdCNEssY0FBQSxPQUFxQixTQUFBeUMsR0FBQWo0QixHQUFlLElBQUF5RyxFQUFBekcsRUFBQStyQixRQUF1RixNQUF2RSxhQUFBL3JCLEVBQUEsS0FBQUEsSUFBQWs0QixXQUFBLEtBQUF6eEIsSUFBQXpHLEVBQUEsSUFBQUEsRUFBQXlHLEVBQXdELEtBQUF6RyxNQUFBLElBQWUsSUFBQUEsR0FBQSxLQUFBQSxJQUFBLEVBQzVULElBQUFtNEIsR0FBQSxDQUFRQyxJQUFBLFNBQUFDLFNBQUEsSUFBQUMsS0FBQSxZQUFBQyxHQUFBLFVBQUFDLE1BQUEsYUFBQUMsS0FBQSxZQUFBQyxJQUFBLFNBQUFDLElBQUEsS0FBQUMsS0FBQSxjQUFBQyxLQUFBLGNBQUFDLE9BQUEsYUFBQUMsZ0JBQUEsZ0JBQTJNQyxHQUFBLENBQUtDLEVBQUEsWUFBQUMsRUFBQSxNQUFBQyxHQUFBLFFBQUFDLEdBQUEsUUFBQUMsR0FBQSxRQUFBQyxHQUFBLFVBQUFDLEdBQUEsTUFBQUMsR0FBQSxRQUFBQyxHQUFBLFdBQUFDLEdBQUEsU0FBQUMsR0FBQSxJQUFBQyxHQUFBLFNBQUFDLEdBQUEsV0FBQUMsR0FBQSxNQUFBQyxHQUFBLE9BQUFDLEdBQUEsWUFBQUMsR0FBQSxVQUFBQyxHQUFBLGFBQUFDLEdBQUEsWUFBQUMsR0FBQSxTQUFBQyxHQUFBLFNBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FDeE5DLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFVBQUFDLElBQUEsYUFBQUMsSUFBQSxRQUFxSEMsR0FBQXJILEdBQUFwSixPQUFBLENBQWUzdEIsSUFBQSxTQUFBK0MsR0FBZ0IsR0FBQUEsRUFBQS9DLElBQUEsQ0FBVSxJQUFBd0osRUFBQTB4QixHQUFBbjRCLEVBQUEvQyxNQUFBK0MsRUFBQS9DLElBQXVCLG9CQUFBd0osRUFBQSxPQUFBQSxFQUErQixtQkFBQXpHLEVBQUE3QixLQUFBLE1BQUE2QixFQUFBaTRCLEdBQUFqNEIsSUFBQSxRQUFBa0UsT0FBQTRPLGFBQUE5UyxHQUFBLFlBQUFBLEVBQUE3QixNQUFBLFVBQUE2QixFQUFBN0IsS0FBQTY2QixHQUFBaDVCLEVBQUErckIsVUFBQSxtQkFBZ0p1UCxTQUFBLEtBQUEvTyxRQUFBLEtBQUE4SSxTQUFBLEtBQUE3SSxPQUFBLEtBQUFDLFFBQUEsS0FBQThPLE9BQUEsS0FBQW5QLE9BQUEsS0FBQW9JLGlCQUFBQyxHQUFBeUQsU0FBQSxTQUFBbDRCLEdBQW9JLG1CQUN4ZUEsRUFBQTdCLEtBQUE4NUIsR0FBQWo0QixHQUFBLEdBQWUrckIsUUFBQSxTQUFBL3JCLEdBQXFCLGtCQUFBQSxFQUFBN0IsTUFBQSxVQUFBNkIsRUFBQTdCLEtBQUE2QixFQUFBK3JCLFFBQUEsR0FBdURNLE1BQUEsU0FBQXJzQixHQUFtQixtQkFBQUEsRUFBQTdCLEtBQUE4NUIsR0FBQWo0QixHQUFBLFlBQUFBLEVBQUE3QixNQUFBLFVBQUE2QixFQUFBN0IsS0FBQTZCLEVBQUErckIsUUFBQSxLQUFrRnlQLEdBQUExRyxHQUFBbEssT0FBQSxDQUFnQjZRLGFBQUEsT0FBa0JDLEdBQUExSCxHQUFBcEosT0FBQSxDQUFnQitRLFFBQUEsS0FBQUMsY0FBQSxLQUFBQyxlQUFBLEtBQUFyUCxPQUFBLEtBQUFDLFFBQUEsS0FBQUYsUUFBQSxLQUFBOEksU0FBQSxLQUFBYixpQkFBQUMsS0FBNEhxSCxHQUFBOWMsR0FBQTRMLE9BQUEsQ0FBZXdHLGFBQUEsS0FBQXdHLFlBQUEsS0FBQUMsY0FBQSxPQUFzRGtFLEdBQUFqSCxHQUFBbEssT0FBQSxDQUFnQm9SLE9BQUEsU0FBQWg4QixHQUFtQixpQkFBQUEsSUFBQWc4QixPQUFBLGdCQUN0ZGg4QixLQUFBaThCLFlBQUEsR0FBbUJDLE9BQUEsU0FBQWw4QixHQUFvQixpQkFBQUEsSUFBQWs4QixPQUFBLGdCQUFBbDhCLEtBQUFtOEIsWUFBQSxlQUFBbjhCLEtBQUFvOEIsV0FBQSxHQUE4RkMsT0FBQSxLQUFBQyxVQUFBLE9BQTRCQyxHQUFBLG9CQUFBNVQsRUFBQSxpQkFBQUMsRUFBQSx1QkFBQUMsRUFBQSxvUkFDakssc2ZBQ0EsaUdBQUFDLEdBQUEsMERBQUEwVCxHQUFBLEdBQW1LQyxHQUFBLEdBQU8sU0FBQUMsR0FBQTE4QixFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBLEdBQWtCaEUsRUFBQSxPQUFQZ0UsSUFBQSxJQUFPLEdBQUF1eEIsY0FBQXZ4QixFQUFBMEMsTUFBQSxJQUEyQytELEVBQUEsQ0FBR3llLHdCQUFBLENBQXlCc0csUUFBQXh2QixFQUFBeXZCLFNBQUF6dkIsRUFBQSxXQUErQnVwQixhQUFBLENBQUF4cEIsR0FBQTRnQyxjQUFBbDJCLEdBQW1DKzFCLEdBQUF4OEIsR0FBQXlHLEVBQVFnMkIsR0FBQTFnQyxHQUFBMEssRUFDOVYsd2ZBQ0EsaVFBQUFoQyxRQUFBLFNBQUF6RSxHQUFxUjA4QixHQUFBMThCLEdBQUEsS0FBV3U4QixHQUFBOTNCLFFBQUEsU0FBQXpFLEdBQXVCMDhCLEdBQUExOEIsR0FBQSxLQUN2VCxJQUFBNDhCLEdBQUEsQ0FBUTVYLFdBQUF3WCxHQUFBSywrQkFBQSxTQUFBNzhCLEdBQWlFLGlCQUFSQSxFQUFBeThCLEdBQUF6OEIsTUFBUSxJQUFBQSxFQUFBMjhCLGVBQXdDNVgsY0FBQSxTQUFBL2tCLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBaUMsSUFBQXdFLEVBQUFpOEIsR0FBQXo4QixHQUFZLElBQUFRLEVBQUEsWUFBa0IsT0FBQVIsR0FBVSxzQkFBQWk0QixHQUFBbDhCLEdBQUEsWUFBeUMsMEJBQUFpRSxFQUFBcTdCLEdBQWlDLE1BQU0sdUJBQUFyN0IsRUFBQWc0QixHQUE4QixNQUFNLG1CQUFBajhCLEVBQUF1NUIsT0FBQSxZQUF5Qyw2SEFBQXQxQixFQUFBODBCLEdBQTBJLE1BQU0sa0hBQUE5MEIsRUFDdmV3N0IsR0FBRyxNQUFNLGtFQUFBeDdCLEVBQUEwN0IsR0FBMkUsTUFBTSxLQUFBL1MsRUFBQSxLQUFBQyxFQUFBLEtBQUFDLEVBQUE3b0IsRUFBQTJJLEdBQTZCLE1BQU0sS0FBQW1nQixHQUFBOW9CLEVBQUE4N0IsR0FBYSxNQUFNLGFBQUE5N0IsRUFBQWcwQixHQUFtQixNQUFNLFlBQUFoMEIsRUFBQSs3QixHQUFrQixNQUFNLGlDQUFBLzdCLEVBQUE4M0IsR0FBeUMsTUFBTSw0SkFBQTkzQixFQUFBNjFCLEdBQXlLLE1BQU0sUUFBQTcxQixFQUFBZ2YsR0FBeUMsT0FBTjZJLEVBQXZCcGhCLEVBQUF6RyxFQUFBaXFCLFVBQUF6cEIsRUFBQWlHLEVBQUExSyxFQUFBQyxJQUE2QnlLLElBQVVxMkIsR0FBQUYsR0FBQUMsK0JBQ2xkRSxHQUFBLEdBQU0sU0FBQUMsR0FBQWg5QixHQUFlLElBQUF5RyxFQUFBekcsRUFBQWk5QixXQUFBbGhDLEVBQUEwSyxFQUF1QixHQUFHLElBQUExSyxFQUFBLENBQU9pRSxFQUFBazlCLFVBQUFuNkIsS0FBQWhILEdBQW9CLE1BQU0sSUFBQUMsRUFBTSxJQUFBQSxFQUFBRCxFQUFRQyxFQUFBc3JCLFFBQVN0ckIsSUFBQXNyQixPQUF1RCxLQUEzQ3RyQixFQUFBLElBQUFBLEVBQUF1TixJQUFBLEtBQUF2TixFQUFBMnFCLFVBQUF3VyxlQUEyQyxNQUFZbjlCLEVBQUFrOUIsVUFBQW42QixLQUFBaEgsR0FBb0JBLEVBQUFrckIsRUFBQWpyQixTQUFRRCxHQUFTLElBQUFBLEVBQUEsRUFBUUEsRUFBQWlFLEVBQUFrOUIsVUFBQTU1QixPQUFxQnZILElBQUEsQ0FBSzBLLEVBQUF6RyxFQUFBazlCLFVBQUFuaEMsR0FBaUIsSUFBQXlFLEVBQUFpdUIsR0FBQXp1QixFQUFBdXBCLGFBQXdCdnRCLEVBQUFnRSxFQUFBbzlCLGFBQWlCLFFBQUEvOEIsRUFBQUwsRUFBQXVwQixZQUFBbFcsRUFBQSxLQUFBZ00sRUFBQSxFQUFtQ0EsRUFBQXlGLEVBQUF4aEIsT0FBWStiLElBQUEsQ0FBSyxJQUFBMWpCLEVBQUFtcEIsRUFBQXpGLEdBQVkxakIsUUFBQW9wQixjQUFBL29CLEVBQUF5SyxFQUFBcEcsRUFBQUcsTUFBQTZTLEVBQUF5UyxFQUFBelMsRUFBQTFYLElBQTZDa3JCLEVBQUF4VCxJQUFPLElBQUFncUIsSUFBQSxFQUMvWixTQUFBanZCLEdBQUFwTyxFQUFBeUcsR0FBZ0IsSUFBQUEsRUFBQSxZQUFrQixJQUFBMUssR0FBQStnQyxHQUFBOThCLEdBQUFzOUIsR0FBQUMsSUFBQXJnQyxLQUFBLEtBQUE4QyxHQUFpQ3lHLEVBQUF1UCxpQkFBQWhXLEVBQUFqRSxHQUFBLEdBQTJCLFNBQUF5aEMsR0FBQXg5QixFQUFBeUcsR0FBaUIsSUFBQUEsRUFBQSxZQUFrQixJQUFBMUssR0FBQStnQyxHQUFBOThCLEdBQUFzOUIsR0FBQUMsSUFBQXJnQyxLQUFBLEtBQUE4QyxHQUFpQ3lHLEVBQUF1UCxpQkFBQWhXLEVBQUFqRSxHQUFBLEdBQTJCLFNBQUF1aEMsR0FBQXQ5QixFQUFBeUcsR0FBaUIwbUIsR0FBQW9RLEdBQUF2OUIsRUFBQXlHLEdBQzlNLFNBQUE4MkIsR0FBQXY5QixFQUFBeUcsR0FBaUIsR0FBQTQyQixHQUFBLENBQU8sSUFBQXRoQyxFQUFBMHlCLEdBQUFob0IsR0FBMkUsR0FBdkQsUUFBUjFLLEVBQUFrckIsRUFBQWxyQixLQUFRLGlCQUFBQSxFQUFBd04sS0FBQSxJQUFBNnRCLEdBQUFyN0IsT0FBQSxNQUF1RGdoQyxHQUFBejVCLE9BQUEsQ0FBYyxJQUFBdEgsRUFBQStnQyxHQUFBOWIsTUFBZWpsQixFQUFBb2hDLGFBQUFwOUIsRUFBaUJoRSxFQUFBdXRCLFlBQUE5aUIsRUFBZ0J6SyxFQUFBaWhDLFdBQUFsaEMsRUFBZWlFLEVBQUFoRSxPQUFJZ0UsRUFBQSxDQUFRbzlCLGFBQUFwOUIsRUFBQXVwQixZQUFBOWlCLEVBQUF3MkIsV0FBQWxoQyxFQUFBbWhDLFVBQUEsSUFBd0QsSUFBSTVQLEdBQUEwUCxHQUFBaDlCLEdBQVMsUUFBUUEsRUFBQW85QixhQUFBLEtBQUFwOUIsRUFBQXVwQixZQUFBLEtBQUF2cEIsRUFBQWk5QixXQUFBLEtBQUFqOUIsRUFBQWs5QixVQUFBNTVCLE9BQUEsS0FBQXk1QixHQUFBejVCLFFBQUF5NUIsR0FBQWg2QixLQUFBL0MsS0FBeUcsSUFBQXk5QixHQUFBLEdBQVNDLEdBQUEsRUFBQUMsR0FBQSx3QkFBQWorQixLQUFBd0IsVUFBQXdCLE1BQUEsR0FDM1gsU0FBQWs3QixHQUFBNTlCLEdBQXFGLE9BQXRFNUQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBbUUsRUFBQTI5QixNQUFBMzlCLEVBQUEyOUIsSUFBQUQsS0FBQUQsR0FBQXo5QixFQUFBMjlCLEtBQUEsSUFBc0VGLEdBQUF6OUIsRUFBQTI5QixLQUFpQixTQUFBRSxHQUFBNzlCLEdBQW9FLGFBQXJEQSxNQUFBLG9CQUFBaUssdUJBQUEsSUFBcUQsWUFBc0MsSUFBSSxPQUFBakssRUFBQTR5QixlQUFBNXlCLEVBQUE4OUIsS0FBK0IsTUFBQXIzQixHQUFTLE9BQUF6RyxFQUFBODlCLE1BQWUsU0FBQUMsR0FBQS85QixHQUFlLEtBQUtBLEtBQUF3YixZQUFnQnhiLElBQUF3YixXQUFnQixPQUFBeGIsRUFDL1QsU0FBQWcrQixHQUFBaCtCLEVBQUF5RyxHQUFpQixJQUFnQnpLLEVBQWhCRCxFQUFBZ2lDLEdBQUEvOUIsR0FBZ0IsSUFBSkEsRUFBQSxFQUFjakUsR0FBRSxDQUFFLE9BQUFBLEVBQUE2eUIsU0FBQSxDQUE0QyxHQUF6QjV5QixFQUFBZ0UsRUFBQWpFLEVBQUFxdEIsWUFBQTlsQixPQUF5QnRELEdBQUF5RyxHQUFBekssR0FBQXlLLEVBQUEsT0FBcUJ3M0IsS0FBQWxpQyxFQUFBbWlDLE9BQUF6M0IsRUFBQXpHLEdBQW1CQSxFQUFBaEUsRUFBSWdFLEVBQUEsQ0FBRyxLQUFLakUsR0FBRSxDQUFFLEdBQUFBLEVBQUF1ZixZQUFBLENBQWtCdmYsSUFBQXVmLFlBQWdCLE1BQUF0YixFQUFRakUsSUFBQTRmLFdBQWU1ZixPQUFBLEVBQVNBLEVBQUFnaUMsR0FBQWhpQyxJQUNyTixTQUFBb2lDLEtBQWMsUUFBQW4rQixFQUFBUCxPQUFBZ0gsRUFBQW8zQixLQUF3QnAzQixhQUFBekcsRUFBQThaLG1CQUFpQyxDQUFFLElBQUksSUFBQS9kLEVBQUEsaUJBQUEwSyxFQUFBd0osY0FBQXFyQixTQUFBaGUsS0FBc0QsTUFBQXRoQixHQUFTRCxHQUFBLEVBQUssSUFBQUEsRUFBdUIsTUFBVzBLLEVBQUFvM0IsSUFBbEM3OUIsRUFBQXlHLEVBQUF3SixlQUFrQ2hHLFVBQWlCLE9BQUF4RCxFQUFTLFNBQUEyM0IsR0FBQXArQixHQUFlLElBQUF5RyxFQUFBekcsS0FBQXd1QixVQUFBeHVCLEVBQUF3dUIsU0FBQXhHLGNBQThDLE9BQUF2aEIsSUFBQSxVQUFBQSxJQUFBLFNBQUF6RyxFQUFBN0IsTUFBQSxXQUFBNkIsRUFBQTdCLE1BQUEsUUFBQTZCLEVBQUE3QixNQUFBLFFBQUE2QixFQUFBN0IsTUFBQSxhQUFBNkIsRUFBQTdCLE9BQUEsYUFBQXNJLEdBQUEsU0FBQXpHLEVBQUFxK0IsaUJBRzFRLFNBQUFDLEdBQUF0K0IsR0FBZSxJQUFBeUcsRUFBQTAzQixLQUFBcGlDLEVBQUFpRSxFQUFBdStCLFlBQUF2aUMsRUFBQWdFLEVBQUF3K0IsZUFBOEMsR0FBQS8zQixJQUFBMUssUUFBQTQyQixlQUppSyxTQUFBOEwsRUFBQXorQixFQUFBeUcsR0FBaUIsU0FBQXpHLElBQUF5RyxLQUFBekcsSUFBQXlHLEtBQUF6RyxHQUFBLElBQUFBLEVBQUE0dUIsWUFBQW5vQixHQUFBLElBQUFBLEVBQUFtb0IsU0FBQTZQLEVBQUF6K0IsRUFBQXlHLEVBQUFrVixZQUFBLGFBQUEzYixJQUFBMCtCLFNBQUFqNEIsS0FBQXpHLEVBQUEyK0IsNEJBQUEsR0FBQTMrQixFQUFBMitCLHdCQUFBbDRCLE1BSWxMZzRCLENBQUExaUMsRUFBQTQyQixjQUFBOWUsZ0JBQUE5WCxHQUFBLENBQXFFLFVBQUFDLEdBQUFvaUMsR0FBQXJpQyxHQUFBLEdBQUEwSyxFQUFBekssRUFBQTRpQyxXQUFBLEtBQUE1K0IsRUFBQWhFLEVBQUE2aUMsT0FBQTcrQixFQUFBeUcsR0FBQSxtQkFBQTFLLElBQUEraUMsZUFBQXI0QixFQUFBMUssRUFBQWdqQyxhQUFBci9CLEtBQUF3SixJQUFBbEosRUFBQWpFLEVBQUFZLE1BQUEyRyxhQUE0SSxJQUFBdEQsR0FBQXlHLEVBQUExSyxFQUFBNDJCLGVBQUExb0IsV0FBQXhELEVBQUFxd0IsYUFBQXIzQixRQUFBdS9CLGFBQUEsQ0FBK0VoL0IsSUFBQWcvQixlQUFtQixJQUFBeCtCLEVBQUF6RSxFQUFBcXRCLFlBQUE5bEIsT0FBQWpELEVBQUFYLEtBQUF3SixJQUFBbE4sRUFBQTRpQyxNQUFBcCtCLEdBQWlEeEUsT0FBQSxJQUFBQSxFQUFBNmlDLElBQUF4K0IsRUFBQVgsS0FBQXdKLElBQUFsTixFQUFBNmlDLElBQUFyK0IsSUFBcUNSLEVBQUE0cUIsUUFBQXZxQixFQUFBckUsSUFBQXdFLEVBQUF4RSxJQUFBcUUsSUFBQUcsR0FBOEJBLEVBQUF3OUIsR0FBQWppQyxFQUFBc0UsR0FBVSxJQUFBZ1QsRUFBQTJxQixHQUFBamlDLEVBQzllQyxHQUFHd0UsR0FBQTZTLElBQUEsSUFBQXJULEVBQUFpL0IsWUFBQWovQixFQUFBay9CLGFBQUExK0IsRUFBQXk5QixNQUFBaitCLEVBQUFtL0IsZUFBQTMrQixFQUFBMDlCLFFBQUFsK0IsRUFBQW8vQixZQUFBL3JCLEVBQUE0cUIsTUFBQWorQixFQUFBcS9CLGNBQUFoc0IsRUFBQTZxQixXQUFBejNCLElBQUE2NEIsZUFBQUMsU0FBQS8rQixFQUFBeTlCLEtBQUF6OUIsRUFBQTA5QixRQUFBbCtCLEVBQUF3L0Isa0JBQUFuL0IsRUFBQXJFLEdBQUFnRSxFQUFBeS9CLFNBQUFoNUIsR0FBQXpHLEVBQUE0cUIsT0FBQXZYLEVBQUE0cUIsS0FBQTVxQixFQUFBNnFCLFVBQUF6M0IsRUFBQWk1QixPQUFBcnNCLEVBQUE0cUIsS0FBQTVxQixFQUFBNnFCLFFBQUFsK0IsRUFBQXkvQixTQUFBaDVCLEtBQTZSLElBQUxBLEVBQUEsR0FBS3pHLEVBQUFqRSxFQUFRaUUsSUFBQTJiLFlBQWUsSUFBQTNiLEVBQUE0dUIsVUFBQW5vQixFQUFBMUQsS0FBQSxDQUF5QjQ4QixRQUFBMy9CLEVBQUE0L0IsS0FBQTUvQixFQUFBNi9CLFdBQUFDLElBQUE5L0IsRUFBQSsvQixZQUFxRixJQUF2QyxtQkFBQWhrQyxFQUFBaWtDLE9BQUFqa0MsRUFBQWlrQyxRQUF1Q2prQyxFQUFBLEVBQVFBLEVBQUEwSyxFQUFBbkQsT0FBV3ZILEtBQUFpRSxFQUFBeUcsRUFBQTFLLElBQUE0akMsUUFBQUUsV0FBQTcvQixFQUFBNC9CLEtBQUE1L0IsRUFBQTIvQixRQUFBSSxVQUFBLy9CLEVBQUE4L0IsS0FDeGIsSUFBQUcsR0FBQW5ZLEdBQUEsaUJBQUE3ZCxVQUFBLElBQUFBLFNBQUFpaEIsYUFBQWdWLEdBQUEsQ0FBb0VDLE9BQUEsQ0FBUWpiLHdCQUFBLENBQXlCc0csUUFBQSxXQUFBQyxTQUFBLG1CQUE4Q2xHLGFBQUEsaUZBQUFsa0IsTUFBQSxPQUEyRysrQixHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxJQUFBLEVBQzlQLFNBQUFDLEdBQUF4Z0MsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBMEssRUFBQWhILFNBQUFnSCxJQUFBd0QsU0FBQSxJQUFBeEQsRUFBQW1vQixTQUFBbm9CLElBQUFrc0IsY0FBK0QsT0FBQTROLElBQUEsTUFBQUgsU0FBQXZDLEdBQUE5aEMsR0FBQSxNQUE2QyxtQkFBTEEsRUFBQXFrQyxLQUFLaEMsR0FBQXJpQyxLQUFBLENBQStCNmlDLE1BQUE3aUMsRUFBQStpQyxlQUFBRCxJQUFBOWlDLEVBQUFnakMsY0FBMENoakMsRUFBQSxDQUE2RW1qQyxZQUE3RW5qQyxLQUFBNDJCLGVBQUE1MkIsRUFBQTQyQixjQUFBbUUsYUFBQXIzQixRQUFBdS9CLGdCQUE2RUUsV0FBQUMsYUFBQXBqQyxFQUFBb2pDLGFBQUFDLFVBQUFyakMsRUFBQXFqQyxVQUFBQyxZQUFBdGpDLEVBQUFzakMsYUFBc0dpQixJQUFBbkosR0FBQW1KLEdBQUF2a0MsR0FBQSxNQUFBdWtDLEdBQUF2a0MsR0FBQWlFLEVBQUFnZixHQUFBaUwsVUFBQWlXLEdBQUFDLE9BQUFFLEdBQUFyZ0MsRUFBQXlHLElBQUF0SSxLQUFBLFNBQUE2QixFQUFBZCxPQUFBa2hDLEdBQUF2WSxFQUFBN25CLE9BQ3pYLElBQUF5Z0MsR0FBQSxDQUFRemIsV0FBQWtiLEdBQUFuYixjQUFBLFNBQUEva0IsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUE4QyxJQUFBcUUsRUFBQUcsRUFBQXhFLEVBQUF5RCxTQUFBekQsSUFBQWlPLFNBQUEsSUFBQWpPLEVBQUE0eUIsU0FBQTV5QixJQUFBMjJCLGNBQWlFLEtBQUF0eUIsR0FBQUcsR0FBQSxDQUFZUixFQUFBLENBQUdRLEVBQUFvOUIsR0FBQXA5QixHQUFRSCxFQUFBaWxCLEVBQUFvYixTQUFjLFFBQUFydEIsRUFBQSxFQUFZQSxFQUFBaFQsRUFBQWlELE9BQVcrUCxJQUFBLENBQUssSUFBQWdNLEVBQUFoZixFQUFBZ1QsR0FBVyxJQUFBN1MsRUFBQWpELGVBQUE4aEIsS0FBQTdlLEVBQUE2ZSxHQUFBLENBQWdDN2UsR0FBQSxFQUFLLE1BQUFSLEdBQVNRLEdBQUEsRUFBS0gsR0FBQUcsRUFBSyxHQUFBSCxFQUFBLFlBQWtDLE9BQWpCRyxFQUFBaUcsRUFBQTBnQixFQUFBMWdCLEdBQUFoSCxPQUFpQk8sR0FBVSxhQUFBdXVCLEdBQUEvdEIsSUFBQSxTQUFBQSxFQUFBNjlCLG1CQUFBK0IsR0FBQTUvQixFQUFBNi9CLEdBQUE1NUIsRUFBQTY1QixHQUFBLE1BQW9FLE1BQU0sV0FBQUEsR0FBQUQsR0FBQUQsR0FBQSxLQUEwQixNQUFNLGdCQUFBRyxJQUFBLEVBQXVCLE1BQU0scURBQUFBLElBQUEsRUFBQUMsR0FBQXprQyxFQUFBQyxHQUFzRSx5QkFBQWlrQyxHQUFBLE1BQ3BmLGlDQUFBTyxHQUFBemtDLEVBQUFDLEdBQTJDLGNBQzNDLFNBQUEya0MsR0FBQTNnQyxFQUFBeUcsR0FBMkUsT0FBMUR6RyxFQUFBN0MsRUFBQSxDQUFLMGpCLGNBQUEsR0FBZ0JwYSxJQUFJQSxFQURrVixTQUFBekcsR0FBZSxJQUFBeUcsRUFBQSxHQUE2RCxPQUFwRHlZLEVBQUEyQyxTQUFBcGQsUUFBQXpFLEVBQUEsU0FBQUEsR0FBa0MsTUFBQUEsSUFBQXlHLEdBQUF6RyxLQUFrQnlHLEVBQzlabTZCLENBQUFuNkIsRUFBQW9hLGFBQUE3Z0IsRUFBQTZnQixTQUFBcGEsR0FBaUN6RyxFQUFTLFNBQUE2Z0MsR0FBQTdnQyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQWlDLEdBQVpnRSxJQUFBdWEsUUFBWTlULEVBQUEsQ0FBTUEsRUFBQSxHQUFLLFFBQUFqRyxFQUFBLEVBQVlBLEVBQUF6RSxFQUFBdUgsT0FBVzlDLElBQUFpRyxFQUFBLElBQUExSyxFQUFBeUUsS0FBQSxFQUFtQixJQUFBekUsRUFBQSxFQUFRQSxFQUFBaUUsRUFBQXNELE9BQVd2SCxJQUFBeUUsRUFBQWlHLEVBQUFsSixlQUFBLElBQUF5QyxFQUFBakUsR0FBQVksT0FBQXFELEVBQUFqRSxHQUFBK2tDLFdBQUF0Z0MsSUFBQVIsRUFBQWpFLEdBQUEra0MsU0FBQXRnQyxNQUFBeEUsSUFBQWdFLEVBQUFqRSxHQUFBZ2xDLGlCQUFBLE9BQTRHLENBQXVCLElBQWxCaGxDLEVBQUEsR0FBQSsxQixHQUFBLzFCLEdBQVcwSyxFQUFBLEtBQU9qRyxFQUFBLEVBQVFBLEVBQUFSLEVBQUFzRCxPQUFXOUMsSUFBQSxDQUFLLEdBQUFSLEVBQUFRLEdBQUE3RCxRQUFBWixFQUFpRSxPQUE5Q2lFLEVBQUFRLEdBQUFzZ0MsVUFBQSxPQUFpQjlrQyxJQUFBZ0UsRUFBQVEsR0FBQXVnQyxpQkFBQSxJQUFvQyxPQUFBdDZCLEdBQUF6RyxFQUFBUSxHQUFBb21CLFdBQUFuZ0IsRUFBQXpHLEVBQUFRLElBQWtDLE9BQUFpRyxNQUFBcTZCLFVBQUEsSUFDbGMsU0FBQUUsR0FBQWhoQyxFQUFBeUcsR0FBZ0UsT0FBL0MsTUFBQUEsRUFBQXc2Qix5QkFBQWxpQixFQUFBLE1BQStDNWhCLEVBQUEsR0FBV3NKLEVBQUEsQ0FBSTlKLFdBQUEsRUFBQXMxQixrQkFBQSxFQUFBcFIsU0FBQSxHQUFBN2dCLEVBQUFreUIsY0FBQUcsZUFBNEUsU0FBQTZPLEdBQUFsaEMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBMEssRUFBQTlKLE1BQWMsTUFBQVosTUFBQTBLLEVBQUF3ckIsYUFBQSxPQUFBeHJCLElBQUFvYSxZQUFBLE1BQUE5a0IsR0FBQWdqQixFQUFBLE1BQUF6WSxNQUFBNkYsUUFBQTFGLEtBQUEsR0FBQUEsRUFBQW5ELFFBQUF5YixFQUFBLE1BQUF0WSxJQUFBLElBQUExSyxFQUFBMEssR0FBQSxNQUFBMUssTUFBQSxLQUFxSmlFLEVBQUFreUIsY0FBQSxDQUFpQkcsYUFBQVAsR0FBQS8xQixJQUNoVyxTQUFBb2xDLEdBQUFuaEMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBKzFCLEdBQUFyckIsRUFBQTlKLE9BQUFYLEVBQUE4MUIsR0FBQXJyQixFQUFBd3JCLGNBQXVDLE1BQUFsMkIsT0FBQSxHQUFBQSxLQUFBaUUsRUFBQXJELFFBQUFxRCxFQUFBckQsTUFBQVosR0FBQSxNQUFBMEssRUFBQXdyQixjQUFBanlCLEVBQUFpeUIsZUFBQWwyQixJQUFBaUUsRUFBQWl5QixhQUFBbDJCLElBQXdHLE1BQUFDLElBQUFnRSxFQUFBaXlCLGFBQUEsR0FBQWoyQixHQUErQixTQUFBb2xDLEdBQUFwaEMsR0FBZSxJQUFBeUcsRUFBQXpHLEVBQUFvcEIsWUFBb0IzaUIsSUFBQXpHLEVBQUFreUIsY0FBQUcsZUFBQXJ5QixFQUFBckQsTUFBQThKLEdBSHpLOGYsRUFBQUMsdUJBQUEsMEhBQUFubEIsTUFBQSxNQUFnS21rQixFQUFBNEIsRUFBTTNCLEVBQUF5QixFQUFNeEIsRUFBQXlCLEVBQU1aLEVBQUFFLHlCQUFBLENBQTZCNGEsa0JBQUF6RSxHQUFBMEUsc0JBQUF6SyxHQUFBMEssa0JBQUF6TixHQUFBME4sa0JBQUFmLEdBQUFnQix1QkFBQXRWLEtBR1EsSUFBQXVWLEdBQUEsQ0FBUTlzQixLQUFBLCtCQUFBK3NCLE9BQUEscUNBQUFDLElBQUEsOEJBQ3hSLFNBQUFDLEdBQUE3aEMsR0FBZSxPQUFBQSxHQUFVLDZDQUE4QyxzREFBdUQsOENBQThDLFNBQUE4aEMsR0FBQTloQyxFQUFBeUcsR0FBaUIsYUFBQXpHLEdBQUEsaUNBQUFBLEVBQUE2aEMsR0FBQXA3QixHQUFBLCtCQUFBekcsR0FBQSxrQkFBQXlHLEVBQUEsK0JBQUF6RyxFQUM3TCxJQUFBK2hDLFFBQUEsRUFBQUMsR0FBQSxTQUFBaGlDLEdBQTZCLDBCQUFBaWlDLGFBQUFDLHdCQUFBLFNBQUF6N0IsRUFBQTFLLEVBQUFDLEVBQUF3RSxHQUFrRnloQyxNQUFBQyx3QkFBQSxXQUF5QyxPQUFBbGlDLEVBQUF5RyxFQUFBMUssTUFBb0JpRSxFQUE1SyxDQUErSyxTQUFBQSxFQUFBeUcsR0FBZSxHQUFBekcsRUFBQW1pQyxlQUFBVCxHQUFBRSxLQUFBLGNBQUE1aEMsSUFBQW9pQyxVQUFBMzdCLE1BQTBELENBQTBFLEtBQXJFczdCLE9BQUE5M0IsU0FBQUUsY0FBQSxRQUFxQ2k0QixVQUFBLFFBQUEzN0IsRUFBQSxTQUFnQ0EsRUFBQXM3QixHQUFBdm1CLFdBQW9CeGIsRUFBQXdiLFlBQWF4YixFQUFBa1csWUFBQWxXLEVBQUF3YixZQUE2QixLQUFLL1UsRUFBQStVLFlBQWF4YixFQUFBK1AsWUFBQXRKLEVBQUErVSxlQUNsWixTQUFBNm1CLEdBQUFyaUMsRUFBQXlHLEdBQWlCLEdBQUFBLEVBQUEsQ0FBTSxJQUFBMUssRUFBQWlFLEVBQUF3YixXQUFtQixHQUFBemYsT0FBQWlFLEVBQUFzaUMsV0FBQSxJQUFBdm1DLEVBQUE2eUIsU0FBcUQsWUFBZDd5QixFQUFBd21DLFVBQUE5N0IsR0FBc0J6RyxFQUFBb3BCLFlBQUEzaUIsRUFDdkcsSUFBQSs3QixHQUFBLENBQVFDLHlCQUFBLEVBQUFDLG1CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFNBQUEsRUFBQUMsY0FBQSxFQUFBQyxpQkFBQSxFQUFBQyxhQUFBLEVBQUFDLFNBQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLGNBQUEsRUFBQUMsWUFBQSxFQUFBQyxjQUFBLEVBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxTQUFBLEVBQUFDLFlBQUEsRUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQUFDLFlBQUEsRUFBQUMsZUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxpQkFBQSxFQUFBQyxZQUFBLEVBQUFDLFdBQUEsRUFBQUMsWUFBQSxFQUFBQyxTQUFBLEVBQUFDLE9BQUEsRUFBQUMsU0FBQSxFQUFBQyxTQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUFBQyxNQUFBLEVBQUFDLGFBQUEsRUFDUkMsY0FBQSxFQUFBQyxhQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGVBQUEsRUFBQUMsYUFBQSxHQUEwSEMsR0FBQSwwQkFBc0osU0FBQUMsR0FBQXBsQyxFQUFBeUcsRUFBQTFLLEdBQW1CLGFBQUEwSyxHQUFBLGtCQUFBQSxHQUFBLEtBQUFBLEVBQUEsR0FBQTFLLEdBQUEsaUJBQUEwSyxHQUFBLElBQUFBLEdBQUErN0IsR0FBQWpsQyxlQUFBeUMsSUFBQXdpQyxHQUFBeGlDLElBQUEsR0FBQXlHLEdBQUE0K0IsT0FBQTUrQixFQUFBLEtBQ25TLFNBQUE2K0IsR0FBQXRsQyxFQUFBeUcsR0FBMkIsUUFBQTFLLEtBQVZpRSxJQUFBNlAsTUFBVXBKLEVBQUEsR0FBQUEsRUFBQWxKLGVBQUF4QixHQUFBLENBQXVDLElBQUFDLEVBQUEsSUFBQUQsRUFBQWtILFFBQUEsTUFBQXpDLEVBQUE0a0MsR0FBQXJwQyxFQUFBMEssRUFBQTFLLEdBQUFDLEdBQXlDLFVBQUFELE1BQUEsWUFBNEJDLEVBQUFnRSxFQUFBdWxDLFlBQUF4cEMsRUFBQXlFLEdBQUFSLEVBQUFqRSxHQUFBeUUsR0FEaUJwRSxPQUFBaUksS0FBQW0rQixJQUFBLzlCLFFBQUEsU0FBQXpFLEdBQW9DbWxDLEdBQUExZ0MsUUFBQSxTQUFBZ0MsR0FBdUJBLElBQUF6RyxFQUFBNFQsT0FBQSxHQUFBMmQsY0FBQXZ4QixFQUFBb0IsVUFBQSxHQUE2Q29oQyxHQUFBLzdCLEdBQUErN0IsR0FBQXhpQyxPQUM1RixJQUFBd2xDLEdBQUFyb0MsRUFBQSxDQUFVc29DLFVBQUEsR0FBWSxDQUFFQyxNQUFBLEVBQUE1cUIsTUFBQSxFQUFBNnFCLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQWxwQixNQUFBLEVBQUFtcEIsTUFBQSxFQUFBQyxPQUFBLEVBQUEvbkMsUUFBQSxFQUFBZ29DLE9BQUEsRUFBQUMsS0FBQSxJQUM1TCxTQUFBQyxHQUFBdG1DLEVBQUF5RyxHQUFpQkEsSUFBQSsrQixHQUFBeGxDLEtBQUEsTUFBQXlHLEVBQUFvYSxVQUFBLE1BQUFwYSxFQUFBdzZCLDBCQUFBbGlCLEVBQUEsTUFBQS9lLEVBQUEsVUFBQXlHLEVBQUF3NkIsMEJBQUEsTUFBQXg2QixFQUFBb2EsVUFBQTlCLEVBQUEsdUJBQUF0WSxFQUFBdzZCLHlCQUFBLFdBQUF4NkIsRUFBQXc2Qix5QkFBQWxpQixFQUFBLGFBQUF0WSxFQUFBb0osT0FBQSxpQkFBQXBKLEVBQUFvSixPQUFBa1AsRUFBQSxVQUNqQixTQUFBNUcsR0FBQW5ZLEVBQUF5RyxHQUFpQixRQUFBekcsRUFBQWlELFFBQUEsNEJBQUF3RCxFQUFBeUQsR0FBb0QsT0FBQWxLLEdBQVUsMEtBQWtMLGtCQUNqUSxTQUFBdW1DLEdBQUF2bUMsRUFBQXlHLEdBQXFFLElBQUExSyxFQUFBNmhDLEdBQXBENTlCLEVBQUEsSUFBQUEsRUFBQTR1QixVQUFBLEtBQUE1dUIsRUFBQTR1QixTQUFBNXVCLElBQUEyeUIsZUFBZ0Vsc0IsRUFBQTZlLEVBQUE3ZSxHQUFRLFFBQUF6SyxFQUFBLEVBQVlBLEVBQUF5SyxFQUFBbkQsT0FBV3RILElBQUEsQ0FBSyxJQUFBd0UsRUFBQWlHLEVBQUF6SyxHQUFXLElBQUFELEVBQUF3QixlQUFBaUQsS0FBQXpFLEVBQUF5RSxHQUFBLENBQWdDLE9BQUFBLEdBQVUsYUFBQWc5QixHQUFBLFNBQUF4OUIsR0FBNkIsTUFBTSx1QkFBQXc5QixHQUFBLFFBQUF4OUIsR0FBdUN3OUIsR0FBQSxPQUFBeDlCLEdBQWFqRSxFQUFBeXFDLE1BQUEsRUFBVXpxQyxFQUFBaWtDLE9BQUEsRUFBVyxNQUFNLHlCQUFBblIsR0FBQXJ1QixJQUFBZzlCLEdBQUFoOUIsRUFBQVIsR0FBMEMsTUFBTSw2Q0FBZ0QsYUFBQStvQixHQUFBOWxCLFFBQUF6QyxJQUFBNE4sR0FBQTVOLEVBQUFSLEdBQW1DakUsRUFBQXlFLElBQUEsSUFBVSxTQUFBaW1DLE1BQWUsSUFBQUMsR0FBQSxLQUFBQyxHQUFBLEtBQ3hiLFNBQUFDLEdBQUE1bUMsRUFBQXlHLEdBQWlCLE9BQUF6RyxHQUFVLDZEQUFBeUcsRUFBQW9nQyxVQUE2RSxTQUFTLFNBQUFDLEdBQUE5bUMsRUFBQXlHLEdBQWlCLG1CQUFBekcsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLEdBQUEsaUJBQUF5RyxFQUFBb2EsVUFBQSxpQkFBQXBhLEVBQUFvYSxVQUFBLGlCQUFBcGEsRUFBQXc2Qix5QkFBQSxPQUFBeDZCLEVBQUF3NkIseUJBQUEsTUFBQXg2QixFQUFBdzZCLHdCQUFBOEYsT0FDbEksSUFBQUMsR0FBQSxtQkFBQTd3QiwyQkFBQSxFQUFBOHdCLEdBQUEsbUJBQUFDLCtCQUFBLEVBQUFDLEdBQUEzcUMsRUFBQTRxQywwQkFBQUMsR0FBQTdxQyxFQUFBOHFDLHdCQUU2QyxTQUFBQyxHQUFBdm5DLEdBQWUsSUFBQUEsSUFBQXNiLFlBQW9CdGIsR0FBQSxJQUFBQSxFQUFBNHVCLFVBQUEsSUFBQTV1QixFQUFBNHVCLFVBQWtDNXVCLElBQUFzYixZQUFpQixPQUFBdGIsRUFBUyxTQUFBd25DLEdBQUF4bkMsR0FBZSxJQUFBQSxJQUFBd2IsV0FBbUJ4YixHQUFBLElBQUFBLEVBQUE0dUIsVUFBQSxJQUFBNXVCLEVBQUE0dUIsVUFBa0M1dUIsSUFBQXNiLFlBQWlCLE9BQUF0YixFQUFTLElBQUF5bkMsSUFBUSxJQUFBQyxHQUFBLEdBQUFDLElBQUEsRUFBZ0IsU0FBQWxwQyxHQUFBdUIsR0FBYyxFQUFBMm5DLEtBQUEzbkMsRUFBQXFnQixRQUFBcW5CLEdBQUFDLElBQUFELEdBQUFDLElBQUEsS0FBQUEsTUFBMEMsU0FBQWhwQyxHQUFBcUIsRUFBQXlHLEdBQXFCaWhDLEtBQUxDLElBQUszbkMsRUFBQXFnQixRQUFpQnJnQixFQUFBcWdCLFFBQUE1WixFQUFZLElBQUFtaEMsR0FBQSxHQUFTM25CLEdBQUEsQ0FBSUksUUFBQXVuQixJQUFXeG5CLEdBQUEsQ0FBSUMsU0FBQSxHQUFXd25CLEdBQUFELEdBQ25aLFNBQUFFLEdBQUE5bkMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBaUUsRUFBQTdCLEtBQUF3UyxhQUEwQixJQUFBNVUsRUFBQSxPQUFBNnJDLEdBQWdCLElBQUE1ckMsRUFBQWdFLEVBQUEybUIsVUFBa0IsR0FBQTNxQixLQUFBK3JDLDhDQUFBdGhDLEVBQUEsT0FBQXpLLEVBQUFnc0MsMENBQTJHLElBQVEzbkMsRUFBUkcsRUFBQSxHQUFXLElBQUFILEtBQUF0RSxFQUFBeUUsRUFBQUgsR0FBQW9HLEVBQUFwRyxHQUFzSSxPQUFqSHJFLEtBQUFnRSxJQUFBMm1CLFdBQUFvaEIsNENBQUF0aEMsRUFBQXpHLEVBQUFnb0MsMENBQUF4bkMsR0FBaUhBLEVBQVMsU0FBQThmLEdBQUF0Z0IsR0FBb0MsY0FBdEJBLElBQUF5USxtQkFBa0QsU0FBQXczQixHQUFBam9DLEdBQWV2QixHQUFBMmhCLElBQU8zaEIsR0FBQXdoQixJQUFPLFNBQUFpb0IsR0FBQWxvQyxHQUFldkIsR0FBQTJoQixJQUFPM2hCLEdBQUF3aEIsSUFDcmMsU0FBQWtvQixHQUFBbm9DLEVBQUF5RyxFQUFBMUssR0FBbUJra0IsR0FBQUksVUFBQXVuQixJQUFBN29CLEVBQUEsT0FBK0JwZ0IsR0FBQXNoQixHQUFBeFosR0FBUzlILEdBQUF5aEIsR0FBQXJrQixHQUFTLFNBQUFxc0MsR0FBQXBvQyxFQUFBeUcsRUFBQTFLLEdBQW1CLElBQUFDLEVBQUFnRSxFQUFBMm1CLFVBQXdDLEdBQXRCM21CLEVBQUF5RyxFQUFBZ0ssa0JBQXNCLG1CQUFBelUsRUFBQXFzQyxnQkFBQSxPQUFBdHNDLEVBQXdFLFFBQUF5RSxLQUF0QnhFLElBQUFxc0Msa0JBQXNCN25DLEtBQUFSLEdBQUErZSxFQUFBLE1BQUF3UixHQUFBOXBCLElBQUEsVUFBQWpHLEdBQXlELE9BQUFyRCxFQUFBLEdBQVdwQixFQUFBQyxHQUFNLFNBQUFzc0MsR0FBQXRvQyxHQUFlLElBQUF5RyxFQUFBekcsRUFBQTJtQixVQUE4RyxPQUE1RmxnQixPQUFBOGhDLDJDQUFBWCxHQUFxREMsR0FBQTVuQixHQUFBSSxRQUFhMWhCLEdBQUFzaEIsR0FBQXhaLEdBQVM5SCxHQUFBeWhCLE1BQUFDLFVBQWlCLEVBQzlZLFNBQUFtb0IsR0FBQXhvQyxFQUFBeUcsRUFBQTFLLEdBQW1CLElBQUFDLEVBQUFnRSxFQUFBMm1CLFVBQWtCM3FCLEdBQUEraUIsRUFBQSxPQUFrQmhqQixHQUFBMEssRUFBQTJoQyxHQUFBcG9DLEVBQUF5RyxFQUFBb2hDLElBQUE3ckMsRUFBQXVzQywwQ0FBQTloQyxFQUFBaEksR0FBQTJoQixJQUFBM2hCLEdBQUF3aEIsSUFBQXRoQixHQUFBc2hCLEdBQUF4WixJQUFBaEksR0FBQTJoQixJQUE2RnpoQixHQUFBeWhCLEdBQUFya0IsR0FBUyxJQUFBMHNDLEdBQUEsS0FBQUMsR0FBQSxLQUFvQixTQUFBQyxHQUFBM29DLEdBQWUsZ0JBQUF5RyxHQUFtQixJQUFJLE9BQUF6RyxFQUFBeUcsR0FBWSxNQUFBMUssTUFFbk8sU0FBQTZzQyxHQUFBNW9DLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBcUIrSCxLQUFBd0YsSUFBQXZKLEVBQVcrRCxLQUFBOUcsSUFBQWxCLEVBQVdnSSxLQUFBMHpCLFFBQUExekIsS0FBQXl6QixNQUFBenpCLEtBQUF1akIsT0FBQXZqQixLQUFBNGlCLFVBQUE1aUIsS0FBQTVGLEtBQUE0RixLQUFBOGtDLFlBQUEsS0FBbUY5a0MsS0FBQWYsTUFBQSxFQUFhZSxLQUFBMGMsSUFBQSxLQUFjMWMsS0FBQStrQyxhQUFBcmlDLEVBQW9CMUMsS0FBQWdsQyxvQkFBQWhsQyxLQUFBaWxDLGNBQUFqbEMsS0FBQWtsQyxZQUFBbGxDLEtBQUFtbEMsY0FBQSxLQUFxRm5sQyxLQUFBbEgsS0FBQWIsRUFBWStILEtBQUFzekIsVUFBQSxFQUFpQnR6QixLQUFBb2xDLFdBQUFwbEMsS0FBQXFsQyxZQUFBcmxDLEtBQUFzbEMsV0FBQSxLQUFzRHRsQyxLQUFBdWxDLG9CQUFBdmxDLEtBQUF3bEMsZUFBQSxFQUErQ3hsQyxLQUFBaXpCLFVBQUEsS0FBb0IsU0FBQXpXLEdBQUF2Z0IsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFvQixXQUFBNHNDLEdBQUE1b0MsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUM1YSxTQUFBd3RDLEdBQUF4cEMsR0FBNkIsVUFBZEEsSUFBQTFDLGFBQWMwQyxFQUFBOGYsa0JBQzdCLFNBQUEycEIsR0FBQXpwQyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBZzNCLFVBQ1csT0FETyxPQUFBajdCLE1BQUF3a0IsR0FBQXZnQixFQUFBdUosSUFBQTlDLEVBQUF6RyxFQUFBL0MsSUFBQStDLEVBQUFuRCxPQUFBZ3NDLFlBQUE3b0MsRUFBQTZvQyxZQUFBOXNDLEVBQUFvQyxLQUFBNkIsRUFBQTdCLEtBQUFwQyxFQUFBNHFCLFVBQUEzbUIsRUFBQTJtQixVQUFBNXFCLEVBQUFpN0IsVUFBQWgzQixJQUFBZzNCLFVBQUFqN0IsTUFBQStzQyxhQUFBcmlDLEVBQUExSyxFQUFBczdCLFVBQUEsRUFBQXQ3QixFQUFBc3RDLFdBQUEsS0FBQXR0QyxFQUFBcXRDLFlBQUEsS0FBQXJ0QyxFQUFBb3RDLFdBQUEsTUFBMk5wdEMsRUFBQXV0QyxvQkFBQXRwQyxFQUFBc3BDLG9CQUE0Q3Z0QyxFQUFBd3RDLGVBQUF2cEMsRUFBQXVwQyxlQUFrQ3h0QyxFQUFBeTdCLE1BQUF4M0IsRUFBQXczQixNQUFnQno3QixFQUFBbXRDLGNBQUFscEMsRUFBQWtwQyxjQUFnQ250QyxFQUFBaXRDLGNBQUFocEMsRUFBQWdwQyxjQUFnQ2p0QyxFQUFBa3RDLFlBQUFqcEMsRUFBQWlwQyxZQUE0Qmx0QyxFQUFBZ3RDLG9CQUFBL29DLEVBQUErb0Msb0JBQTRDaHRDLEVBQUEwN0IsUUFBQXozQixFQUFBeTNCLFFBQ3BlMTdCLEVBQUFpSCxNQUFBaEQsRUFBQWdELE1BQWdCakgsRUFBQTBrQixJQUFBemdCLEVBQUF5Z0IsSUFBWTFrQixFQUM1QixTQUFBMnRDLEdBQUExcEMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsRUFBQUgsR0FBeUIsSUFBQWdULEVBQUEsRUFBWSxHQUFKclgsRUFBQWdFLEVBQUksbUJBQUFBLEVBQUF3cEMsR0FBQXhwQyxLQUFBcVQsRUFBQSxRQUFzQyxvQkFBQXJULEVBQUFxVCxFQUFBLE9BQWdDclQsRUFBQSxPQUFBQSxHQUFpQixLQUFBMnZCLEdBQUEsT0FBQWdhLEdBQUE1dEMsRUFBQThrQixTQUFBcmdCLEVBQUFILEVBQUFvRyxHQUFvQyxLQUFBdXBCLEdBQUEsT0FBQTRaLEdBQUE3dEMsRUFBQSxFQUFBeUUsRUFBQUgsRUFBQW9HLEdBQTZCLEtBQUFtcEIsR0FBQSxPQUFBZ2EsR0FBQTd0QyxFQUFBLEVBQUF5RSxFQUFBSCxFQUFBb0csR0FBNkIsS0FBQW9wQixHQUFBLE9BQUE3dkIsRUFBQXVnQixHQUFBLEdBQUF4a0IsRUFBQTBLLEVBQUEsRUFBQWpHLElBQUFxb0MsWUFBQWhaLEdBQUE3dkIsRUFBQTdCLEtBQUEweEIsR0FBQTd2QixFQUFBdXBDLGVBQUFscEMsRUFBQUwsRUFBK0UsS0FBQWt3QixHQUFBLE9BQUFsd0IsRUFBQXVnQixHQUFBLEdBQUF4a0IsRUFBQTBLLEVBQUFqRyxJQUFBcW9DLFlBQUEzWSxHQUFBbHdCLEVBQUE3QixLQUFBK3hCLEdBQUFsd0IsRUFBQXVwQyxlQUFBbHBDLEVBQUFMLEVBQTZFLDRCQUFBQSxHQUFBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQXVSLFVBQTRELEtBQUF1ZSxHQUFBemMsRUFBQSxHQUFhLE1BQUFyVCxFQUFRLEtBQUErdkIsR0FBQTFjLEVBQUEsRUFBWSxNQUFBclQsRUFBUSxLQUFBaXdCLEdBQUE1YyxFQUFBLEdBQWEsTUFBQXJULEVBQVEsS0FBQW13QixHQUFBOWMsRUFDaGYsR0FBRyxNQUFBclQsRUFBUSxLQUFBb3dCLEdBQUEvYyxFQUFBLEdBQWFyWCxFQUFBLEtBQU8sTUFBQWdFLEVBQVErZSxFQUFBLFlBQUEvZSxhQUFBLElBQXdGLE9BQXpEeUcsRUFBQThaLEdBQUFsTixFQUFBdFgsRUFBQTBLLEVBQUFqRyxJQUFhcW9DLFlBQUE3b0MsRUFBZ0J5RyxFQUFBdEksS0FBQW5DLEVBQVN5SyxFQUFBOGlDLGVBQUFscEMsRUFBbUJvRyxFQUFTLFNBQUFrakMsR0FBQTNwQyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQXFELE9BQWhDZ0UsRUFBQXVnQixHQUFBLEVBQUF2Z0IsRUFBQWhFLEVBQUF5SyxJQUFhOGlDLGVBQUF4dEMsRUFBbUJpRSxFQUFTLFNBQUE0cEMsR0FBQTVwQyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQWdHLE9BQTNFZ0UsRUFBQXVnQixHQUFBLEVBQUF2Z0IsRUFBQWhFLEVBQUF5SyxHQUFhQSxFQUFBLE1BQUFBLEdBQUFtcEIsR0FBQUksR0FBa0Jod0IsRUFBQTZvQyxZQUFBcGlDLEVBQWdCekcsRUFBQTdCLEtBQUFzSSxFQUFTekcsRUFBQXVwQyxlQUFBeHRDLEVBQW1CaUUsRUFBUyxTQUFBNnBDLEdBQUE3cEMsRUFBQXlHLEVBQUExSyxHQUFzRCxPQUFuQ2lFLEVBQUF1Z0IsR0FBQSxFQUFBdmdCLEVBQUEsS0FBQXlHLElBQWdCOGlDLGVBQUF4dEMsRUFBbUJpRSxFQUNyVyxTQUFBOHBDLEdBQUE5cEMsRUFBQXlHLEVBQUExSyxHQUFzTCxPQUFuSzBLLEVBQUE4WixHQUFBLFNBQUF2Z0IsRUFBQTZnQixTQUFBN2dCLEVBQUE2Z0IsU0FBQSxHQUFBN2dCLEVBQUEvQyxJQUFBd0osSUFBK0M4aUMsZUFBQXh0QyxFQUFtQjBLLEVBQUFrZ0IsVUFBQSxDQUFhd1csY0FBQW45QixFQUFBbTlCLGNBQUE0TSxnQkFBQSxLQUFBQyxlQUFBaHFDLEVBQUFncUMsZ0JBQW9GdmpDLEVBQVMsU0FBQXdqQyxHQUFBanFDLEVBQUF5RyxHQUFpQnpHLEVBQUFrcUMsVUFBQSxFQUFjLElBQUFudUMsRUFBQWlFLEVBQUFtcUMsb0JBQTRCLElBQUFwdUMsRUFBQWlFLEVBQUFtcUMsb0JBQUFucUMsRUFBQW9xQyxrQkFBQTNqQyxFQUFBMUssRUFBQTBLLEVBQUF6RyxFQUFBbXFDLG9CQUFBMWpDLEVBQUF6RyxFQUFBb3FDLGtCQUFBM2pDLElBQUF6RyxFQUFBb3FDLGtCQUFBM2pDLEdBQTZINGpDLEdBQUE1akMsRUFBQXpHLEdBRWxXLFNBQUFzcUMsR0FBQXRxQyxFQUFBeUcsR0FBaUJ6RyxFQUFBa3FDLFVBQUEsRUFBY2xxQyxFQUFBdXFDLGtCQUFBOWpDLElBQUF6RyxFQUFBdXFDLGlCQUFBLEdBQThDLElBQUF4dUMsRUFBQWlFLEVBQUFtcUMsb0JBQUFudUMsRUFBQWdFLEVBQUFvcUMsa0JBQWtEcnVDLElBQUEwSyxFQUFBekcsRUFBQW1xQyxvQkFBQW51QyxJQUFBeUssRUFBQXpHLEVBQUFvcUMsa0JBQUEsRUFBQXB1QyxNQUFBeUssSUFBQXpHLEVBQUFvcUMsa0JBQUFydUMsR0FBeUZBLEVBQUFpRSxFQUFBd3FDLHNCQUEwQnh1QyxFQUFBZ0UsRUFBQXlxQyxvQkFBd0IsSUFBQTF1QyxFQUFBaUUsRUFBQXdxQyxzQkFBQXhxQyxFQUFBeXFDLG9CQUFBaGtDLEVBQUExSyxFQUFBMEssRUFBQXpHLEVBQUF3cUMsc0JBQUEvakMsRUFBQXpLLEVBQUF5SyxJQUFBekcsRUFBQXlxQyxvQkFBQWhrQyxHQUFtSDRqQyxHQUFBNWpDLEVBQUF6RyxHQUNsWixTQUFBMHFDLEdBQUExcUMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBaUUsRUFBQW1xQyxvQkFBNEUsT0FBdEJwdUMsRUFBQTBLLE1BQUExSyxJQUExQmlFLElBQUF3cUMsdUJBQXFDL2pDLE1BQUF6RyxHQUFXeUcsRUFBUyxTQUFBNGpDLEdBQUFycUMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBMEssRUFBQStqQyxzQkFBQXh1QyxFQUFBeUssRUFBQWdrQyxvQkFBQWpxQyxFQUFBaUcsRUFBQTBqQyxvQkFBQTlwQyxFQUFBb0csRUFBQThqQyxpQkFBK0csS0FBWi9wQyxFQUFBLElBQUFBLElBQUFILEtBQVksSUFBQUwsR0FBQWhFLEVBQUFnRSxLQUFBUSxFQUFBeEUsR0FBK0IsS0FBSmdFLEVBQUFRLElBQUl6RSxFQUFBaUUsTUFBQWpFLEdBQWtCMEssRUFBQWtrQywyQkFBQW5xQyxFQUErQmlHLEVBQUE4aUMsZUFBQXZwQyxFQUFtQixTQUFBd2dCLEdBQUF4Z0IsRUFBQXlHLEdBQWdCLEdBQUF6RyxLQUFBNFEsYUFBaUQsUUFBQTdVLEtBQTNCMEssRUFBQXRKLEVBQUEsR0FBTXNKLEdBQUl6RyxJQUFBNFEsa0JBQWlCLElBQUFuSyxFQUFBMUssS0FBQTBLLEVBQUExSyxHQUFBaUUsRUFBQWpFLElBQTBDLE9BQUEwSyxFQUN6RixJQUFBbWtDLElBQUEsSUFBQTFyQixFQUFBK0MsV0FBQXhILEtBQzNWLFNBQUFvd0IsR0FBQTdxQyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQWdERCxFQUFBLE9BQVRBLElBQUFDLEVBQWxCeUssRUFBQXpHLEVBQUFncEMsZ0JBQTJCdmlDLEVBQUF0SixFQUFBLEdBQTZCc0osRUFBQTFLLEdBQU1pRSxFQUFBZ3BDLGNBQUFqdEMsRUFBa0MsUUFBaEJDLEVBQUFnRSxFQUFBaXBDLGNBQWdCLElBQUFqcEMsRUFBQXVwQyxpQkFBQXZ0QyxFQUFBOHVDLFVBQUEvdUMsR0FDckgsSUFBQWd2QyxHQUFBLENBQVF4ckIsVUFBQSxTQUFBdmYsR0FBc0IsU0FBQUEsSUFBQWdyQyxzQkFBQSxJQUFBNVQsR0FBQXAzQixJQUE2QzBmLGdCQUFBLFNBQUExZixFQUFBeUcsRUFBQTFLLEdBQWlDaUUsSUFBQWdyQyxvQkFBd0IsSUFBQWh2QyxFQUFBaXZDLEtBQXFCenFDLEVBQUEwcUMsR0FBVmx2QyxFQUFBbXZDLEdBQUFudkMsRUFBQWdFLElBQXNCUSxFQUFBNHFDLFFBQUEza0MsRUFBWSxNQUFBMUssSUFBQXlFLEVBQUE2cUMsU0FBQXR2QyxHQUFxQ3V2QyxLQUFLQyxHQUFBdnJDLEVBQUFRLEdBQVFnckMsR0FBQXhyQyxFQUFBaEUsSUFBUXlqQixvQkFBQSxTQUFBemYsRUFBQXlHLEVBQUExSyxHQUFxQ2lFLElBQUFnckMsb0JBQXdCLElBQUFodkMsRUFBQWl2QyxLQUFxQnpxQyxFQUFBMHFDLEdBQVZsdkMsRUFBQW12QyxHQUFBbnZDLEVBQUFnRSxJQUFzQlEsRUFBQStJLElBQUFraUMsR0FBU2pyQyxFQUFBNHFDLFFBQUEza0MsRUFBWSxNQUFBMUssSUFBQXlFLEVBQUE2cUMsU0FBQXR2QyxHQUFxQ3V2QyxLQUFLQyxHQUFBdnJDLEVBQUFRLEdBQVFnckMsR0FBQXhyQyxFQUFBaEUsSUFBUXdqQixtQkFBQSxTQUFBeGYsRUFBQXlHLEdBQWtDekcsSUFBQWdyQyxvQkFBd0IsSUFBQWp2QyxFQUFBa3ZDLEtBQXFCanZDLEVBQUFrdkMsR0FBVm52QyxFQUFBb3ZDLEdBQUFwdkMsRUFBQWlFLElBQXNCaEUsRUFBQXVOLElBQ25mbWlDLEdBQUcsTUFBQWpsQyxJQUFBekssRUFBQXF2QyxTQUFBNWtDLEdBQXFDNmtDLEtBQUtDLEdBQUF2ckMsRUFBQWhFLEdBQVF3dkMsR0FBQXhyQyxFQUFBakUsS0FBVSxTQUFBNHZDLEdBQUEzckMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsRUFBQUgsRUFBQWdULEdBQXlDLHlCQUFkclQsSUFBQTJtQixXQUFjaWxCLHNCQUFBNXJDLEVBQUE0ckMsc0JBQUE1dkMsRUFBQXFFLEVBQUFnVCxJQUFBNU0sRUFBQW5KLFlBQUFtSixFQUFBbkosVUFBQTZpQix3QkFBQWdYLEdBQUFwN0IsRUFBQUMsS0FBQW03QixHQUFBMzJCLEVBQUFILElBQ3hHLFNBQUF3ckMsR0FBQTdyQyxFQUFBeUcsRUFBQTFLLEdBQW1CLElBQUFDLEdBQUEsRUFBQXdFLEVBQUFvbkMsR0FBY3ZuQyxFQUFBb0csRUFBQWlLLFlBQXFYLE1BQWpXLGlCQUFBclEsR0FBQSxPQUFBQSxJQUFBdWdCLEdBQUF2Z0IsSUFBQUcsRUFBQThmLEdBQUE3WixHQUFBb2hDLEdBQUE1bkIsR0FBQUksUUFBQWhnQixHQUFBckUsRUFBQSxPQUFBQSxFQUFBeUssRUFBQWtLLGVBQUFtM0IsR0FBQTluQyxFQUFBUSxHQUFBb25DLElBQWtIbmhDLEVBQUEsSUFBQUEsRUFBQTFLLEVBQUFzRSxHQUFhTCxFQUFBZ3BDLGNBQUEsT0FBQXZpQyxFQUFBOUIsWUFBQSxJQUFBOEIsRUFBQTlCLE1BQUE4QixFQUFBOUIsTUFBQSxLQUE4RDhCLEVBQUFvWixRQUFBa3JCLEdBQWEvcUMsRUFBQTJtQixVQUFBbGdCLEVBQWNBLEVBQUF1a0Msb0JBQUFockMsRUFBd0JoRSxLQUFBZ0UsSUFBQTJtQixXQUFBb2hCLDRDQUFBdm5DLEVBQUFSLEVBQUFnb0MsMENBQUEzbkMsR0FBaUhvRyxFQUN0WixTQUFBcWxDLEdBQUE5ckMsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFxQmdFLEVBQUF5RyxFQUFBOUIsTUFBVSxtQkFBQThCLEVBQUFzbEMsMkJBQUF0bEMsRUFBQXNsQywwQkFBQWh3QyxFQUFBQyxHQUFrRixtQkFBQXlLLEVBQUF1bEMsa0NBQUF2bEMsRUFBQXVsQyxpQ0FBQWp3QyxFQUFBQyxHQUFnR3lLLEVBQUE5QixRQUFBM0UsR0FBQStxQyxHQUFBdHJCLG9CQUFBaFosSUFBQTlCLE1BQUEsTUFDak4sU0FBQXNuQyxHQUFBanNDLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBcUIsSUFBQXdFLEVBQUFSLEVBQUEybUIsVUFBa0JubUIsRUFBQW1mLE1BQUE1akIsRUFBVXlFLEVBQUFtRSxNQUFBM0UsRUFBQWdwQyxjQUF3QnhvQyxFQUFBaWEsS0FBQW13QixHQUFVLElBQUF2cUMsRUFBQW9HLEVBQUFpSyxZQUFvQixpQkFBQXJRLEdBQUEsT0FBQUEsRUFBQUcsRUFBQW9mLFFBQUFnQixHQUFBdmdCLE1BQUFpZ0IsR0FBQTdaLEdBQUFvaEMsR0FBQTVuQixHQUFBSSxRQUFBN2YsRUFBQW9mLFFBQUFrb0IsR0FBQTluQyxFQUFBSyxJQUFxRyxRQUFoQkEsRUFBQUwsRUFBQWlwQyxlQUFnQmlELEdBQUFsc0MsRUFBQUssRUFBQXRFLEVBQUF5RSxFQUFBeEUsR0FBQXdFLEVBQUFtRSxNQUFBM0UsRUFBQWdwQyxlQUErRSxtQkFBN0Izb0MsRUFBQW9HLEVBQUF1Syw0QkFBNkI2NUIsR0FBQTdxQyxFQUFBeUcsRUFBQXBHLEVBQUF0RSxHQUFBeUUsRUFBQW1FLE1BQUEzRSxFQUFBZ3BDLGVBQTZELG1CQUFBdmlDLEVBQUF1SywwQkFBQSxtQkFBQXhRLEVBQUEyckMseUJBQUEsbUJBQUEzckMsRUFBQTRyQywyQkFBQSxtQkFDeFY1ckMsRUFBQTZyQyxxQkFBQTVsQyxFQUFBakcsRUFBQW1FLE1BQUEsbUJBQUFuRSxFQUFBNnJDLG9CQUFBN3JDLEVBQUE2ckMscUJBQUEsbUJBQUE3ckMsRUFBQTRyQywyQkFBQTVyQyxFQUFBNHJDLDRCQUFBM2xDLElBQUFqRyxFQUFBbUUsT0FBQW9tQyxHQUFBdHJCLG9CQUFBamYsSUFBQW1FLE1BQUEsY0FBQXRFLEVBQUFMLEVBQUFpcEMsZUFBQWlELEdBQUFsc0MsRUFBQUssRUFBQXRFLEVBQUF5RSxFQUFBeEUsR0FBQXdFLEVBQUFtRSxNQUFBM0UsRUFBQWdwQyxnQkFBK1MsbUJBQUF4b0MsRUFBQThyQyxvQkFBQXRzQyxFQUFBcTNCLFdBQUEsR0FBMEQsSUFBQWtWLEdBQUFqbUMsTUFBQTZGLFFBQ3pXLFNBQUFxZ0MsR0FBQXhzQyxFQUFBeUcsRUFBQTFLLEdBQTJCLFdBQVJpRSxFQUFBakUsRUFBQTBrQixNQUFRLG1CQUFBemdCLEdBQUEsaUJBQUFBLEVBQUEsQ0FBeUQsR0FBQWpFLEVBQUEra0IsT0FBQSxDQUFhL2tCLElBQUEra0IsT0FBVyxJQUFBOWtCLE9BQUEsRUFBYUQsSUFBQSxJQUFBQSxFQUFBd04sS0FBQXdWLEVBQUEsT0FBQS9pQixFQUFBRCxFQUFBNHFCLFdBQTZDM3FCLEdBQUEraUIsRUFBQSxNQUFBL2UsR0FBb0IsSUFBQVEsRUFBQSxHQUFBUixFQUFXLGNBQUF5RyxHQUFBLE9BQUFBLEVBQUFnYSxLQUFBLG1CQUFBaGEsRUFBQWdhLEtBQUFoYSxFQUFBZ2EsSUFBQWdzQixhQUFBanNDLEVBQUFpRyxFQUFBZ2EsTUFBd0ZoYSxFQUFBLFNBQUF6RyxHQUFjLElBQUF5RyxFQUFBekssRUFBQXllLEtBQWFoVSxJQUFBbWtDLEtBQUFua0MsRUFBQXpLLEVBQUF5ZSxLQUFBLElBQXNCLE9BQUF6YSxTQUFBeUcsRUFBQWpHLEdBQUFpRyxFQUFBakcsR0FBQVIsSUFBNkJ5c0MsV0FBQWpzQyxFQUFlaUcsR0FBUyxpQkFBQXpHLEdBQUErZSxFQUFBLE9BQW9DaGpCLEVBQUEra0IsUUFBQS9CLEVBQUEsTUFBQS9lLEdBQTJCLE9BQUFBLEVBQ2xjLFNBQUEwc0MsR0FBQTFzQyxFQUFBeUcsR0FBaUIsYUFBQXpHLEVBQUE3QixNQUFBNGdCLEVBQUEseUJBQUEzaUIsT0FBQWtCLFVBQUE2RCxTQUFBdEYsS0FBQTRLLEdBQUEscUJBQXFHckssT0FBQWlJLEtBQUFvQyxHQUFBbkYsS0FBQSxVQUE4Qm1GLEVBQUEsSUFDcEosU0FBQWttQyxHQUFBM3NDLEdBQWUsU0FBQXlHLElBQUExSyxHQUFnQixHQUFBaUUsRUFBQSxDQUFNLElBQUFoRSxFQUFBeUssRUFBQTBpQyxXQUFtQixPQUFBbnRDLEtBQUFxdEMsV0FBQXR0QyxFQUFBMEssRUFBQTBpQyxXQUFBcHRDLEdBQUEwSyxFQUFBMmlDLFlBQUEzaUMsRUFBQTBpQyxXQUFBcHRDLEVBQXNFQSxFQUFBc3RDLFdBQUEsS0FBa0J0dEMsRUFBQXM3QixVQUFBLEdBQWUsU0FBQXQ3QixJQUFBQyxHQUFnQixJQUFBZ0UsRUFBQSxZQUFrQixLQUFLLE9BQUFoRSxHQUFTeUssRUFBQTFLLEVBQUFDLE9BQUF5N0IsUUFBb0IsWUFBWSxTQUFBejdCLEVBQUFnRSxFQUFBeUcsR0FBZ0IsSUFBQXpHLEVBQUEsSUFBQTRzQyxJQUFjLE9BQUFubUMsR0FBUyxPQUFBQSxFQUFBeEosSUFBQStDLEVBQUEyTyxJQUFBbEksRUFBQXhKLElBQUF3SixHQUFBekcsRUFBQTJPLElBQUFsSSxFQUFBekQsTUFBQXlELE9BQUFneEIsUUFBMEQsT0FBQXozQixFQUFTLFNBQUFRLEVBQUFSLEVBQUF5RyxFQUFBMUssR0FBdUQsT0FBckNpRSxFQUFBeXBDLEdBQUF6cEMsRUFBQXlHLElBQVl6RCxNQUFBLEVBQVVoRCxFQUFBeTNCLFFBQUEsS0FBZXozQixFQUFTLFNBQUFLLEVBQUFvRyxFQUFBMUssRUFBQUMsR0FBNEIsT0FBVnlLLEVBQUF6RCxNQUFBaEgsRUFBVWdFLEVBQTZCLFFBQWRoRSxFQUFBeUssRUFBQXV3QixZQUFjaDdCLElBQUFnSCxPQUFBakgsR0FBQTBLLEVBQUE0d0IsVUFDbGQsRUFBQXQ3QixHQUFBQyxHQUFPeUssRUFBQTR3QixVQUFBLEVBQWN0N0IsR0FEZ2FBLEVBQ3ZaLFNBQUFzWCxFQUFBNU0sR0FBcUQsT0FBdkN6RyxHQUFBLE9BQUF5RyxFQUFBdXdCLFlBQUF2d0IsRUFBQTR3QixVQUFBLEdBQXVDNXdCLEVBQVMsU0FBQTRZLEVBQUFyZixFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQW9CLGNBQUF5SyxHQUFBLElBQUFBLEVBQUE4QyxNQUFBOUMsRUFBQW9qQyxHQUFBOXRDLEVBQUFpRSxFQUFBbkQsS0FBQWIsSUFBQXNyQixPQUFBdG5CLEVBQUF5RyxLQUE0REEsRUFBQWpHLEVBQUFpRyxFQUFBMUssSUFBV3VyQixPQUFBdG5CLEVBQVd5RyxHQUFTLFNBQUE5SyxFQUFBcUUsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFvQixjQUFBeUssS0FBQW9pQyxjQUFBOXNDLEVBQUFvQyxPQUFBbkMsRUFBQXdFLEVBQUFpRyxFQUFBMUssRUFBQTRqQixRQUFBYyxJQUFBK3JCLEdBQUF4c0MsRUFBQXlHLEVBQUExSyxHQUFBQyxFQUFBc3JCLE9BQUF0bkIsRUFBQWhFLEtBQXlGQSxFQUFBMHRDLEdBQUEzdEMsRUFBQW9DLEtBQUFwQyxFQUFBa0IsSUFBQWxCLEVBQUE0akIsTUFBQSxLQUFBM2YsRUFBQW5ELEtBQUFiLElBQXlDeWtCLElBQUErckIsR0FBQXhzQyxFQUFBeUcsRUFBQTFLLEdBQWdCQyxFQUFBc3JCLE9BQUF0bkIsRUFBV2hFLEdBQVMsU0FBQStTLEVBQUEvTyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQW9CLGNBQUF5SyxHQUFBLElBQUFBLEVBQUE4QyxLQUFBOUMsRUFBQWtnQixVQUFBd1csZ0JBQUFwaEMsRUFBQW9oQyxlQUFBMTJCLEVBQUFrZ0IsVUFBQXFqQixpQkFDelpqdUMsRUFBQWl1QyxpQkFBQXZqQyxFQUFBcWpDLEdBQUEvdEMsRUFBQWlFLEVBQUFuRCxLQUFBYixJQUFBc3JCLE9BQUF0bkIsRUFBQXlHLEtBQXNEQSxFQUFBakcsRUFBQWlHLEVBQUExSyxFQUFBOGtCLFVBQUEsS0FBd0J5RyxPQUFBdG5CLEVBQVd5RyxHQUFTLFNBQUEzSyxFQUFBa0UsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBcUUsR0FBc0IsY0FBQW9HLEdBQUEsSUFBQUEsRUFBQThDLE1BQUE5QyxFQUFBa2pDLEdBQUE1dEMsRUFBQWlFLEVBQUFuRCxLQUFBYixFQUFBcUUsSUFBQWluQixPQUFBdG5CLEVBQUF5RyxLQUE4REEsRUFBQWpHLEVBQUFpRyxFQUFBMUssSUFBV3VyQixPQUFBdG5CLEVBQVd5RyxHQUFTLFNBQUFqSixFQUFBd0MsRUFBQXlHLEVBQUExSyxHQUFrQixvQkFBQTBLLEdBQUEsaUJBQUFBLEVBQUEsT0FBQUEsRUFBQW9qQyxHQUFBLEdBQUFwakMsRUFBQXpHLEVBQUFuRCxLQUFBZCxJQUFBdXJCLE9BQUF0bkIsRUFBQXlHLEVBQW9GLG9CQUFBQSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQThLLFVBQW1CLEtBQUFrZSxHQUFBLE9BQUExekIsRUFBQTJ0QyxHQUFBampDLEVBQUF0SSxLQUFBc0ksRUFBQXhKLElBQUF3SixFQUFBa1osTUFBQSxLQUFBM2YsRUFBQW5ELEtBQUFkLElBQUEwa0IsSUFBQStyQixHQUFBeHNDLEVBQUEsS0FBQXlHLEdBQUExSyxFQUFBdXJCLE9BQUF0bkIsRUFBQWpFLEVBQXdGLEtBQUEyekIsR0FBQSxPQUFBanBCLEVBQUFxakMsR0FBQXJqQyxFQUFBekcsRUFBQW5ELEtBQUFkLElBQUF1ckIsT0FBQXRuQixFQUFBeUcsRUFBNkMsR0FBQThsQyxHQUFBOWxDLElBQ3JmNnBCLEdBQUE3cEIsR0FBQSxPQUFBQSxFQUFBa2pDLEdBQUFsakMsRUFBQXpHLEVBQUFuRCxLQUFBZCxFQUFBLE9BQUF1ckIsT0FBQXRuQixFQUFBeUcsRUFBZ0RpbUMsR0FBQTFzQyxFQUFBeUcsR0FBUSxZQUFZLFNBQUE3SixFQUFBb0QsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFvQixJQUFBd0UsRUFBQSxPQUFBaUcsSUFBQXhKLElBQUEsS0FBMEIsb0JBQUFsQixHQUFBLGlCQUFBQSxFQUFBLGNBQUF5RSxFQUFBLEtBQUE2ZSxFQUFBcmYsRUFBQXlHLEVBQUEsR0FBQTFLLEVBQUFDLEdBQStFLG9CQUFBRCxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQXdWLFVBQW1CLEtBQUFrZSxHQUFBLE9BQUExekIsRUFBQWtCLE1BQUF1RCxFQUFBekUsRUFBQW9DLE9BQUF3eEIsR0FBQTd6QixFQUFBa0UsRUFBQXlHLEVBQUExSyxFQUFBNGpCLE1BQUFrQixTQUFBN2tCLEVBQUF3RSxHQUFBN0UsRUFBQXFFLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBQSxLQUFpRixLQUFBMHpCLEdBQUEsT0FBQTN6QixFQUFBa0IsTUFBQXVELEVBQUF1TyxFQUFBL08sRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFBLEtBQXlDLEdBQUF1d0MsR0FBQXh3QyxJQUFBdTBCLEdBQUF2MEIsR0FBQSxjQUFBeUUsRUFBQSxLQUFBMUUsRUFBQWtFLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQSxNQUFxRDB3QyxHQUFBMXNDLEVBQUFqRSxHQUFRLFlBQVksU0FBQXFqQixFQUFBcGYsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsR0FBc0Isb0JBQUF4RSxHQUFBLGlCQUFBQSxFQUFBLE9BQy9jcWpCLEVBQUE1WSxFQUQrY3pHLEVBQy9jQSxFQUFBekQsSUFBQVIsSUFBQSxRQUFBQyxFQUFBd0UsR0FBNkIsb0JBQUF4RSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQXVWLFVBQW1CLEtBQUFrZSxHQUFBLE9BQUF6dkIsSUFBQXpELElBQUEsT0FBQVAsRUFBQWlCLElBQUFsQixFQUFBQyxFQUFBaUIsTUFBQSxLQUFBakIsRUFBQW1DLE9BQUF3eEIsR0FBQTd6QixFQUFBMkssRUFBQXpHLEVBQUFoRSxFQUFBMmpCLE1BQUFrQixTQUFBcmdCLEVBQUF4RSxFQUFBaUIsS0FBQXRCLEVBQUE4SyxFQUFBekcsRUFBQWhFLEVBQUF3RSxHQUEwRyxLQUFBa3ZCLEdBQUEsT0FBQTNnQixFQUFBdEksRUFBQXpHLElBQUF6RCxJQUFBLE9BQUFQLEVBQUFpQixJQUFBbEIsRUFBQUMsRUFBQWlCLE1BQUEsS0FBQWpCLEVBQUF3RSxHQUE4RCxHQUFBK3JDLEdBQUF2d0MsSUFBQXMwQixHQUFBdDBCLEdBQUEsT0FBQUYsRUFBQTJLLEVBQUF6RyxJQUFBekQsSUFBQVIsSUFBQSxLQUFBQyxFQUFBd0UsRUFBQSxNQUF3RGtzQyxHQUFBam1DLEVBQUF6SyxHQUFRLFlBQVksU0FBQTZpQixFQUFBcmUsRUFBQTZTLEVBQUFnTSxFQUFBdFEsR0FBb0IsUUFBQXBULEVBQUEsS0FBQUcsRUFBQSxLQUFBNmlCLEVBQUF0TCxFQUFBdUwsRUFBQXZMLEVBQUEsRUFBQXBVLEVBQUEsS0FBdUMsT0FBQTBmLEdBQUFDLEVBQUFTLEVBQUEvYixPQUFxQnNiLElBQUEsQ0FBS0QsRUFBQTNiLE1BQUE0YixHQUFBM2YsRUFBQTBmLElBQUEsTUFBQTFmLEVBQUEwZixFQUFBOFksUUFBbUMsSUFBQTNZLEVBQUFsaUIsRUFBQTRELEVBQUFtZSxFQUFBVSxFQUFBVCxHQUFBN1AsR0FBb0IsVUFBQStQLEVBQUEsQ0FBYSxPQUFBSCxNQUFBMWYsR0FBZ0IsTUFBTWUsR0FDcmYyZSxHQUFBLE9BQUFHLEVBQUFrWSxXQUFBdndCLEVBQUFqRyxFQUFBbWUsR0FBOEJ0TCxFQUFBaFQsRUFBQXllLEVBQUF6TCxFQUFBdUwsR0FBVyxPQUFBOWlCLEVBQUFILEVBQUFtakIsRUFBQWhqQixFQUFBMjdCLFFBQUEzWSxFQUF5QmhqQixFQUFBZ2pCLEVBQUlILEVBQUExZixFQUFJLEdBQUEyZixJQUFBUyxFQUFBL2IsT0FBQSxPQUFBdkgsRUFBQXlFLEVBQUFtZSxHQUFBaGpCLEVBQWdDLFVBQUFnakIsRUFBQSxDQUFhLEtBQUtDLEVBQUFTLEVBQUEvYixPQUFXc2IsS0FBQUQsRUFBQW5oQixFQUFBZ0QsRUFBQTZlLEVBQUFULEdBQUE3UCxNQUFBc0UsRUFBQWhULEVBQUFzZSxFQUFBdEwsRUFBQXVMLEdBQUEsT0FBQTlpQixFQUFBSCxFQUFBZ2pCLEVBQUE3aUIsRUFBQTI3QixRQUFBOVksRUFBQTdpQixFQUFBNmlCLEdBQTZELE9BQUFoakIsRUFBUyxJQUFBZ2pCLEVBQUEzaUIsRUFBQXdFLEVBQUFtZSxHQUFhQyxFQUFBUyxFQUFBL2IsT0FBV3NiLEtBQUEzZixFQUFBbWdCLEVBQUFULEVBQUFuZSxFQUFBb2UsRUFBQVMsRUFBQVQsR0FBQTdQLE1BQUEvTyxHQUFBLE9BQUFmLEVBQUErM0IsV0FBQXJZLEVBQUFrdUIsT0FBQSxPQUFBNXRDLEVBQUFoQyxJQUFBMmhCLEVBQUEzZixFQUFBaEMsS0FBQW9XLEVBQUFoVCxFQUFBcEIsRUFBQW9VLEVBQUF1TCxHQUFBLE9BQUE5aUIsRUFBQUgsRUFBQXNELEVBQUFuRCxFQUFBMjdCLFFBQUF4NEIsRUFBQW5ELEVBQUFtRCxHQUFnSyxPQUF6Q2UsR0FBQTJlLEVBQUFsYSxRQUFBLFNBQUF6RSxHQUF5QixPQUFBeUcsRUFBQWpHLEVBQUFSLEtBQWdCckUsRUFBUyxTQUFBNkQsRUFBQWdCLEVBQUE2UyxFQUFBZ00sRUFBQXRRLEdBQW9CLElBQUFwVCxFQUFBMjBCLEdBQUFqUixHQUFZLG1CQUFBMWpCLEdBQUFvakIsRUFBQSxPQUFrRCxPQUFaTSxFQUFBMWpCLEVBQUFFLEtBQUF3akIsS0FBWU4sRUFBQSxPQUNoZSxRQUFBampCLEVBQUFILEVBQUEsS0FBQWdqQixFQUFBdEwsRUFBQXVMLEVBQUF2TCxFQUFBLEVBQUFwVSxFQUFBLEtBQUE2ZixFQUFBTyxFQUFBeGIsT0FBNkMsT0FBQThhLElBQUFHLEVBQUExSCxLQUFrQndILElBQUFFLEVBQUFPLEVBQUF4YixPQUFBLENBQWdCOGEsRUFBQTNiLE1BQUE0YixHQUFBM2YsRUFBQTBmLElBQUEsTUFBQTFmLEVBQUEwZixFQUFBOFksUUFBbUMsSUFBQTVZLEVBQUFqaUIsRUFBQTRELEVBQUFtZSxFQUFBRyxFQUFBbmlCLE1BQUFvUyxHQUF1QixVQUFBOFAsRUFBQSxDQUFhRixNQUFBMWYsR0FBUyxNQUFNZSxHQUFBMmUsR0FBQSxPQUFBRSxFQUFBbVksV0FBQXZ3QixFQUFBakcsRUFBQW1lLEdBQWlDdEwsRUFBQWhULEVBQUF3ZSxFQUFBeEwsRUFBQXVMLEdBQVcsT0FBQTlpQixFQUFBSCxFQUFBa2pCLEVBQUEvaUIsRUFBQTI3QixRQUFBNVksRUFBeUIvaUIsRUFBQStpQixFQUFJRixFQUFBMWYsRUFBSSxHQUFBNmYsRUFBQTFILEtBQUEsT0FBQXJiLEVBQUF5RSxFQUFBbWUsR0FBQWhqQixFQUEwQixVQUFBZ2pCLEVBQUEsQ0FBYSxNQUFLRyxFQUFBMUgsS0FBUXdILElBQUFFLEVBQUFPLEVBQUF4YixPQUFBLFFBQUFpYixFQUFBdGhCLEVBQUFnRCxFQUFBc2UsRUFBQW5pQixNQUFBb1MsTUFBQXNFLEVBQUFoVCxFQUFBeWUsRUFBQXpMLEVBQUF1TCxHQUFBLE9BQUE5aUIsRUFBQUgsRUFBQW1qQixFQUFBaGpCLEVBQUEyN0IsUUFBQTNZLEVBQUFoakIsRUFBQWdqQixHQUFvRixPQUFBbmpCLEVBQVMsSUFBQWdqQixFQUFBM2lCLEVBQUF3RSxFQUFBbWUsSUFBYUcsRUFBQTFILEtBQVF3SCxJQUFBRSxFQUFBTyxFQUFBeGIsT0FBQSxRQUFBaWIsRUFBQU0sRUFBQVQsRUFBQW5lLEVBQUFvZSxFQUFBRSxFQUFBbmlCLE1BQUFvUyxNQUFBL08sR0FBQSxPQUFBOGUsRUFBQWtZLFdBQUFyWSxFQUFBa3VCLE9BQUEsT0FBQS90QixFQUFBN2hCLElBQUEyaEIsRUFDeFpFLEVBQUE3aEIsS0FBQW9XLEVBQUFoVCxFQUFBeWUsRUFBQXpMLEVBQUF1TCxHQUFBLE9BQUE5aUIsRUFBQUgsRUFBQW1qQixFQUFBaGpCLEVBQUEyN0IsUUFBQTNZLEVBQUFoakIsRUFBQWdqQixHQUF5RixPQUF6QzllLEdBQUEyZSxFQUFBbGEsUUFBQSxTQUFBekUsR0FBeUIsT0FBQXlHLEVBQUFqRyxFQUFBUixLQUFnQnJFLEVBQVMsZ0JBQUFxRSxFQUFBaEUsRUFBQXFFLEVBQUFnZixHQUF5QixJQUFBdFEsRUFBQSxpQkFBQTFPLEdBQUEsT0FBQUEsS0FBQWxDLE9BQUF3eEIsSUFBQSxPQUFBdHZCLEVBQUFwRCxJQUErRDhSLElBQUExTyxJQUFBc2YsTUFBQWtCLFVBQXdCLElBQUFsbEIsRUFBQSxpQkFBQTBFLEdBQUEsT0FBQUEsRUFBb0MsR0FBQTFFLEVBQUEsT0FBQTBFLEVBQUFrUixVQUF3QixLQUFBa2UsR0FBQXp2QixFQUFBLENBQW1CLElBQVJyRSxFQUFBMEUsRUFBQXBELElBQVE4UixFQUFBL1MsRUFBUSxPQUFBK1MsR0FBUyxDQUFFLEdBQUFBLEVBQUE5UixNQUFBdEIsRUFBQSxRQUFBb1QsRUFBQXhGLElBQUFsSixFQUFBbEMsT0FBQXd4QixHQUFBNWdCLEVBQUE4NUIsY0FBQXhvQyxFQUFBbEMsS0FBQSxDQUE4RHBDLEVBQUFpRSxFQUFBK08sRUFBQTBvQixVQUFlejdCLEVBQUF3RSxFQUFBdU8sRUFBQTFPLEVBQUFsQyxPQUFBd3hCLEdBQUF0dkIsRUFBQXNmLE1BQUFrQixTQUFBeGdCLEVBQUFzZixRQUE4Q2MsSUFBQStyQixHQUFBeHNDLEVBQUErTyxFQUFBMU8sR0FBZ0JyRSxFQUFBc3JCLE9BQUF0bkIsRUFBV0EsRUFBQWhFLEVBQUksTUFBQWdFLEVBQWFqRSxFQUFBaUUsRUFBQStPLEdBQU8sTUFBTXRJLEVBQUF6RyxFQUFBK08sR0FBWUEsRUFDcGZBLEVBQUEwb0IsUUFBVXAzQixFQUFBbEMsT0FBQXd4QixLQUFBM3pCLEVBQUEydEMsR0FBQXRwQyxFQUFBc2YsTUFBQWtCLFNBQUE3Z0IsRUFBQW5ELEtBQUF3aUIsRUFBQWhmLEVBQUFwRCxNQUFBcXFCLE9BQUF0bkIsSUFBQWhFLEtBQUFxakIsRUFBQXFxQixHQUFBcnBDLEVBQUFsQyxLQUFBa0MsRUFBQXBELElBQUFvRCxFQUFBc2YsTUFBQSxLQUFBM2YsRUFBQW5ELEtBQUF3aUIsSUFBQW9CLElBQUErckIsR0FBQXhzQyxFQUFBaEUsRUFBQXFFLEdBQUFnZixFQUFBaUksT0FBQXRuQixJQUFBcWYsR0FBNkksT0FBQWhNLEVBQUFyVCxHQUFZLEtBQUEwdkIsR0FBQTF2QixFQUFBLENBQVcsSUFBQStPLEVBQUExTyxFQUFBcEQsSUFBWSxPQUFBakIsR0FBUyxDQUFFLEdBQUFBLEVBQUFpQixNQUFBOFIsRUFBQSxRQUFBL1MsRUFBQXVOLEtBQUF2TixFQUFBMnFCLFVBQUF3VyxnQkFBQTk4QixFQUFBODhCLGVBQUFuaEMsRUFBQTJxQixVQUFBcWpCLGlCQUFBM3BDLEVBQUEycEMsZUFBQSxDQUF1SGp1QyxFQUFBaUUsRUFBQWhFLEVBQUF5N0IsVUFBZXo3QixFQUFBd0UsRUFBQXhFLEVBQUFxRSxFQUFBd2dCLFVBQUEsS0FBd0J5RyxPQUFBdG5CLEVBQVdBLEVBQUFoRSxFQUFJLE1BQUFnRSxFQUFhakUsRUFBQWlFLEVBQUFoRSxHQUFPLE1BQU15SyxFQUFBekcsRUFBQWhFLEdBQVlBLElBQUF5N0IsU0FBWXo3QixFQUFBOHRDLEdBQUF6cEMsRUFBQUwsRUFBQW5ELEtBQUF3aUIsSUFBaUJpSSxPQUFBdG5CLEVBQVdBLEVBQUFoRSxFQUFJLE9BQUFxWCxFQUFBclQsR0FBWSxvQkFBQUssR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUNoZCxHQUFBQSxFQUFBLE9BQUFyRSxHQUFBLElBQUFBLEVBQUF1TixLQUFBeE4sRUFBQWlFLEVBQUFoRSxFQUFBeTdCLFVBQUF6N0IsRUFBQXdFLEVBQUF4RSxFQUFBcUUsSUFBQWluQixPQUFBdG5CLElBQUFoRSxJQUFBRCxFQUFBaUUsRUFBQWhFLE1BQUE2dEMsR0FBQXhwQyxFQUFBTCxFQUFBbkQsS0FBQXdpQixJQUFBaUksT0FBQXRuQixJQUFBaEUsR0FBQXFYLEVBQUFyVCxHQUFrSCxHQUFBdXNDLEdBQUFsc0MsR0FBQSxPQUFBd2UsRUFBQTdlLEVBQUFoRSxFQUFBcUUsRUFBQWdmLEdBQTJCLEdBQUFpUixHQUFBandCLEdBQUEsT0FBQWIsRUFBQVEsRUFBQWhFLEVBQUFxRSxFQUFBZ2YsR0FBc0MsR0FBWDFqQixHQUFBK3dDLEdBQUExc0MsRUFBQUssUUFBVyxJQUFBQSxJQUFBME8sRUFBQSxPQUFBL08sRUFBQXVKLEtBQTRDLGNBQUF3VixFQUFBLE9BQUFNLEVBQUFyZixFQUFBN0IsTUFBQTBTLGFBQUF3TyxFQUFBcGpCLE1BQUEsYUFBbUUsT0FBQUYsRUFBQWlFLEVBQUFoRSxJQUFlLElBQUE4d0MsR0FBQUgsSUFBQSxHQUFBSSxHQUFBSixJQUFBLEdBQUFLLEdBQUEsR0FBNkJqc0IsR0FBQSxDQUFJVixRQUFBMnNCLElBQVdDLEdBQUEsQ0FBSzVzQixRQUFBMnNCLElBQVdFLEdBQUEsQ0FBSzdzQixRQUFBMnNCLElBQVksU0FBQUcsR0FBQW50QyxHQUFzQyxPQUF2QkEsSUFBQWd0QyxJQUFBanVCLEVBQUEsT0FBdUIvZSxFQUNwYSxTQUFBb3RDLEdBQUFwdEMsRUFBQXlHLEdBQWlCOUgsR0FBQXV1QyxHQUFBem1DLEdBQVU5SCxHQUFBc3VDLEdBQUFqdEMsR0FBVXJCLEdBQUFvaUIsR0FBQWlzQixJQUFVLElBQUFqeEMsRUFBQTBLLEVBQUFtb0IsU0FBaUIsT0FBQTd5QixHQUFVLGVBQUEwSyxPQUFBb04saUJBQUFwTixFQUFBMDdCLGFBQUFMLEdBQUEsU0FBa0UsTUFBTSxRQUFBcjdCLEVBQUFxN0IsR0FBQXI3QixHQUFBMUssRUFBQSxJQUFBQSxFQUFBMEssRUFBQWtWLFdBQUFsVixHQUFBMDdCLGNBQUEsS0FBQXBtQyxJQUFBc3hDLFNBQTRFNXVDLEdBQUFzaUIsSUFBT3BpQixHQUFBb2lCLEdBQUF0YSxHQUFTLFNBQUE2bUMsR0FBQXR0QyxHQUFldkIsR0FBQXNpQixJQUFPdGlCLEdBQUF3dUMsSUFBUXh1QyxHQUFBeXVDLElBQVEsU0FBQUssR0FBQXZ0QyxHQUFlbXRDLEdBQUFELEdBQUE3c0IsU0FBZSxJQUFBNVosRUFBQTBtQyxHQUFBcHNCLEdBQUFWLFNBQW9CdGtCLEVBQUErbEMsR0FBQXI3QixFQUFBekcsRUFBQTdCLE1BQW1Cc0ksSUFBQTFLLElBQUE0QyxHQUFBc3VDLEdBQUFqdEMsR0FBQXJCLEdBQUFvaUIsR0FBQWhsQixJQUE0QixTQUFBeXhDLEdBQUF4dEMsR0FBZWl0QyxHQUFBNXNCLFVBQUFyZ0IsSUFBQXZCLEdBQUFzaUIsSUFBQXRpQixHQUFBd3VDLEtBQ3BZLElBQUFRLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQUMsR0FBQSxJQUFBQyxHQUFBMWUsR0FBQXBMLHVCQUFBK3BCLEdBQUEsRUFBQUMsR0FBQSxLQUFBN3RDLEdBQUEsS0FBQXZCLEdBQUEsS0FBQXF2QyxHQUFBLEtBQUFwdEIsR0FBQSxLQUFBcXRCLEdBQUEsS0FBQUMsR0FBQSxFQUFBQyxHQUFBLEtBQUFDLEdBQUEsRUFBQUMsSUFBQSxFQUFBQyxHQUFBLEtBQUFDLEdBQUEsRUFBcUssU0FBQUMsS0FBYzd2QixFQUFBLE9BQVMsU0FBQTh2QixHQUFBN3VDLEVBQUF5RyxHQUFpQixVQUFBQSxFQUFBLFNBQXFCLFFBQUExSyxFQUFBLEVBQVlBLEVBQUEwSyxFQUFBbkQsUUFBQXZILEVBQUFpRSxFQUFBc0QsT0FBdUJ2SCxJQUFBLElBQUFrN0IsR0FBQWozQixFQUFBakUsR0FBQTBLLEVBQUExSyxJQUFBLFNBQStCLFNBQ3BTLFNBQUEreUMsR0FBQTl1QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxFQUFBSCxHQUFzRyxHQUE3RTZ0QyxHQUFBN3RDLEVBQUs4dEMsR0FBQTFuQyxFQUFLMUgsR0FBQSxPQUFBaUIsSUFBQWdwQyxjQUFBLEtBQWdDaUYsR0FBQTV0QixRQUFBLE9BQUF0aEIsR0FBQWd3QyxHQUFBQyxHQUEwQnZvQyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQVNpdUMsR0FBQSxDQUFPLEdBQUFBLElBQUEsRUFBQUUsSUFBQSxFQUFBNXZDLEdBQUEsT0FBQWlCLElBQUFncEMsY0FBQSxLQUFBcUYsR0FBQUQsR0FBQUcsR0FBQXZ0QixHQUFBMWdCLEdBQUEsS0FBQTJ0QyxHQUFBNXRCLFFBQUEydUIsR0FBQXZvQyxFQUFBMUssRUFBQUMsRUFBQXdFLFNBQXdGaXVDLElBQVVDLEdBQUEsS0FBUUMsR0FBQSxFQUF1TCxPQUFsTFYsR0FBQTV0QixRQUFBNHVCLElBQWNqdkMsRUFBQW11QyxJQUFLbkYsY0FBQW9GLEdBQW1CcHVDLEVBQUF1cEMsZUFBQStFLEdBQW9CdHVDLEVBQUFpcEMsWUFBQXNGLEdBQWlCdnVDLEVBQUFxM0IsV0FBQW1YLEdBQWdCeHVDLEVBQUEsT0FBQU0sSUFBQSxPQUFBQSxHQUFBdUQsS0FBMEJxcUMsR0FBQSxFQUFLRyxHQUFBcnRCLEdBQUFvdEIsR0FBQXJ2QyxHQUFBdUIsR0FBQTZ0QyxHQUFBLEtBQW9CRyxHQUFBLEVBQUtDLEdBQUEsS0FBUUMsR0FBQSxFQUFLeHVDLEdBQUErZSxFQUFBLE9BQWtCdFksRUFBUyxTQUFBeW9DLEtBQWNqQixHQUFBNXRCLFFBQUE0dUIsR0FBY2YsR0FBQSxFQUFLRyxHQUFBcnRCLEdBQUFvdEIsR0FBQXJ2QyxHQUFBdUIsR0FBQTZ0QyxHQUFBLEtBQW9CRyxHQUFBLEVBQUtDLEdBQUEsS0FBUUMsR0FBQSxFQUFLQyxJQUFBLEVBQU1DLEdBQUEsS0FBUUMsR0FBQSxFQUM1ZSxTQUFBUSxLQUFjLElBQUFudkMsRUFBQSxDQUFPZ3BDLGNBQUEsS0FBQThCLFVBQUEsS0FBQXgxQixNQUFBLEtBQUE4NUIsV0FBQSxLQUFBdnJDLEtBQUEsTUFBbUcsT0FBM0IsT0FBQW1kLEdBQUFvdEIsR0FBQXB0QixHQUFBaGhCLEVBQUFnaEIsTUFBQW5kLEtBQUE3RCxFQUEyQmdoQixHQUFTLFNBQUFxdUIsS0FBYyxVQUFBaEIsT0FBQXJ0QixHQUFBcXRCLElBQUF4cUMsS0FBQTlFLEdBQUEsUUFBQXVCLEdBQUF2QixJQUFBdUIsR0FBQXVELEtBQUEsU0FBdUQsQ0FBSyxPQUFBOUUsSUFBQWdnQixFQUFBLE9BQTZCLElBQUEvZSxFQUFBLENBQU9ncEMsZUFBWDFvQyxHQUFBdkIsSUFBV2lxQyxjQUFBOEIsVUFBQXhxQyxHQUFBd3FDLFVBQUF4MUIsTUFBQWhWLEdBQUFnVixNQUFBODVCLFdBQUE5dUMsR0FBQTh1QyxXQUFBdnJDLEtBQUEsTUFBcUdtZCxHQUFBLE9BQUFBLEdBQUFvdEIsR0FBQXB1QyxFQUFBZ2hCLEdBQUFuZCxLQUFBN0QsRUFBeUJqQixHQUFBdUIsR0FBQXVELEtBQVMsT0FBQW1kLEdBQVMsU0FBQXN1QixHQUFBdHZDLEVBQUF5RyxHQUFpQix5QkFBQUEsSUFBQXpHLEdBQUF5RyxFQUNoWixTQUFBOG9DLEdBQUF2dkMsR0FBZSxJQUFBeUcsRUFBQTRvQyxLQUFBdHpDLEVBQUEwSyxFQUFBNk8sTUFBc0UsR0FBakQsT0FBQXZaLEdBQUFnakIsRUFBQSxPQUF5QmhqQixFQUFBeXpDLG9CQUFBeHZDLEVBQXdCLEVBQUEydUMsR0FBQSxDQUFTLElBQUEzeUMsRUFBQUQsRUFBQW9ILFNBQWlCLFVBQUF1ckMsR0FBQSxDQUFjLElBQUFsdUMsRUFBQWt1QyxHQUFBbnlDLElBQUFSLEdBQWdCLFlBQUF5RSxFQUFBLENBQWVrdUMsR0FBQTdCLE9BQUE5d0MsR0FBYSxJQUFBc0UsRUFBQW9HLEVBQUF1aUMsY0FBc0IsR0FBQTNvQyxFQUFBTCxFQUFBSyxFQUFBRyxFQUFBNEMsUUFBQTVDLElBQUFxRCxXQUE0QixPQUFBckQsR0FBOEgsT0FBOUd5MkIsR0FBQTUyQixFQUFBb0csRUFBQXVpQyxpQkFBQXlHLElBQUEsR0FBK0JocEMsRUFBQXVpQyxjQUFBM29DLEVBQWtCb0csRUFBQTJvQyxhQUFBcnpDLEVBQUEyekMsT0FBQWpwQyxFQUFBcWtDLFVBQUF6cUMsR0FBdUN0RSxFQUFBNHpDLGtCQUFBdHZDLEVBQXNCLENBQUFBLEVBQUFyRSxJQUFhLE9BQUF5SyxFQUFBdWlDLGNBQUFodEMsR0FBMEJBLEVBQUFELEVBQUEyekMsS0FBUyxJQUFBcjhCLEVBQUE1TSxFQUFBMm9DLFdBQW9HLEdBQWpGL3VDLEVBQUFvRyxFQUFBcWtDLFVBQWMsT0FBQXozQixHQUFBLE9BQUFyWCxNQUFBNkgsS0FBQSxNQUFBN0gsRUFBQXFYLEVBQUF4UCxNQUFBN0gsRUFBQSxPQUFBQSxJQUFBNkgsS0FBQSxLQUFtRSxPQUM3ZTdILEVBQUEsQ0FBRyxJQUFBcWpCLEVBQUE3ZSxFQUFBLEtBQUE3RSxFQUFBSyxFQUFBK1MsR0FBQSxFQUFzQixHQUFHLElBQUFqVCxFQUFBSCxFQUFBNHRDLGVBQXVCenRDLEVBQUFveUMsSUFBQW4vQixPQUFBLEVBQUFzUSxFQUFBaE0sRUFBQTdTLEVBQUFILEdBQUF2RSxFQUFBd3lDLFFBQUF4eUMsSUFBQXVFLEVBQUExRSxFQUFBaTBDLGVBQUE1dkMsRUFBQXJFLEVBQUFrMEMsV0FBQTd2QyxFQUFBSyxFQUFBMUUsRUFBQXlILFFBQXNGaVEsRUFBQTFYLEVBQUlBLElBQUFrSSxXQUFTLE9BQUFsSSxPQUFBSyxHQUF1QitTLElBQUFzUSxFQUFBaE0sRUFBQTdTLEVBQUFILEdBQWE0MkIsR0FBQTUyQixFQUFBb0csRUFBQXVpQyxpQkFBQXlHLElBQUEsR0FBK0JocEMsRUFBQXVpQyxjQUFBM29DLEVBQWtCb0csRUFBQTJvQyxXQUFBL3ZCLEVBQWU1WSxFQUFBcWtDLFVBQUF0cUMsRUFBY3pFLEVBQUE0ekMsa0JBQUF0dkMsRUFBc0IsT0FBQW9HLEVBQUF1aUMsY0FBQWp0QyxFQUFBb0gsVUFDOVIsU0FBQTJzQyxHQUFBOXZDLEVBQUF5RyxFQUFBMUssRUFBQUMsR0FBME4sT0FBck1nRSxFQUFBLENBQUd1SixJQUFBdkosRUFBQWhELE9BQUF5SixFQUFBc3BDLFFBQUFoMEMsRUFBQWkwQyxLQUFBaDBDLEVBQUE2SCxLQUFBLE1BQTJDLE9BQUEwcUMsT0FBQSxDQUFlcEYsV0FBQSxPQUFnQkEsV0FBQW5wQyxFQUFBNkQsS0FBQTdELEVBQUEsUUFBQXlHLEVBQUE4bkMsR0FBQXBGLFlBQUFvRixHQUFBcEYsV0FBQW5wQyxFQUFBNkQsS0FBQTdELEdBQUFqRSxFQUFBMEssRUFBQTVDLEtBQUE0QyxFQUFBNUMsS0FBQTdELElBQUE2RCxLQUFBOUgsRUFBQXd5QyxHQUFBcEYsV0FBQW5wQyxHQUF3SEEsRUFBUyxTQUFBaXdDLEdBQUFqd0MsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFxQixJQUFBd0UsRUFBQTJ1QyxLQUFXWCxJQUFBeHVDLEVBQU1RLEVBQUF3b0MsY0FBQThHLEdBQUFycEMsRUFBQTFLLE9BQUEsV0FBQUMsRUFBQSxLQUFBQSxHQUN6USxTQUFBazBDLEdBQUFsd0MsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFxQixJQUFBd0UsRUFBQTZ1QyxLQUFXcnpDLE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxFQUFvQixJQUFBcUUsT0FBQSxFQUFhLFVBQUFDLEdBQUEsQ0FBYSxJQUFBK1MsRUFBQS9TLEdBQUEwb0MsY0FBa0MsR0FBWjNvQyxFQUFBZ1QsRUFBQTA4QixRQUFZLE9BQUEvekMsR0FBQTZ5QyxHQUFBN3lDLEVBQUFxWCxFQUFBMjhCLE1BQXdDLFlBQWJGLEdBQUFyQyxHQUFBMXhDLEVBQUFzRSxFQUFBckUsR0FBcUJ3eUMsSUFBQXh1QyxFQUFNUSxFQUFBd29DLGNBQUE4RyxHQUFBcnBDLEVBQUExSyxFQUFBc0UsRUFBQXJFLEdBQTRCLFNBQUFtMEMsR0FBQW53QyxFQUFBeUcsR0FBaUIseUJBQUFBLEdBQUF6RyxNQUFBeUcsRUFBQXpHLEdBQUEsV0FBc0R5RyxFQUFBLFFBQVMsTUFBQUEsR0FBQXpHLE1BQUF5RyxFQUFBNFosUUFBQXJnQixFQUFBLFdBQTREeUcsRUFBQTRaLFFBQUEsWUFBNUQsRUFBNEUsU0FBQSt2QixNQUM5VixTQUFBQyxHQUFBcndDLEVBQUF5RyxFQUFBMUssR0FBbUIsR0FBQTR5QyxJQUFBNXZCLEVBQUEsT0FBc0IsSUFBQS9pQixFQUFBZ0UsRUFBQWczQixVQUFrQixHQUFBaDNCLElBQUFtdUMsSUFBQSxPQUFBbnlDLE9BQUFteUMsR0FBQSxHQUFBTSxJQUFBLEVBQUF6dUMsRUFBQSxDQUF3Q3VwQyxlQUFBMkUsR0FBQTlxQyxPQUFBckgsRUFBQTZ6QyxhQUFBLEtBQUFDLFdBQUEsS0FBQWhzQyxLQUFBLE1BQXVFLE9BQUE2cUMsUUFBQSxJQUFBOUIsVUFBQSxLQUFBN3dDLEVBQUEyeUMsR0FBQW55QyxJQUFBa0ssSUFBQWlvQyxHQUFBLy9CLElBQUFsSSxFQUFBekcsT0FBNEQsQ0FBSyxJQUFBeUcsRUFBQTFLLEVBQVEsT0FBQTBLLEVBQUE1QyxNQUFjNEMsSUFBQTVDLEtBQVU0QyxFQUFBNUMsS0FBQTdELE1BQVMsQ0FBS3NyQyxLQUFLLElBQUE5cUMsRUFBQXlxQyxLQUFxQjVxQyxFQUFBLENBQU9rcEMsZUFBakIvb0MsRUFBQTJxQyxHQUFBM3FDLEVBQUFSLEdBQWlCb0QsT0FBQXJILEVBQUE2ekMsYUFBQSxLQUFBQyxXQUFBLEtBQUFoc0MsS0FBQSxNQUFzRXdQLEVBQUE1TSxFQUFBaXBDLEtBQVUsVUFBQXI4QixFQUFBaFQsRUFBQXdELEtBQUF4RCxNQUFxQixDQUFLLElBQUFnZixFQUFBaE0sRUFBQXhQLEtBQWEsT0FBQXdiLElBQUFoZixFQUFBd0QsS0FBQXdiLEdBQXFCaE0sRUFBQXhQLEtBQUF4RCxFQUFrQixHQUFUb0csRUFBQWlwQyxLQUFBcnZDLEVBQVMsSUFBQUwsRUFBQXVwQyxpQkFBQSxPQUN4ZHZ0QyxHQUFBLElBQUFBLEVBQUF1dEMsaUJBQUEsUUFBQXZ0QyxFQUFBeUssRUFBQStvQyxxQkFBQSxJQUFpRSxJQUFBN3pDLEVBQUE4SyxFQUFBa3BDLGtCQUFBNWdDLEVBQUEvUyxFQUFBTCxFQUFBSSxHQUFtRSxHQUFoQ3NFLEVBQUF1dkMsYUFBQTV6QyxFQUFpQnFFLEVBQUF3dkMsV0FBQTlnQyxFQUFla29CLEdBQUFsb0IsRUFBQXBULEdBQUEsT0FBa0IsTUFBQUcsSUFBbUIwdkMsR0FBQXhyQyxFQUFBUSxJQUN6SyxJQUFBeXVDLEdBQUEsQ0FBUXFCLFlBQUExdkIsR0FBQW9DLFlBQUE0ckIsR0FBQTNyQixXQUFBMnJCLEdBQUExckIsVUFBQTByQixHQUFBenJCLG9CQUFBeXJCLEdBQUF2ckIsZ0JBQUF1ckIsR0FBQXRyQixRQUFBc3JCLEdBQUFyckIsV0FBQXFyQixHQUFBcHJCLE9BQUFvckIsR0FBQW5yQixTQUFBbXJCLEdBQUF4ckIsY0FBQXdyQixJQUFrS0csR0FBQSxDQUFLdUIsWUFBQTF2QixHQUFBb0MsWUFBQSxTQUFBaGpCLEVBQUF5RyxHQUFpRixPQUF6QzBvQyxLQUFBbkcsY0FBQSxDQUFBaHBDLE9BQUEsSUFBQXlHLEVBQUEsS0FBQUEsR0FBeUN6RyxHQUFTaWpCLFdBQUFyQyxHQUFBc0MsVUFBQSxTQUFBbGpCLEVBQUF5RyxHQUFzQyxPQUFBd3BDLEdBQUEsSUFBQWpDLEdBQUFELEdBQUEvdEMsRUFBQXlHLElBQXlCMGMsb0JBQUEsU0FBQW5qQixFQUFBeUcsRUFBQTFLLEdBQStFLE9BQTFDQSxFQUFBLE1BQUFBLElBQUE4TSxPQUFBLENBQUE3SSxJQUFBLEtBQTBDaXdDLEdBQUEsRUFBQXRDLEdBQUFHLEdBQUFxQyxHQUFBanpDLEtBQUEsS0FBQXVKLEVBQUF6RyxHQUFBakUsSUFBdUNzbkIsZ0JBQUEsU0FBQXJqQixFQUFBeUcsR0FBK0IsT0FBQXdwQyxHQUFBLEVBQUF0QyxHQUFBRyxHQUFBOXRDLEVBQUF5RyxJQUM3ZDZjLFFBQUEsU0FBQXRqQixFQUFBeUcsR0FBc0IsSUFBQTFLLEVBQUFvekMsS0FBMkQsT0FBaEQxb0MsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEVBQW9CekcsTUFBTWpFLEVBQUFpdEMsY0FBQSxDQUFBaHBDLEVBQUF5RyxHQUFzQnpHLEdBQVN1akIsV0FBQSxTQUFBdmpCLEVBQUF5RyxFQUFBMUssR0FBNEIsSUFBQUMsRUFBQW16QyxLQUEySyxPQUFoSzFvQyxPQUFBLElBQUExSyxJQUFBMEssS0FBb0J6SyxFQUFBZ3RDLGNBQUFodEMsRUFBQTh1QyxVQUFBcmtDLEVBQTRHekcsR0FBOUVBLEVBQUFoRSxFQUFBc1osTUFBQSxDQUFXbzZCLEtBQUEsS0FBQXZzQyxTQUFBLEtBQUFxc0Msb0JBQUF4dkMsRUFBQTJ2QyxrQkFBQWxwQyxJQUFtRXRELFNBQUFrdEMsR0FBQW56QyxLQUFBLEtBQUFpeEMsR0FBQW51QyxHQUFnQyxDQUFBaEUsRUFBQWd0QyxjQUFBaHBDLElBQTBCd2pCLE9BQUEsU0FBQXhqQixHQUE2QyxPQUFkQSxFQUFBLENBQUdxZ0IsUUFBQXJnQixHQUFkbXZDLEtBQXlCbkcsY0FBQWhwQyxHQUF5QnlqQixTQUFBLFNBQUF6akIsR0FBc0IsSUFBQXlHLEVBQUEwb0MsS0FDM1UsTUFEc1YsbUJBQUFudkMsV0FBK0J5RyxFQUFBdWlDLGNBQUF2aUMsRUFBQXFrQyxVQUFBOXFDLEVBQ3JaQSxHQURtYkEsRUFBQXlHLEVBQUE2TyxNQUFBLENBQVdvNkIsS0FBQSxLQUFBdnNDLFNBQUEsS0FDMWVxc0Msb0JBQUFGLEdBQUFLLGtCQUFBM3ZDLElBQTRDbUQsU0FBQWt0QyxHQUFBbnpDLEtBQUEsS0FBQWl4QyxHQUFBbnVDLEdBQWdDLENBQUF5RyxFQUFBdWlDLGNBQUFocEMsSUFBMEJvakIsY0FBQWd0QixJQUFrQnBCLEdBQUEsQ0FBS3NCLFlBQUExdkIsR0FBQW9DLFlBQUEsU0FBQWhqQixFQUFBeUcsR0FBd0MsSUFBQTFLLEVBQUFzekMsS0FBVzVvQyxPQUFBLElBQUFBLEVBQUEsS0FBQUEsRUFBb0IsSUFBQXpLLEVBQUFELEVBQUFpdEMsY0FBc0IsY0FBQWh0QyxHQUFBLE9BQUF5SyxHQUFBb29DLEdBQUFwb0MsRUFBQXpLLEVBQUEsSUFBQUEsRUFBQSxJQUE4Q0QsRUFBQWl0QyxjQUFBLENBQUFocEMsRUFBQXlHLEdBQXNCekcsSUFBU2lqQixXQUFBckMsR0FBQXNDLFVBQUEsU0FBQWxqQixFQUFBeUcsR0FBc0MsT0FBQXlwQyxHQUFBLElBQUFsQyxHQUFBRCxHQUFBL3RDLEVBQUF5RyxJQUF5QjBjLG9CQUFBLFNBQUFuakIsRUFBQXlHLEVBQUExSyxHQUErRSxPQUExQ0EsRUFBQSxNQUFBQSxJQUFBOE0sT0FBQSxDQUFBN0ksSUFBQSxLQUEwQ2t3QyxHQUFBLEVBQUF2QyxHQUFBRyxHQUFBcUMsR0FBQWp6QyxLQUFBLEtBQUF1SixFQUFBekcsR0FBQWpFLElBQXVDc25CLGdCQUFBLFNBQUFyakIsRUFDNWR5RyxHQUFHLE9BQUF5cEMsR0FBQSxFQUFBdkMsR0FBQUcsR0FBQTl0QyxFQUFBeUcsSUFBdUI2YyxRQUFBLFNBQUF0akIsRUFBQXlHLEdBQXVCLElBQUExSyxFQUFBc3pDLEtBQVc1b0MsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEVBQW9CLElBQUF6SyxFQUFBRCxFQUFBaXRDLGNBQXNCLGNBQUFodEMsR0FBQSxPQUFBeUssR0FBQW9vQyxHQUFBcG9DLEVBQUF6SyxFQUFBLElBQUFBLEVBQUEsSUFBOENnRSxNQUFNakUsRUFBQWl0QyxjQUFBLENBQUFocEMsRUFBQXlHLEdBQXNCekcsSUFBU3VqQixXQUFBZ3NCLEdBQUEvckIsT0FBQSxXQUFpQyxPQUFBNnJCLEtBQUFyRyxlQUEwQnZsQixTQUFBLFNBQUF6akIsR0FBc0IsT0FBQXV2QyxHQUFBRCxLQUFnQmxzQixjQUFBZ3RCLElBQWtCRyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsSUFBQSxFQUM1UyxTQUFBQyxHQUFBMXdDLEVBQUF5RyxHQUFpQixJQUFBMUssRUFBQXdrQixHQUFBLGVBQXVCeGtCLEVBQUE4c0MsWUFBQSxVQUF3QjlzQyxFQUFBb0MsS0FBQSxVQUFpQnBDLEVBQUE0cUIsVUFBQWxnQixFQUFjMUssRUFBQXVyQixPQUFBdG5CLEVBQVdqRSxFQUFBczdCLFVBQUEsRUFBYyxPQUFBcjNCLEVBQUFtcEMsWUFBQW5wQyxFQUFBbXBDLFdBQUFFLFdBQUF0dEMsRUFBQWlFLEVBQUFtcEMsV0FBQXB0QyxHQUFBaUUsRUFBQW9wQyxZQUFBcHBDLEVBQUFtcEMsV0FBQXB0QyxFQUE0RixTQUFBNDBDLEdBQUEzd0MsRUFBQXlHLEdBQWlCLE9BQUF6RyxFQUFBdUosS0FBYyxXQUFBeE4sRUFBQWlFLEVBQUE3QixLQUF3RixlQUFwRXNJLEVBQUEsSUFBQUEsRUFBQW1vQixVQUFBN3lCLEVBQUFpc0IsZ0JBQUF2aEIsRUFBQStuQixTQUFBeEcsY0FBQSxLQUFBdmhCLEtBQW9FekcsRUFBQTJtQixVQUFBbGdCLEdBQUEsR0FBc0Msc0JBQUFBLEVBQUEsS0FBQXpHLEVBQUE4b0MsY0FBQSxJQUFBcmlDLEVBQUFtb0IsU0FBQSxLQUFBbm9CLEtBQUF6RyxFQUFBMm1CLFVBQUFsZ0IsR0FBQSxHQUEwRixRQUFpQixrQkFDNWQsU0FBQW1xQyxHQUFBNXdDLEdBQWUsR0FBQXl3QyxHQUFBLENBQU8sSUFBQWhxQyxFQUFBK3BDLEdBQVMsR0FBQS9wQyxFQUFBLENBQU0sSUFBQTFLLEVBQUEwSyxFQUFRLElBQUFrcUMsR0FBQTN3QyxFQUFBeUcsR0FBQSxDQUFxQixLQUFSQSxFQUFBOGdDLEdBQUF4ckMsTUFBUTQwQyxHQUFBM3dDLEVBQUF5RyxHQUEyQyxPQUExQnpHLEVBQUFxM0IsV0FBQSxFQUFlb1osSUFBQSxPQUFNRixHQUFBdndDLEdBQVkwd0MsR0FBQUgsR0FBQXgwQyxHQUFTdzBDLEdBQUF2d0MsRUFBS3d3QyxHQUFBaEosR0FBQS9nQyxRQUFTekcsRUFBQXEzQixXQUFBLEVBQUFvWixJQUFBLEVBQUFGLEdBQUF2d0MsR0FBZ0MsU0FBQTZ3QyxHQUFBN3dDLEdBQWUsSUFBQUEsSUFBQXNuQixPQUFlLE9BQUF0bkIsR0FBQSxJQUFBQSxFQUFBdUosS0FBQSxJQUFBdkosRUFBQXVKLEtBQUEsS0FBQXZKLEVBQUF1SixLQUEyQ3ZKLElBQUFzbkIsT0FBWWlwQixHQUFBdndDLEVBQUssU0FBQTh3QyxHQUFBOXdDLEdBQWUsR0FBQUEsSUFBQXV3QyxHQUFBLFNBQW1CLElBQUFFLEdBQUEsT0FBQUksR0FBQTd3QyxHQUFBeXdDLElBQUEsS0FBNkIsSUFBQWhxQyxFQUFBekcsRUFBQTdCLEtBQWEsT0FBQTZCLEVBQUF1SixLQUFBLFNBQUE5QyxHQUFBLFNBQUFBLElBQUFxZ0MsR0FBQXJnQyxFQUFBekcsRUFBQWtwQyxlQUFBLElBQUF6aUMsRUFBQStwQyxHQUFzRS9wQyxHQUFFaXFDLEdBQUExd0MsRUFBQXlHLEtBQUE4Z0MsR0FBQTlnQyxHQUFrRCxPQUFqQ29xQyxHQUFBN3dDLEdBQU13d0MsR0FBQUQsR0FBQWhKLEdBQUF2bkMsRUFBQTJtQixXQUFBLE1BQTJCLEVBQVMsU0FBQW9xQixLQUFjUCxHQUFBRCxHQUFBLEtBQVdFLElBQUEsRUFDN2UsSUFBQU8sR0FBQXpoQixHQUFBbkwsa0JBQUFxckIsSUFBQSxFQUFrQyxTQUFBNXdDLEdBQUFtQixFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQW9CeUssRUFBQSt3QixNQUFBLE9BQUF4M0IsRUFBQStzQyxHQUFBdG1DLEVBQUEsS0FBQTFLLEVBQUFDLEdBQUE4d0MsR0FBQXJtQyxFQUFBekcsRUFBQXczQixNQUFBejdCLEVBQUFDLEdBQWtELFNBQUFpMUMsR0FBQWp4QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxHQUF1QnpFLElBQUErVixPQUFXLElBQUF6UixFQUFBb0csRUFBQWdhLElBQXNDLE9BQTFCeXdCLEdBQUF6cUMsRUFBQWpHLEdBQVF4RSxFQUFBOHlDLEdBQUE5dUMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBcUUsRUFBQUcsR0FBa0IsT0FBQVIsR0FBQXl2QyxJQUEwSGhwQyxFQUFBNHdCLFdBQUEsRUFBZXg0QixHQUFBbUIsRUFBQXlHLEVBQUF6SyxFQUFBd0UsR0FBV2lHLEVBQUErd0IsUUFBcEovd0IsRUFBQXdpQyxZQUFBanBDLEVBQUFpcEMsWUFBQXhpQyxFQUFBNHdCLFlBQUEsSUFBQXIzQixFQUFBdXBDLGdCQUFBL29DLElBQUFSLEVBQUF1cEMsZUFBQSxHQUFBNEgsR0FBQW54QyxFQUFBeUcsRUFBQWpHLElBQ2hMLFNBQUE0d0MsR0FBQXB4QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxFQUFBSCxHQUF5QixVQUFBTCxFQUFBLENBQWEsSUFBQXFULEVBQUF0WCxFQUFBb0MsS0FBYSx5QkFBQWtWLEdBQUFtMkIsR0FBQW4yQixTQUFBLElBQUFBLEVBQUF6QyxjQUFBLE9BQUE3VSxFQUFBeVYsY0FBQSxJQUFBelYsRUFBQTZVLGVBQThJNVEsRUFBQTBwQyxHQUFBM3RDLEVBQUFvQyxLQUFBLEtBQUFuQyxFQUFBLEtBQUF5SyxFQUFBNUosS0FBQXdELElBQWtDb2dCLElBQUFoYSxFQUFBZ2EsSUFBWXpnQixFQUFBc25CLE9BQUE3Z0IsRUFBV0EsRUFBQSt3QixNQUFBeDNCLElBQXZNeUcsRUFBQThDLElBQUEsR0FBQTlDLEVBQUF0SSxLQUFBa1YsRUFBQWcrQixHQUFBcnhDLEVBQUF5RyxFQUFBNE0sRUFBQXJYLEVBQUF3RSxFQUFBSCxJQUFrTyxPQUFWZ1QsRUFBQXJULEVBQUF3M0IsTUFBVWgzQixFQUFBSCxJQUFBRyxFQUFBNlMsRUFBQTYxQixlQUFBbnRDLEVBQUEsUUFBQUEsSUFBQXlWLFNBQUF6VixFQUFBbzdCLElBQUEzMkIsRUFBQXhFLElBQUFnRSxFQUFBeWdCLE1BQUFoYSxFQUFBZ2EsS0FBQTB3QixHQUFBbnhDLEVBQUF5RyxFQUFBcEcsSUFBK0ZvRyxFQUFBNHdCLFdBQUEsR0FBZXIzQixFQUFBeXBDLEdBQUFwMkIsRUFBQXJYLElBQVl5a0IsSUFBQWhhLEVBQUFnYSxJQUFZemdCLEVBQUFzbkIsT0FBQTdnQixFQUFXQSxFQUFBK3dCLE1BQUF4M0IsR0FDdGEsU0FBQXF4QyxHQUFBcnhDLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEVBQUFILEdBQXlCLGNBQUFMLEdBQUFtM0IsR0FBQW4zQixFQUFBa3BDLGNBQUFsdEMsSUFBQWdFLEVBQUF5Z0IsTUFBQWhhLEVBQUFnYSxNQUFBZ3ZCLElBQUEsRUFBQWp2QyxFQUFBSCxHQUFBOHdDLEdBQUFueEMsRUFBQXlHLEVBQUFwRyxHQUFBaXhDLEdBQUF0eEMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBcUUsR0FBMkYsU0FBQWt4QyxHQUFBdnhDLEVBQUF5RyxHQUFpQixJQUFBMUssRUFBQTBLLEVBQUFnYSxLQUFZLE9BQUF6Z0IsR0FBQSxPQUFBakUsR0FBQSxPQUFBaUUsS0FBQXlnQixNQUFBMWtCLEtBQUEwSyxFQUFBNHdCLFdBQUEsS0FBNEQsU0FBQWlhLEdBQUF0eEMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsR0FBdUIsSUFBQUgsRUFBQWlnQixHQUFBdmtCLEdBQUE4ckMsR0FBQTVuQixHQUFBSSxRQUE0RCxPQUFwQ2hnQixFQUFBeW5DLEdBQUFyaEMsRUFBQXBHLEdBQVU2d0MsR0FBQXpxQyxFQUFBakcsR0FBUXpFLEVBQUEreUMsR0FBQTl1QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUFxRSxFQUFBRyxHQUFrQixPQUFBUixHQUFBeXZDLElBQTBIaHBDLEVBQUE0d0IsV0FBQSxFQUFleDRCLEdBQUFtQixFQUFBeUcsRUFBQTFLLEVBQUF5RSxHQUFXaUcsRUFBQSt3QixRQUFwSi93QixFQUFBd2lDLFlBQUFqcEMsRUFBQWlwQyxZQUFBeGlDLEVBQUE0d0IsWUFBQSxJQUFBcjNCLEVBQUF1cEMsZ0JBQUEvb0MsSUFBQVIsRUFBQXVwQyxlQUFBLEdBQUE0SCxHQUFBbnhDLEVBQUF5RyxFQUFBakcsSUFDaFMsU0FBQWd4QyxHQUFBeHhDLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQXVCLEdBQUE4ZixHQUFBdmtCLEdBQUEsQ0FBUyxJQUFBc0UsR0FBQSxFQUFTaW9DLEdBQUE3aEMsUUFBTXBHLEdBQUEsRUFBa0IsR0FBUjZ3QyxHQUFBenFDLEVBQUFqRyxHQUFRLE9BQUFpRyxFQUFBa2dCLFVBQUEsT0FBQTNtQixNQUFBZzNCLFVBQUEsS0FBQXZ3QixFQUFBdXdCLFVBQUEsS0FBQXZ3QixFQUFBNHdCLFdBQUEsR0FBQXdVLEdBQUFwbEMsRUFBQTFLLEVBQUFDLEdBQUFpd0MsR0FBQXhsQyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQUF4RSxHQUFBLE9BQWdILFVBQUFnRSxFQUFBLENBQWtCLElBQUFxVCxFQUFBNU0sRUFBQWtnQixVQUFBdEgsRUFBQTVZLEVBQUF5aUMsY0FBb0M3MUIsRUFBQXNNLE1BQUFOLEVBQVUsSUFBQTFqQixFQUFBMFgsRUFBQXVNLFFBQUE3USxFQUFBaFQsRUFBQTJVLFlBQWdDLGlCQUFBM0IsR0FBQSxPQUFBQSxJQUFBNlIsR0FBQTdSLEtBQUErNEIsR0FBQXJoQyxFQUFBc0ksRUFBQXVSLEdBQUF2a0IsR0FBQThyQyxHQUFBNW5CLEdBQUFJLFNBQXFFLElBQUF2a0IsRUFBQUMsRUFBQWlWLHlCQUFBeFQsRUFBQSxtQkFBQTFCLEdBQUEsbUJBQUF1WCxFQUFBODRCLHdCQUF3RzN1QyxHQUFBLG1CQUFBNlYsRUFBQTI0QixrQ0FDOWIsbUJBQUEzNEIsRUFBQTA0Qiw0QkFBQTFzQixJQUFBcmpCLEdBQUFMLElBQUFvVCxJQUFBKzhCLEdBQUFybEMsRUFBQTRNLEVBQUFyWCxFQUFBK1MsR0FBNkUwaUMsSUFBQSxFQUFNLElBQUE3MEMsRUFBQTZKLEVBQUF1aUMsY0FBc0JydEMsRUFBQTBYLEVBQUExTyxNQUFBL0gsRUFBWSxJQUFBd2lCLEVBQUEzWSxFQUFBd2lDLFlBQW9CLE9BQUE3cEIsSUFBQThzQixHQUFBemxDLEVBQUEyWSxFQUFBcGpCLEVBQUFxWCxFQUFBN1MsR0FBQTdFLEVBQUE4SyxFQUFBdWlDLGVBQTRDM3BCLElBQUFyakIsR0FBQVksSUFBQWpCLEdBQUF5a0IsR0FBQUMsU0FBQW94QixJQUFBLG1CQUFBMzFDLElBQUErdUMsR0FBQXBrQyxFQUFBMUssRUFBQUQsRUFBQUUsR0FBQUwsRUFBQThLLEVBQUF1aUMsZ0JBQUEzcEIsRUFBQW95QixJQUFBOUYsR0FBQWxsQyxFQUFBMUssRUFBQXNqQixFQUFBcmpCLEVBQUFZLEVBQUFqQixFQUFBb1QsS0FBQXZSLEdBQUEsbUJBQUE2VixFQUFBKzRCLDJCQUFBLG1CQUFBLzRCLEVBQUFnNUIscUJBQUEsbUJBQUFoNUIsRUFBQWc1QixvQkFBQWg1QixFQUFBZzVCLHFCQUFBLG1CQUFBaDVCLEVBQUErNEIsMkJBQ3JMLzRCLEVBQUErNEIsNkJBQUEsbUJBQUEvNEIsRUFBQWk1QixvQkFBQTdsQyxFQUFBNHdCLFdBQUEsd0JBQUFoa0IsRUFBQWk1QixvQkFBQTdsQyxFQUFBNHdCLFdBQUEsR0FBQTV3QixFQUFBeWlDLGNBQUFsdEMsRUFBQXlLLEVBQUF1aUMsY0FBQXJ0QyxHQUFBMFgsRUFBQXNNLE1BQUEzakIsRUFBQXFYLEVBQUExTyxNQUFBaEosRUFBQTBYLEVBQUF1TSxRQUFBN1EsRUFBQS9TLEVBQUFxakIsSUFBQSxtQkFBQWhNLEVBQUFpNUIsb0JBQUE3bEMsRUFBQTR3QixXQUFBLEdBQUFyN0IsR0FBQSxRQUFnU3FYLEVBQUE1TSxFQUFBa2dCLFVBQUF0SCxFQUFBNVksRUFBQXlpQyxjQUFBNzFCLEVBQUFzTSxNQUFBbFosRUFBQXRJLE9BQUFzSSxFQUFBb2lDLFlBQUF4cEIsRUFBQW1CLEdBQUEvWixFQUFBdEksS0FBQWtoQixHQUFBMWpCLEVBQUEwWCxFQUFBdU0sUUFBQSxpQkFBQTdRLEVBQUFoVCxFQUFBMlUsY0FBQSxPQUFBM0IsSUFBQTZSLEdBQUE3UixLQUFBKzRCLEdBQUFyaEMsRUFBQXNJLEVBQUF1UixHQUFBdmtCLEdBQUE4ckMsR0FBQTVuQixHQUFBSSxVQUFBN2lCLEVBQUEsbUJBQUExQixFQUFBQyxFQUFBaVYsMkJBQ2hTLG1CQUFBcUMsRUFBQTg0QiwwQkFBQSxtQkFBQTk0QixFQUFBMjRCLGtDQUFBLG1CQUFBMzRCLEVBQUEwNEIsNEJBQUExc0IsSUFBQXJqQixHQUFBTCxJQUFBb1QsSUFBQSs4QixHQUFBcmxDLEVBQUE0TSxFQUFBclgsRUFBQStTLEdBQUEwaUMsSUFBQSxFQUFBOTFDLEVBQUE4SyxFQUFBdWlDLGNBQUFwc0MsRUFBQXlXLEVBQUExTyxNQUFBaEosRUFBQSxRQUFBeWpCLEVBQUEzWSxFQUFBd2lDLGVBQUFpRCxHQUFBemxDLEVBQUEyWSxFQUFBcGpCLEVBQUFxWCxFQUFBN1MsR0FBQTVELEVBQUE2SixFQUFBdWlDLGVBQUEzcEIsSUFBQXJqQixHQUFBTCxJQUFBaUIsR0FBQXdqQixHQUFBQyxTQUFBb3hCLElBQUEsbUJBQUEzMUMsSUFBQSt1QyxHQUFBcGtDLEVBQUExSyxFQUFBRCxFQUFBRSxHQUFBWSxFQUFBNkosRUFBQXVpQyxnQkFBQWx0QyxFQUFBMjFDLElBQUE5RixHQUFBbGxDLEVBQUExSyxFQUFBc2pCLEVBQUFyakIsRUFBQUwsRUFBQWlCLEVBQUFtUyxLQUFBdlIsR0FBQSxtQkFBQTZWLEVBQUFxK0IsNEJBQUEsbUJBQUFyK0IsRUFBQXMrQixzQkFBQSxtQkFDQXQrQixFQUFBcytCLHFCQUFBdCtCLEVBQUFzK0Isb0JBQUEzMUMsRUFBQVksRUFBQW1TLEdBQUEsbUJBQUFzRSxFQUFBcStCLDRCQUFBcitCLEVBQUFxK0IsMkJBQUExMUMsRUFBQVksRUFBQW1TLElBQUEsbUJBQUFzRSxFQUFBdStCLHFCQUFBbnJDLEVBQUE0d0IsV0FBQSxzQkFBQWhrQixFQUFBODRCLDBCQUFBMWxDLEVBQUE0d0IsV0FBQSwwQkFBQWhrQixFQUFBdStCLG9CQUFBdnlCLElBQUFyZixFQUFBa3BDLGVBQUF2dEMsSUFBQXFFLEVBQUFncEMsZ0JBQUF2aUMsRUFBQTR3QixXQUFBLHNCQUFBaGtCLEVBQUE4NEIseUJBQUE5c0IsSUFBQXJmLEVBQUFrcEMsZUFBQXZ0QyxJQUFBcUUsRUFBQWdwQyxnQkFBQXZpQyxFQUFBNHdCLFdBQUEsS0FBQTV3QixFQUFBeWlDLGNBQUFsdEMsRUFBQXlLLEVBQUF1aUMsY0FDQXBzQyxHQUFBeVcsRUFBQXNNLE1BQUEzakIsRUFBQXFYLEVBQUExTyxNQUFBL0gsRUFBQXlXLEVBQUF1TSxRQUFBN1EsRUFBQS9TLEVBQUFGLElBQUEsbUJBQUF1WCxFQUFBdStCLG9CQUFBdnlCLElBQUFyZixFQUFBa3BDLGVBQUF2dEMsSUFBQXFFLEVBQUFncEMsZ0JBQUF2aUMsRUFBQTR3QixXQUFBLHNCQUFBaGtCLEVBQUE4NEIseUJBQUE5c0IsSUFBQXJmLEVBQUFrcEMsZUFBQXZ0QyxJQUFBcUUsRUFBQWdwQyxnQkFBQXZpQyxFQUFBNHdCLFdBQUEsS0FBQXI3QixHQUFBLEdBQWdRLE9BQUE2MUMsR0FBQTd4QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUFxRSxFQUFBRyxHQUNoUSxTQUFBcXhDLEdBQUE3eEMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsRUFBQUgsR0FBeUJreEMsR0FBQXZ4QyxFQUFBeUcsR0FBUSxJQUFBNE0sRUFBQSxPQUFBNU0sRUFBQTR3QixXQUEyQixJQUFBcjdCLElBQUFxWCxFQUFBLE9BQUE3UyxHQUFBZ29DLEdBQUEvaEMsRUFBQTFLLEdBQUEsR0FBQW8xQyxHQUFBbnhDLEVBQUF5RyxFQUFBcEcsR0FBeUNyRSxFQUFBeUssRUFBQWtnQixVQUFjcXFCLEdBQUEzd0IsUUFBQTVaLEVBQWEsSUFBQTRZLEVBQUFoTSxHQUFBLG1CQUFBdFgsRUFBQWdWLHlCQUFBLEtBQUEvVSxFQUFBOFYsU0FBME0sT0FBbElyTCxFQUFBNHdCLFdBQUEsRUFBZSxPQUFBcjNCLEdBQUFxVCxHQUFBNU0sRUFBQSt3QixNQUFBc1YsR0FBQXJtQyxFQUFBekcsRUFBQXczQixNQUFBLEtBQUFuM0IsR0FBQW9HLEVBQUErd0IsTUFBQXNWLEdBQUFybUMsRUFBQSxLQUFBNFksRUFBQWhmLElBQUF4QixHQUFBbUIsRUFBQXlHLEVBQUE0WSxFQUFBaGYsR0FBNkVvRyxFQUFBdWlDLGNBQUFodEMsRUFBQTJJLE1BQXdCbkUsR0FBQWdvQyxHQUFBL2hDLEVBQUExSyxHQUFBLEdBQWMwSyxFQUFBK3dCLE1BQWUsU0FBQXNhLEdBQUE5eEMsR0FBZSxJQUFBeUcsRUFBQXpHLEVBQUEybUIsVUFBa0JsZ0IsRUFBQXNyQyxlQUFBNUosR0FBQW5vQyxFQUFBeUcsRUFBQXNyQyxlQUFBdHJDLEVBQUFzckMsaUJBQUF0ckMsRUFBQW1aLFNBQUFuWixFQUFBbVosU0FBQXVvQixHQUFBbm9DLEVBQUF5RyxFQUFBbVosU0FBQSxHQUFtR3d0QixHQUFBcHRDLEVBQUF5RyxFQUFBMDJCLGVBQzdkLFNBQUE2VSxHQUFBaHlDLEVBQUF5RyxFQUFBMUssR0FBbUIsSUFBQUMsRUFBQXlLLEVBQUE1SixLQUFBMkQsRUFBQWlHLEVBQUFxaUMsYUFBQXpvQyxFQUFBb0csRUFBQXVpQyxjQUFnRCxVQUFBdmlDLEVBQUE0d0IsV0FBQSxDQUF5QmgzQixFQUFBLEtBQU8sSUFBQWdULEdBQUEsT0FBU2hULEVBQUEsQ0FBUTR4QyxXQUFBLE9BQUE1eEMsSUFBQTR4QyxXQUFBLEdBQW1DNStCLEdBQUEsRUFBQTVNLEVBQUE0d0IsWUFBQSxHQUF1QixVQUFBcjNCLEVBQUEsR0FBQXFULEVBQUEsQ0FBa0IsSUFBQWdNLEVBQUE3ZSxFQUFBMHhDLFNBQWlCbHlDLEVBQUEycEMsR0FBQSxLQUFBM3RDLEVBQUEsUUFBb0IsTUFBQXlLLEVBQUE1SixRQUFBbUQsRUFBQXczQixNQUFBLE9BQUEvd0IsRUFBQXVpQyxjQUFBdmlDLEVBQUErd0IsWUFBQS93QixFQUFBK3dCLE9BQXVFeDdCLEVBQUEydEMsR0FBQXRxQixFQUFBcmpCLEVBQUFELEVBQUEsTUFBaUJpRSxFQUFBeTNCLFFBQUF6N0IsR0FBWUQsRUFBQWlFLEdBQUlzbkIsT0FBQXRyQixFQUFBc3JCLE9BQUE3Z0IsT0FBb0IxSyxFQUFBQyxFQUFBK3dDLEdBQUF0bUMsRUFBQSxLQUFBakcsRUFBQXFnQixTQUFBOWtCLFFBQWlDLE9BQUFpRSxFQUFBZ3BDLGVBQUEzcEIsR0FBQXJqQixFQUFBZ0UsRUFBQXczQixPQUFBQyxRQUFBcGtCLEdBQUF0WCxFQUFBeUUsRUFBQTB4QyxTQUFBMXhDLEVBQUFpcEMsR0FBQXp0QyxJQUFBOHNDLGNBQUEsTUFBQXJpQyxFQUFBNUosU0FBQXdXLEVBQUEsT0FDbFk1TSxFQUFBdWlDLGNBQUF2aUMsRUFBQSt3QixZQUFBL3dCLEVBQUErd0IsU0FBQXg3QixFQUFBdzdCLFFBQUFoM0IsRUFBQWczQixNQUFBbmtCLElBQUFyWCxFQUFBd0UsRUFBQWkzQixRQUFBZ1MsR0FBQXBxQixFQUFBdGpCLEVBQUFzakIsRUFBQWtxQixnQkFBQXh0QyxFQUFBeUUsSUFBQThvQyxvQkFBQSxFQUFBdnRDLEVBQUF1ckIsT0FBQXRyQixFQUFBc3JCLE9BQUE3Z0IsR0FBQTFLLEVBQUFDLEVBQUE4d0MsR0FBQXJtQyxFQUFBekssRUFBQXc3QixNQUFBaDNCLEVBQUFxZ0IsU0FBQTlrQixLQUFBc2pCLEVBQUFyZixFQUFBdzNCLE1BQUFua0IsS0FBQTdTLEVBQUEweEMsVUFBQTF4QyxFQUFBbXBDLEdBQUEsS0FBQTN0QyxFQUFBLFNBQUF3N0IsTUFBQW5ZLEVBQUEsTUFBQTVZLEVBQUE1SixRQUFBMkQsRUFBQWczQixNQUFBLE9BQUEvd0IsRUFBQXVpQyxjQUFBdmlDLEVBQUErd0IsWUFBQS93QixFQUFBK3dCLFFBQUF4N0IsRUFBQXdFLEVBQUFpM0IsUUFBQWtTLEdBQUF0MkIsRUFBQXJYLEVBQUFELEVBQUEsT0FBQXM3QixXQUFBLEVBQUF0N0IsRUFBQXlFLElBQUE4b0Msb0JBQUEsRUFBQXZ0QyxFQUFBdXJCLE9BQUF0ckIsRUFBQXNyQixPQUFBN2dCLEdBQUF6SyxFQUFBRCxFQUFBK3dDLEdBQUFybUMsRUFBQTRZLEVBQUE3ZSxFQUFBcWdCLFNBQUE5a0IsSUFBQTBLLEVBQUFrZ0IsVUFBQTNtQixFQUFBMm1CLFVBQStkLE9BQTVCbGdCLEVBQUF1aUMsY0FBQTNvQyxFQUFrQm9HLEVBQUErd0IsTUFBQXo3QixFQUFVQyxFQUMvZCxTQUFBbTFDLEdBQUFueEMsRUFBQXlHLEVBQUExSyxHQUEyRSxHQUF4RCxPQUFBaUUsSUFBQXlHLEVBQUFzaUMsb0JBQUEvb0MsRUFBQStvQyxxQkFBd0R0aUMsRUFBQTZpQyxvQkFBQXZ0QyxFQUFBLFlBQW1GLEdBQTVDLE9BQUFpRSxHQUFBeUcsRUFBQSt3QixRQUFBeDNCLEVBQUF3M0IsT0FBQXpZLEVBQUEsT0FBNEMsT0FBQXRZLEVBQUErd0IsTUFBQSxDQUErRSxJQUFsRHo3QixFQUFBMHRDLEdBQVZ6cEMsRUFBQXlHLEVBQUErd0IsTUFBVXgzQixFQUFBOG9DLGFBQUE5b0MsRUFBQXVwQyxnQkFBd0M5aUMsRUFBQSt3QixNQUFBejdCLEVBQVVBLEVBQUF1ckIsT0FBQTdnQixFQUFlLE9BQUF6RyxFQUFBeTNCLFNBQWlCejNCLElBQUF5M0IsU0FBQTE3QixJQUFBMDdCLFFBQUFnUyxHQUFBenBDLElBQUE4b0MsYUFBQTlvQyxFQUFBdXBDLGlCQUFBamlCLE9BQUE3Z0IsRUFBMEUxSyxFQUFBMDdCLFFBQUEsS0FBZSxPQUFBaHhCLEVBQUErd0IsTUFDdFcsU0FBQTJhLEdBQUFueUMsRUFBQXlHLEVBQUExSyxHQUFtQixJQUFBQyxFQUFBeUssRUFBQThpQyxlQUF1QixVQUFBdnBDLEdBQUEsR0FBQUEsRUFBQWtwQyxnQkFBQXppQyxFQUFBcWlDLGNBQUExb0IsR0FBQUMsUUFBQW92QixJQUFBLE9BQXNFLEdBQUF6ekMsRUFBQUQsRUFBQSxDQUFjLE9BQU4wekMsSUFBQSxFQUFNaHBDLEVBQUE4QyxLQUFjLE9BQUF1b0MsR0FBQXJyQyxHQUFhc3FDLEtBQUssTUFBTSxPQUFBeEQsR0FBQTltQyxHQUFhLE1BQU0sT0FBQTZaLEdBQUE3WixFQUFBdEksT0FBQW1xQyxHQUFBN2hDLEdBQXdCLE1BQU0sT0FBQTJtQyxHQUFBM21DLElBQUFrZ0IsVUFBQXdXLGVBQXVDLE1BQU0sUUFBQWlWLEdBQUEzckMsSUFBQXlpQyxjQUFBdnNDLE9BQW9DLE1BQU0sa0JBQUE4SixFQUFBdWlDLGNBQWlFLFlBQTlCaHRDLEVBQUF5SyxFQUFBK3dCLE1BQUE4UixzQkFBOEJ0dEMsR0FBQUQsRUFBQWkyQyxHQUFBaHlDLEVBQUF5RyxFQUFBMUssR0FBNEMsUUFBWjBLLEVBQUEwcUMsR0FBQW54QyxFQUFBeUcsRUFBQTFLLElBQVkwSyxFQUFBZ3hCLFFBQUEsS0FBZ0MsT0FBQTBaLEdBQUFueEMsRUFBQXlHLEVBQUExSyxTQUFrQjB6QyxJQUFBLEVBQThCLE9BQW5CaHBDLEVBQUE4aUMsZUFBQSxFQUFtQjlpQyxFQUFBOEMsS0FBYyxPQUFBdk4sRUFDdmZ5SyxFQUFBb2lDLFlBQWMsT0FBQTdvQyxNQUFBZzNCLFVBQUEsS0FBQXZ3QixFQUFBdXdCLFVBQUEsS0FBQXZ3QixFQUFBNHdCLFdBQUEsR0FBNkRyM0IsRUFBQXlHLEVBQUFxaUMsYUFBaUIsSUFBQXRvQyxFQUFBc25DLEdBQUFyaEMsRUFBQXdaLEdBQUFJLFNBQWtFLEdBQTVDNndCLEdBQUF6cUMsRUFBQTFLLEdBQVF5RSxFQUFBc3VDLEdBQUEsS0FBQXJvQyxFQUFBekssRUFBQWdFLEVBQUFRLEVBQUF6RSxHQUFxQjBLLEVBQUE0d0IsV0FBQSxFQUFlLGlCQUFBNzJCLEdBQUEsT0FBQUEsR0FBQSxtQkFBQUEsRUFBQXNSLGFBQUEsSUFBQXRSLEVBQUErUSxTQUFBLENBQWtHLEdBQWI5SyxFQUFBOEMsSUFBQSxFQUFRMmxDLEtBQUs1dUIsR0FBQXRrQixHQUFBLENBQVMsSUFBQXFFLEdBQUEsRUFBU2lvQyxHQUFBN2hDLFFBQU1wRyxHQUFBLEVBQVVvRyxFQUFBdWlDLGNBQUEsT0FBQXhvQyxFQUFBbUUsWUFBQSxJQUFBbkUsRUFBQW1FLE1BQUFuRSxFQUFBbUUsTUFBQSxLQUE4RCxJQUFBME8sRUFBQXJYLEVBQUFnVix5QkFBaUMsbUJBQUFxQyxHQUFBdzNCLEdBQUFwa0MsRUFBQXpLLEVBQUFxWCxFQUFBclQsR0FBbUNRLEVBQUFxZixRQUFBa3JCLEdBQWF0a0MsRUFBQWtnQixVQUFBbm1CLEVBQWNBLEVBQUF3cUMsb0JBQUF2a0MsRUFBd0J3bEMsR0FBQXhsQyxFQUFBekssRUFBQWdFLEVBQUFqRSxHQUFZMEssRUFBQW9yQyxHQUFBLEtBQUFwckMsRUFBQXpLLEdBQUEsRUFBQXFFLEVBQ25ldEUsUUFBRzBLLEVBQUE4QyxJQUFBLEVBQUExSyxHQUFBLEtBQUE0SCxFQUFBakcsRUFBQXpFLEdBQUEwSyxJQUFBK3dCLE1BQXFDLE9BQUEvd0IsRUFBUyxRQUF1SixPQUF2SmpHLEVBQUFpRyxFQUFBb2lDLFlBQXdCLE9BQUE3b0MsTUFBQWczQixVQUFBLEtBQUF2d0IsRUFBQXV3QixVQUFBLEtBQUF2d0IsRUFBQTR3QixXQUFBLEdBQTZEaDNCLEVBQUFvRyxFQUFBcWlDLGFBQWlCOW9DLEVBbkR2SixTQUFBQSxHQUFlLElBQUF5RyxFQUFBekcsRUFBQStpQixRQUFnQixPQUFBL2lCLEVBQUE4aUIsU0FBa0IsY0FBQXJjLEVBQWdCLE9BQWUsYUFBQUEsRUFBZSxRQUFvSyxPQUFwS3pHLEVBQUE4aUIsUUFBQSxHQUE4QnJjLEdBQVZBLEVBQUF6RyxFQUFBNmlCLFVBQWdCd3ZCLEtBQUEsU0FBQTVyQyxHQUFtQixJQUFBekcsRUFBQThpQixVQUFBcmMsSUFBQStWLFFBQUF4YyxFQUFBOGlCLFFBQUEsRUFBQTlpQixFQUFBK2lCLFFBQUF0YyxJQUFxRCxTQUFBQSxHQUFhLElBQUF6RyxFQUFBOGlCLFVBQUE5aUIsRUFBQThpQixRQUFBLEVBQUE5aUIsRUFBQStpQixRQUFBdGMsS0FBMkN6RyxFQUFBOGlCLFNBQWtCLGNBQUE5aUIsRUFBQStpQixRQUF3QixhQUFBL2lCLEVBQUEraUIsUUFBb0MsTUFBWi9pQixFQUFBK2lCLFFBQUF0YyxFQUFZQSxHQW1EMUw2ckMsQ0FBQTl4QyxHQUFRaUcsRUFBQXRJLEtBQUE2QixFQUFTUSxFQUFBaUcsRUFBQThDLElBNUQxRyxTQUFBdkosR0FBZSxzQkFBQUEsRUFBQSxPQUFBd3BDLEdBQUF4cEMsR0FBQSxJQUEwQyxTQUFBQSxFQUFBLENBQXNDLElBQWJBLElBQUF1UixZQUFhMGUsR0FBQSxVQUFvQixHQUFBandCLElBQUFtd0IsR0FBQSxVQUFvQixTQTREN0JvaUIsQ0FBQXZ5QyxHQUFjSyxFQUFBbWdCLEdBQUF4Z0IsRUFBQUssR0FBU2dULE9BQUEsRUFBUzdTLEdBQVUsT0FBQTZTLEVBQUFpK0IsR0FBQSxLQUFBN3FDLEVBQUF6RyxFQUFBSyxFQUFBdEUsR0FBMEIsTUFBTSxPQUFBc1gsRUFBQW0rQixHQUFBLEtBQUEvcUMsRUFBQXpHLEVBQUFLLEVBQUF0RSxHQUEwQixNQUFNLFFBQUFzWCxFQUFBNDlCLEdBQUEsS0FBQXhxQyxFQUFBekcsRUFBQUssRUFBQXRFLEdBQTJCLE1BQU0sUUFBQXNYLEVBQUErOUIsR0FBQSxLQUFBM3FDLEVBQUF6RyxFQUFBd2dCLEdBQUF4Z0IsRUFBQTdCLEtBQUFrQyxHQUFBckUsRUFBQUQsR0FBdUMsTUFBTSxRQUFBZ2pCLEVBQUEsTUFBQS9lLEVBQUEsSUFBc0IsT0FBQXFULEVBQVMsY0FBQXJYLEVBQUF5SyxFQUFBdEksS0FBQXFDLEVBQUFpRyxFQUFBcWlDLGFBQUF3SSxHQUFBdHhDLEVBQUF5RyxFQUFBekssRUFBQXdFLEVBQUFpRyxFQUFBb2lDLGNBQUE3c0MsRUFBQXdFLEVBQUFnZ0IsR0FBQXhrQixFQUFBd0UsR0FBQXpFLEdBQW1GLGNBQUFDLEVBQUF5SyxFQUFBdEksS0FBQXFDLEVBQUFpRyxFQUFBcWlDLGFBQ2xkMEksR0FBQXh4QyxFQUFBeUcsRUFBQXpLLEVBQUF3RSxFQUFBaUcsRUFBQW9pQyxjQUFBN3NDLEVBQUF3RSxFQUFBZ2dCLEdBQUF4a0IsRUFBQXdFLEdBQUF6RSxHQUEyQyxPQUFzVyxPQUF0VysxQyxHQUFBcnJDLEdBQTZCLFFBQWhCekssRUFBQXlLLEVBQUF3aUMsY0FBZ0JscUIsRUFBQSxPQUEyQ3ZlLEVBQUEsUUFBbEJBLEVBQUFpRyxFQUFBdWlDLGVBQWtCeG9DLEVBQUFtL0IsUUFBQSxLQUEwQnVNLEdBQUF6bEMsRUFBQXpLLEVBQUF5SyxFQUFBcWlDLGFBQUEsS0FBQS9zQyxJQUE4QkMsRUFBQXlLLEVBQUF1aUMsY0FBQXJKLFdBQTBCbi9CLEdBQUF1d0MsS0FBQXRxQyxFQUFBMHFDLEdBQUFueEMsRUFBQXlHLEVBQUExSyxLQUErQnlFLEVBQUFpRyxFQUFBa2dCLFdBQWNubUIsR0FBQSxPQUFBUixHQUFBLE9BQUFBLEVBQUF3M0IsUUFBQWgzQixFQUFBZ3lDLFdBQUFoQyxHQUFBaEosR0FBQS9nQyxFQUFBa2dCLFVBQUF3VyxlQUFBb1QsR0FBQTlwQyxFQUFBakcsRUFBQWl3QyxJQUFBLEdBQXlGandDLEdBQUFpRyxFQUFBNHdCLFdBQUEsRUFBQTV3QixFQUFBK3dCLE1BQUF1VixHQUFBdG1DLEVBQUEsS0FBQXpLLEVBQUFELEtBQUE4QyxHQUFBbUIsRUFBQXlHLEVBQUF6SyxFQUFBRCxHQUFBZzFDLE1BQTREdHFDLElBQUErd0IsT0FBVS93QixFQUFTLGNBQUE4bUMsR0FBQTltQyxHQUFBLE9BQUF6RyxHQUFBNHdDLEdBQUFucUMsR0FBQXpLLEVBQUF5SyxFQUFBdEksS0FBQXFDLEVBQUFpRyxFQUFBcWlDLGFBQUF6b0MsRUFBQSxPQUFBTCxJQUFBa3BDLGNBQUEsS0FDMVo3MUIsRUFBQTdTLEVBQUFxZ0IsU0FBQWltQixHQUFBOXFDLEVBQUF3RSxHQUFBNlMsRUFBQSxZQUFBaFQsR0FBQXltQyxHQUFBOXFDLEVBQUFxRSxLQUFBb0csRUFBQTR3QixXQUFBLElBQUFrYSxHQUFBdnhDLEVBQUF5RyxHQUFBLElBQUExSyxHQUFBLEVBQUEwSyxFQUFBNUosTUFBQTJELEVBQUFpeUMsUUFBQWhzQyxFQUFBOGlDLGVBQUE5aUMsRUFBQTZpQyxvQkFBQSxFQUFBN2lDLEVBQUEsT0FBQTVILEdBQUFtQixFQUFBeUcsRUFBQTRNLEVBQUF0WCxHQUFBMEssSUFBQSt3QixPQUFBL3dCLEVBQThLLHFCQUFBekcsR0FBQTR3QyxHQUFBbnFDLEdBQUEsS0FBbUMsZUFBQXVyQyxHQUFBaHlDLEVBQUF5RyxFQUFBMUssR0FBeUIsY0FBQXF4QyxHQUFBM21DLElBQUFrZ0IsVUFBQXdXLGVBQUFuaEMsRUFBQXlLLEVBQUFxaUMsYUFBQSxPQUFBOW9DLEVBQUF5RyxFQUFBK3dCLE1BQUFzVixHQUFBcm1DLEVBQUEsS0FBQXpLLEVBQUFELEdBQUE4QyxHQUFBbUIsRUFBQXlHLEVBQUF6SyxFQUFBRCxHQUFBMEssRUFBQSt3QixNQUFrSCxlQUFBeDdCLEVBQUF5SyxFQUFBdEksS0FBQXFDLEVBQUFpRyxFQUFBcWlDLGFBQUFtSSxHQUFBanhDLEVBQUF5RyxFQUFBekssRUFBQXdFLEVBQUFpRyxFQUFBb2lDLGNBQUE3c0MsRUFBQXdFLEVBQUFnZ0IsR0FBQXhrQixFQUFBd0UsR0FBQXpFLEdBQW9GLGNBQUE4QyxHQUFBbUIsRUFBQXlHLElBQUFxaUMsYUFBQS9zQyxHQUFBMEssRUFBQSt3QixNQUE4QyxPQUNuZCxlQUFBMzRCLEdBQUFtQixFQUFBeUcsSUFBQXFpQyxhQUFBam9CLFNBQUE5a0IsR0FBQTBLLEVBQUErd0IsTUFBd0QsUUFBQXgzQixFQUFBLENBQWtGLEdBQXZFaEUsRUFBQXlLLEVBQUF0SSxLQUFBdWtCLFNBQWtCbGlCLEVBQUFpRyxFQUFBcWlDLGFBQWlCejFCLEVBQUE1TSxFQUFBeWlDLGNBQTRCa0osR0FBQTNyQyxFQUFWcEcsRUFBQUcsRUFBQTdELE9BQWtCLE9BQUEwVyxFQUFBLENBQWEsSUFBQWdNLEVBQUFoTSxFQUFBMVcsTUFBa0gsUUFBcEcwRCxFQUFBNDJCLEdBQUE1WCxFQUFBaGYsR0FBQSx3QkFBQXJFLEVBQUFvbUIsc0JBQUFwbUIsRUFBQW9tQixzQkFBQS9DLEVBQUFoZixHQUFBLGNBQThHLEdBQUFnVCxFQUFBd04sV0FBQXJnQixFQUFBcWdCLFdBQUFULEdBQUFDLFFBQUEsQ0FBd0M1WixFQUFBMHFDLEdBQUFueEMsRUFBQXlHLEVBQUExSyxHQUFZLE1BQUFpRSxRQUFTLFlBQUFxZixFQUFBNVksRUFBQSt3QixTQUFBblksRUFBQWlJLE9BQUE3Z0IsR0FBMEMsT0FBQTRZLEdBQVMsQ0FBRSxJQUFBMWpCLEVBQUEwakIsRUFBQTBwQixvQkFBNEIsVUFBQXB0QyxFQUFBLENBQWEwWCxFQUFBZ00sRUFBQW1ZLE1BQVUsUUFBQXpvQixFQUFBcFQsRUFBQSsyQyxNQUFrQixPQUFBM2pDLEdBQVMsQ0FBRSxHQUFBQSxFQUFBNlEsVUFBQTVqQixHQUFBLElBQ2hlK1MsRUFBQTRqQyxhQUFBdHlDLEdBQUEsQ0FBb0IsSUFBQWdmLEVBQUE5VixPQUFBd0YsRUFBQW04QixHQUFBbnZDLElBQUF3TixJQUFBbWlDLEdBQUFILEdBQUFsc0IsRUFBQXRRLElBQXNDc1EsRUFBQWtxQixlQUFBeHRDLElBQUFzakIsRUFBQWtxQixlQUFBeHRDLEdBQXVELFFBQWRnVCxFQUFBc1EsRUFBQTJYLFlBQWNqb0IsRUFBQXc2QixlQUFBeHRDLElBQUFnVCxFQUFBdzZCLGVBQUF4dEMsR0FBbURnVCxFQUFBaFQsRUFBSSxRQUFBRCxFQUFBdWpCLEVBQUFpSSxPQUFtQixPQUFBeHJCLEdBQVMsQ0FBRSxJQUFBMEIsRUFBQTFCLEVBQUFrN0IsVUFBa0IsR0FBQWw3QixFQUFBd3RDLG9CQUFBdjZCLEVBQUFqVCxFQUFBd3RDLG9CQUFBdjZCLEVBQUEsT0FBQXZSLEtBQUE4ckMsb0JBQUF2NkIsSUFBQXZSLEVBQUE4ckMsb0JBQUF2NkIsT0FBZ0gsYUFBQXZSLEtBQUE4ckMsb0JBQUF2NkIsR0FBa0UsTUFBbEV2UixFQUFBOHJDLG9CQUFBdjZCLEVBQTZFalQsSUFBQXdyQixPQUFXM3JCLEVBQUE0dEMsZUFBQXh0QyxJQUFBSixFQUFBNHRDLGVBQUF4dEMsR0FBeUMsTUFBTWdULElBQUFsTCxXQUFVd1AsRUFBQSxLQUFBZ00sRUFBQTlWLEtBQUE4VixFQUFBbGhCLE9BQUFzSSxFQUFBdEksS0FDemQsS0FBQWtoQixFQUFBbVksTUFBcUIsVUFBQW5rQixJQUFBaVUsT0FBQWpJLE9BQXVCLElBQUFoTSxFQUFBZ00sRUFBYSxPQUFBaE0sR0FBUyxDQUFFLEdBQUFBLElBQUE1TSxFQUFBLENBQVU0TSxFQUFBLEtBQU8sTUFBa0IsV0FBWmdNLEVBQUFoTSxFQUFBb2tCLFNBQVksQ0FBYXBZLEVBQUFpSSxPQUFBalUsRUFBQWlVLE9BQWtCalUsRUFBQWdNLEVBQUksTUFBTWhNLElBQUFpVSxPQUFXakksRUFBQWhNLEdBQUt4VSxHQUFBbUIsRUFBQXlHLEVBQUFqRyxFQUFBcWdCLFNBQUE5a0IsR0FBb0IwSyxJQUFBK3dCLE1BQVUsT0FBQS93QixFQUFTLGNBQUFqRyxFQUFBaUcsRUFBQXRJLEtBQUFuQyxHQUFBcUUsRUFBQW9HLEVBQUFxaUMsY0FBQWpvQixTQUFBcXdCLEdBQUF6cUMsRUFBQTFLLEdBQUFDLElBQUF3RSxFQUFBb2dCLEdBQUFwZ0IsRUFBQUgsRUFBQXV5Qyx3QkFBQW5zQyxFQUFBNHdCLFdBQUEsRUFBQXg0QixHQUFBbUIsRUFBQXlHLEVBQUF6SyxFQUFBRCxHQUFBMEssRUFBQSt3QixNQUFxSSxlQUFBbjNCLEVBQUFtZ0IsR0FBQWhnQixFQUFBaUcsRUFBQXRJLEtBQUFzSSxFQUFBcWlDLGNBQUFzSSxHQUFBcHhDLEVBQUF5RyxFQUFBakcsRUFBQUgsRUFBQW1nQixHQUFBaGdCLEVBQUFyQyxLQUFBa0MsR0FBQXJFLEVBQUFELEdBQTRFLGVBQUFzMUMsR0FBQXJ4QyxFQUFBeUcsSUFBQXRJLEtBQUFzSSxFQUFBcWlDLGFBQUE5c0MsRUFBQUQsR0FBaUQsZUFBQUMsRUFBQXlLLEVBQUF0SSxLQUFBcUMsRUFBQWlHLEVBQUFxaUMsYUFBQXRvQyxFQUFBaUcsRUFBQW9pQyxjQUN6YzdzQyxFQUFBd0UsRUFBQWdnQixHQUFBeGtCLEVBQUF3RSxHQUFBLE9BQUFSLE1BQUFnM0IsVUFBQSxLQUFBdndCLEVBQUF1d0IsVUFBQSxLQUFBdndCLEVBQUE0d0IsV0FBQSxHQUFBNXdCLEVBQUE4QyxJQUFBLEVBQUErVyxHQUFBdGtCLElBQUFnRSxHQUFBLEVBQUFzb0MsR0FBQTdoQyxJQUFBekcsR0FBQSxFQUFBa3hDLEdBQUF6cUMsRUFBQTFLLEdBQUE4dkMsR0FBQXBsQyxFQUFBekssRUFBQXdFLEdBQUF5ckMsR0FBQXhsQyxFQUFBekssRUFBQXdFLEVBQUF6RSxHQUFBODFDLEdBQUEsS0FBQXByQyxFQUFBekssR0FBQSxFQUFBZ0UsRUFBQWpFLEdBQTJKZ2pCLEVBQUEsT0FBUyxJQUFBOHpCLEdBQUEsQ0FBUXh5QixRQUFBLE1BQWF5eUIsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBeUIsU0FBQVosR0FBQXB5QyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBN0IsS0FBQXVrQixTQUFzQi9qQixHQUFBazBDLEdBQUE5MkMsRUFBQXNtQixlQUF3QnRtQixFQUFBc21CLGNBQUE1YixFQUFrQixTQUFBd3NDLEdBQUFqekMsR0FBZSxJQUFBeUcsRUFBQW9zQyxHQUFBeHlCLFFBQWlCNWhCLEdBQUFvMEMsSUFBUTd5QyxFQUFBN0IsS0FBQXVrQixTQUFBTCxjQUFBNWIsRUFBZ0MsU0FBQXlxQyxHQUFBbHhDLEVBQUF5RyxHQUFpQnFzQyxHQUFBOXlDLEVBQUtnekMsR0FBQUQsR0FBQSxLQUFXLElBQUFoM0MsRUFBQWlFLEVBQUErb0Msb0JBQTRCLE9BQUFodEMsS0FBQXd0QyxnQkFBQTlpQyxJQUFBZ3BDLElBQUEsR0FBdUN6dkMsRUFBQStvQyxvQkFBQSxLQUMvYyxTQUFBbm9CLEdBQUE1Z0IsRUFBQXlHLEdBQW9QLE9BQXBPdXNDLEtBQUFoekMsSUFBQSxJQUFBeUcsR0FBQSxJQUFBQSxJQUEwQixpQkFBQUEsR0FBQSxhQUFBQSxJQUFBdXNDLEdBQUFoekMsRUFBQXlHLEVBQUEsWUFBeURBLEVBQUEsQ0FBR21aLFFBQUE1ZixFQUFBMnlDLGFBQUFsc0MsRUFBQTVDLEtBQUEsTUFBb0MsT0FBQWt2QyxJQUFBLE9BQUFELElBQUEvekIsRUFBQSxPQUFBZzBCLEdBQUF0c0MsRUFBQXFzQyxHQUFBL0osb0JBQUEsQ0FBa0UySixNQUFBanNDLEVBQUE4aUMsZUFBQSxJQUF5QndKLE1BQUFsdkMsS0FBQTRDLEdBQWV6RyxFQUFBcWlCLGNBQXVCLElBQUE2d0IsR0FBQSxFQUFBekgsR0FBQSxFQUFBQyxHQUFBLEVBQUF5SCxHQUFBLEVBQUExQixJQUFBLEVBQThCLFNBQUEyQixHQUFBcHpDLEdBQWUsT0FBTzhxQyxVQUFBOXFDLEVBQUFxekMsWUFBQSxLQUFBQyxXQUFBLEtBQUFDLG9CQUFBLEtBQUFDLG1CQUFBLEtBQUFwSyxZQUFBLEtBQUFELFdBQUEsS0FBQXNLLG9CQUFBLEtBQUFDLG1CQUFBLE1BQy9ULFNBQUFDLEdBQUEzekMsR0FBZSxPQUFPOHFDLFVBQUE5cUMsRUFBQThxQyxVQUFBdUksWUFBQXJ6QyxFQUFBcXpDLFlBQUFDLFdBQUF0ekMsRUFBQXN6QyxXQUFBQyxvQkFBQSxLQUFBQyxtQkFBQSxLQUFBcEssWUFBQSxLQUFBRCxXQUFBLEtBQUFzSyxvQkFBQSxLQUFBQyxtQkFBQSxNQUE0TSxTQUFBeEksR0FBQWxyQyxHQUFlLE9BQU91cEMsZUFBQXZwQyxFQUFBdUosSUFBQTJwQyxHQUFBOUgsUUFBQSxLQUFBQyxTQUFBLEtBQUF4bkMsS0FBQSxLQUFBd2xDLFdBQUEsTUFBOEUsU0FBQXVLLEdBQUE1ekMsRUFBQXlHLEdBQWlCLE9BQUF6RyxFQUFBc3pDLFdBQUF0ekMsRUFBQXF6QyxZQUFBcnpDLEVBQUFzekMsV0FBQTdzQyxHQUFBekcsRUFBQXN6QyxXQUFBenZDLEtBQUE0QyxFQUFBekcsRUFBQXN6QyxXQUFBN3NDLEdBQ3ZWLFNBQUE4a0MsR0FBQXZyQyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBZzNCLFVBQWtCLFVBQUFqN0IsRUFBQSxDQUFhLElBQUFDLEVBQUFnRSxFQUFBaXBDLFlBQW9Cem9DLEVBQUEsS0FBVyxPQUFBeEUsTUFBQWdFLEVBQUFpcEMsWUFBQW1LLEdBQUFwekMsRUFBQWdwQyxxQkFBZ0RodEMsRUFBQWdFLEVBQUFpcEMsWUFBQXpvQyxFQUFBekUsRUFBQWt0QyxZQUFBLE9BQUFqdEMsRUFBQSxPQUFBd0UsR0FBQXhFLEVBQUFnRSxFQUFBaXBDLFlBQUFtSyxHQUFBcHpDLEVBQUFncEMsZUFBQXhvQyxFQUFBekUsRUFBQWt0QyxZQUFBbUssR0FBQXIzQyxFQUFBaXRDLGdCQUFBaHRDLEVBQUFnRSxFQUFBaXBDLFlBQUEwSyxHQUFBbnpDLEdBQUEsT0FBQUEsTUFBQXpFLEVBQUFrdEMsWUFBQTBLLEdBQUEzM0MsSUFBeUwsT0FBQXdFLEdBQUF4RSxJQUFBd0UsRUFBQW96QyxHQUFBNTNDLEVBQUF5SyxHQUFBLE9BQUF6SyxFQUFBczNDLFlBQUEsT0FBQTl5QyxFQUFBOHlDLFlBQUFNLEdBQUE1M0MsRUFBQXlLLEdBQUFtdEMsR0FBQXB6QyxFQUFBaUcsS0FBQW10QyxHQUFBNTNDLEVBQUF5SyxHQUFBakcsRUFBQTh5QyxXQUFBN3NDLEdBQ3hULFNBQUFvdEMsR0FBQTd6QyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUFpRSxFQUFBaXBDLFlBQXlFLFFBQXJEbHRDLEVBQUEsT0FBQUEsRUFBQWlFLEVBQUFpcEMsWUFBQW1LLEdBQUFwekMsRUFBQWdwQyxlQUFBOEssR0FBQTl6QyxFQUFBakUsSUFBcUR5M0MsbUJBQUF6M0MsRUFBQXczQyxvQkFBQXgzQyxFQUFBeTNDLG1CQUFBL3NDLEdBQUExSyxFQUFBeTNDLG1CQUFBM3ZDLEtBQUE0QyxFQUFBMUssRUFBQXkzQyxtQkFBQS9zQyxHQUE4SCxTQUFBcXRDLEdBQUE5ekMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBaUUsRUFBQWczQixVQUF1RSxPQUFyRCxPQUFBajdCLEdBQUEwSyxJQUFBMUssRUFBQWt0QyxjQUFBeGlDLEVBQUF6RyxFQUFBaXBDLFlBQUEwSyxHQUFBbHRDLElBQXFEQSxFQUNoVCxTQUFBc3RDLEdBQUEvekMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsRUFBQUgsR0FBeUIsT0FBQXRFLEVBQUF3TixLQUFjLEtBQUFraUMsR0FBQSx5QkFBQXpyQyxFQUFBakUsRUFBQXF2QyxTQUFBcHJDLEVBQUFuRSxLQUFBd0UsRUFBQXJFLEVBQUF3RSxHQUFBUixFQUFpRSxLQUFBbXpDLEdBQUFuekMsRUFBQXEzQixXQUFBLEtBQUFyM0IsRUFBQXEzQixVQUFBLEdBQXlDLEtBQUE2YixHQUE0RCxVQUF4QzF5QyxFQUFBLG1CQUFwQlIsRUFBQWpFLEVBQUFxdkMsU0FBb0JwckMsRUFBQW5FLEtBQUF3RSxFQUFBckUsRUFBQXdFLEdBQUFSLEdBQXdDLE1BQThCLE9BQUE3QyxFQUFBLEdBQVduQixFQUFBd0UsR0FBTSxLQUFBa3JDLEdBQUErRixJQUFBLEVBQWMsT0FBQXoxQyxFQUMxUSxTQUFBa3dDLEdBQUFsc0MsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsR0FBdUJpeEMsSUFBQSxFQUFnQixRQUFBcHhDLEdBQVZvRyxFQUFBcXRDLEdBQUE5ekMsRUFBQXlHLElBQVVxa0MsVUFBQXozQixFQUFBLEtBQUFnTSxFQUFBLEVBQUExakIsRUFBQThLLEVBQUE0c0MsWUFBQXRrQyxFQUFBMU8sRUFBcUQsT0FBQTFFLEdBQVMsQ0FBRSxJQUFBRyxFQUFBSCxFQUFBNHRDLGVBQXVCenRDLEVBQUEwRSxHQUFBLE9BQUE2UyxNQUFBMVgsRUFBQTBFLEVBQUEwTyxHQUFBc1EsRUFBQXZqQixJQUFBdWpCLEVBQUF2akIsS0FBQWlULEVBQUFnbEMsR0FBQS96QyxFQUFBeUcsRUFBQTlLLEVBQUFvVCxFQUFBaFQsRUFBQUMsR0FBQSxPQUFBTCxFQUFBMHZDLFdBQUFyckMsRUFBQXEzQixXQUFBLEdBQUExN0IsRUFBQTB0QyxXQUFBLFlBQUE1aUMsRUFBQTBpQyxXQUFBMWlDLEVBQUEyaUMsWUFBQTNpQyxFQUFBMGlDLFdBQUF4dEMsR0FBQThLLEVBQUEwaUMsV0FBQUUsV0FBQTF0QyxFQUFBOEssRUFBQTBpQyxXQUFBeHRDLEtBQTRNQSxJQUFBa0ksS0FBZ0IsSUFBUC9ILEVBQUEsS0FBT0gsRUFBQThLLEVBQUE4c0Msb0JBQTRCLE9BQUE1M0MsR0FBUyxDQUFFLElBQUE2QixFQUFBN0IsRUFBQTR0QyxlQUF1Qi9yQyxFQUFBZ0QsR0FBQSxPQUFBMUUsTUFBQUgsRUFBQSxPQUFBMFgsSUFBQWhULEVBQUEwTyxJQUFBc1EsRUFBQTdoQixJQUFBNmhCLEVBQUE3aEIsS0FBQXVSLEVBQUFnbEMsR0FBQS96QyxFQUFBeUcsRUFBQTlLLEVBQUFvVCxFQUFBaFQsRUFBQUMsR0FBQSxPQUFBTCxFQUFBMHZDLFdBQUFyckMsRUFBQXEzQixXQUN4WixHQUFBMTdCLEVBQUEwdEMsV0FBQSxZQUFBNWlDLEVBQUFpdEMsbUJBQUFqdEMsRUFBQWd0QyxvQkFBQWh0QyxFQUFBaXRDLG1CQUFBLzNDLEdBQUE4SyxFQUFBaXRDLG1CQUFBckssV0FBQTF0QyxFQUFBOEssRUFBQWl0QyxtQkFBQS8zQyxLQUEySkEsSUFBQWtJLEtBQVMsT0FBQXdQLElBQUE1TSxFQUFBNnNDLFdBQUEsTUFBOEIsT0FBQXgzQyxFQUFBMkssRUFBQStzQyxtQkFBQSxLQUFBeHpDLEVBQUFxM0IsV0FBQSxHQUFtRCxPQUFBaGtCLEdBQUEsT0FBQXZYLElBQUF1RSxFQUFBME8sR0FBMEJ0SSxFQUFBcWtDLFVBQUF6cUMsRUFBY29HLEVBQUE0c0MsWUFBQWhnQyxFQUFnQjVNLEVBQUE4c0Msb0JBQUF6M0MsRUFBd0JrRSxFQUFBdXBDLGVBQUFscUIsRUFBbUJyZixFQUFBZ3BDLGNBQUFqNkIsRUFDeFYsU0FBQWlsQyxHQUFBaDBDLEVBQUF5RyxFQUFBMUssR0FBbUIsT0FBQTBLLEVBQUE4c0Msc0JBQUEsT0FBQTlzQyxFQUFBNnNDLGFBQUE3c0MsRUFBQTZzQyxXQUFBenZDLEtBQUE0QyxFQUFBOHNDLG9CQUFBOXNDLEVBQUE2c0MsV0FBQTdzQyxFQUFBK3NDLG9CQUFBL3NDLEVBQUE4c0Msb0JBQUE5c0MsRUFBQStzQyxtQkFBQSxNQUFpTFMsR0FBQXh0QyxFQUFBMmlDLFlBQUFydEMsR0FBb0IwSyxFQUFBMmlDLFlBQUEzaUMsRUFBQTBpQyxXQUFBLEtBQWdDOEssR0FBQXh0QyxFQUFBZ3RDLG9CQUFBMTNDLEdBQTRCMEssRUFBQWd0QyxvQkFBQWh0QyxFQUFBaXRDLG1CQUFBLEtBQWdELFNBQUFPLEdBQUFqMEMsRUFBQXlHLEdBQWlCLEtBQUssT0FBQXpHLEdBQVMsQ0FBRSxJQUFBakUsRUFBQWlFLEVBQUFxckMsU0FBaUIsVUFBQXR2QyxFQUFBLENBQWFpRSxFQUFBcXJDLFNBQUEsS0FBZ0IsSUFBQXJ2QyxFQUFBeUssRUFBUSxtQkFBQTFLLEdBQUFnakIsRUFBQSxNQUFBaGpCLEdBQXdDQSxFQUFBRixLQUFBRyxHQUFVZ0UsSUFBQXFwQyxZQUM3YyxTQUFBNkssR0FBQWwwQyxFQUFBeUcsR0FBaUIsT0FBTzlKLE1BQUFxRCxFQUFBNUIsT0FBQXFJLEVBQUEwdEMsTUFBQTNqQixHQUFBL3BCLElBQThCLFNBQUEydEMsR0FBQXAwQyxHQUFlQSxFQUFBcTNCLFdBQUEsRUFBZSxJQUFBZ2QsUUFBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUE0Q0gsR0FBQSxTQUFBcjBDLEVBQUF5RyxHQUFpQixRQUFBMUssRUFBQTBLLEVBQUErd0IsTUFBa0IsT0FBQXo3QixHQUFTLENBQUUsT0FBQUEsRUFBQXdOLEtBQUEsSUFBQXhOLEVBQUF3TixJQUFBdkosRUFBQStQLFlBQUFoVSxFQUFBNHFCLGdCQUFtRCxPQUFBNXFCLEVBQUF3TixLQUFBLE9BQUF4TixFQUFBeTdCLE1BQUEsQ0FBbUN6N0IsRUFBQXk3QixNQUFBbFEsT0FBQXZyQixFQUFpQkEsSUFBQXk3QixNQUFVLFNBQVMsR0FBQXo3QixJQUFBMEssRUFBQSxNQUFlLEtBQUssT0FBQTFLLEVBQUEwN0IsU0FBaUIsQ0FBRSxVQUFBMTdCLEVBQUF1ckIsUUFBQXZyQixFQUFBdXJCLFNBQUE3Z0IsRUFBQSxPQUF3QzFLLElBQUF1ckIsT0FBV3ZyQixFQUFBMDdCLFFBQUFuUSxPQUFBdnJCLEVBQUF1ckIsT0FBMEJ2ckIsSUFBQTA3QixVQUFjNmMsR0FBQSxhQUMxYUMsR0FBQSxTQUFBdjBDLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQXVCLElBQUFILEVBQUFMLEVBQUFrcEMsY0FBc0IsR0FBQTdvQyxJQUFBckUsRUFBQSxDQUFVLElBQUFxWCxFQUFBNU0sRUFBQWtnQixVQUF1QyxPQUFyQndtQixHQUFBcHNCLEdBQUFWLFNBQWNyZ0IsRUFBQSxLQUFPakUsR0FBVSxZQUFBc0UsRUFBQTB4QixHQUFBMWUsRUFBQWhULEdBQXVCckUsRUFBQSsxQixHQUFBMWUsRUFBQXJYLEdBQVVnRSxFQUFBLEdBQUssTUFBTSxhQUFBSyxFQUFBc2dDLEdBQUF0dEIsRUFBQWhULEdBQXdCckUsRUFBQTJrQyxHQUFBdHRCLEVBQUFyWCxHQUFVZ0UsRUFBQSxHQUFLLE1BQU0sYUFBQUssRUFBQWxELEVBQUEsR0FBb0JrRCxFQUFBLENBQUkxRCxXQUFBLElBQWVYLEVBQUFtQixFQUFBLEdBQU1uQixFQUFBLENBQUlXLFdBQUEsSUFBZXFELEVBQUEsR0FBSyxNQUFNLGVBQUFLLEVBQUEyZ0MsR0FBQTN0QixFQUFBaFQsR0FBMEJyRSxFQUFBZ2xDLEdBQUEzdEIsRUFBQXJYLEdBQVVnRSxFQUFBLEdBQUssTUFBTSwyQkFBQUssRUFBQW8wQyxTQUFBLG1CQUFBejRDLEVBQUF5NEMsVUFBQXBoQyxFQUFBcWhDLFFBQUFqTyxJQUFxRkgsR0FBQXZxQyxFQUFBQyxHQUFRcVgsRUFBQXRYLE9BQUEsRUFBVyxJQUFBc2pCLEVBQUEsS0FBVyxJQUFBdGpCLEtBQUFzRSxFQUFBLElBQUFyRSxFQUFBdUIsZUFBQXhCLElBQUFzRSxFQUFBOUMsZUFBQXhCLElBQUEsTUFBQXNFLEVBQUF0RSxHQUFBLGFBQzlhQSxFQUFBLENBQUcsSUFBQUosRUFBQTBFLEVBQUF0RSxHQUFXLElBQUFzWCxLQUFBMVgsSUFBQTRCLGVBQUE4VixLQUFBZ00sTUFBQSxJQUF5Q0EsRUFBQWhNLEdBQUEsUUFBVyw0QkFBQXRYLEdBQUEsYUFBQUEsR0FBQSxtQ0FBQUEsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBc3BCLEVBQUE5bkIsZUFBQXhCLEdBQUFpRSxNQUFBLEtBQUFBLEtBQUEsSUFBQStDLEtBQUFoSCxFQUFBLE9BQWtNLElBQUFBLEtBQUFDLEVBQUEsQ0FBWSxJQUFBK1MsRUFBQS9TLEVBQUFELEdBQWlDLEdBQXRCSixFQUFBLE1BQUEwRSxJQUFBdEUsUUFBQSxFQUFzQkMsRUFBQXVCLGVBQUF4QixJQUFBZ1QsSUFBQXBULElBQUEsTUFBQW9ULEdBQUEsTUFBQXBULEdBQUEsYUFBQUksRUFBQSxHQUFBSixFQUFBLENBQXVFLElBQUEwWCxLQUFBMVgsS0FBQTRCLGVBQUE4VixJQUFBdEUsS0FBQXhSLGVBQUE4VixLQUFBZ00sTUFBQSxJQUFrRUEsRUFBQWhNLEdBQUEsSUFBVyxJQUFBQSxLQUFBdEUsSUFBQXhSLGVBQUE4VixJQUFBMVgsRUFBQTBYLEtBQUF0RSxFQUFBc0UsS0FBQWdNLElBQ3JjQSxFQUFBLElBQUtBLEVBQUFoTSxHQUFBdEUsRUFBQXNFLFNBQWFnTSxJQUFBcmYsTUFBQSxJQUFBQSxFQUFBK0MsS0FBQWhILEVBQUFzakIsTUFBQXRRLE1BQW9DLDRCQUFBaFQsR0FBQWdULE1BQUFnNEIsWUFBQSxFQUFBcHJDLE1BQUFvckMsWUFBQSxRQUFBaDRCLEdBQUFwVCxJQUFBb1QsSUFBQS9PLEtBQUEsSUFBQStDLEtBQUFoSCxFQUFBLEdBQUFnVCxJQUFBLGFBQUFoVCxFQUFBSixJQUFBb1QsR0FBQSxpQkFBQUEsR0FBQSxpQkFBQUEsSUFBQS9PLEtBQUEsSUFBQStDLEtBQUFoSCxFQUFBLEdBQUFnVCxHQUFBLG1DQUFBaFQsR0FBQSw2QkFBQUEsSUFBQXNwQixFQUFBOW5CLGVBQUF4QixJQUFBLE1BQUFnVCxHQUFBdzNCLEdBQUEvbEMsRUFBQXpFLEdBQUFpRSxHQUFBckUsSUFBQW9ULElBQUEvTyxFQUFBLE1BQUFBLEtBQUEsSUFBQStDLEtBQUFoSCxFQUFBZ1QsSUFBK1ZzUSxJQUFBcmYsS0FBQSxJQUFBK0MsS0FBQSxRQUFBc2MsR0FBNkI3ZSxFQUFBUixHQUFJeUcsRUFBQXdpQyxZQUFBem9DLElBQUE0ekMsR0FBQTN0QyxLQUEyQit0QyxHQUFBLFNBQUF4MEMsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUFxQkQsSUFBQUMsR0FBQW80QyxHQUFBM3RDLElBQ3RlLElBQUFrdUMsR0FBQSxtQkFBQUMsZ0JBQUFuTixJQUErQyxTQUFBb04sR0FBQTcwQyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUEwSyxFQUFBckksT0FBQXBDLEVBQUF5SyxFQUFBMHRDLE1BQXlCLE9BQUFuNEMsR0FBQSxPQUFBRCxJQUFBQyxFQUFBdzBCLEdBQUF6MEIsSUFBOEIsT0FBQUEsR0FBQXcwQixHQUFBeDBCLEVBQUFvQyxNQUFxQnNJLElBQUE5SixNQUFVLE9BQUFxRCxHQUFBLElBQUFBLEVBQUF1SixLQUFBZ25CLEdBQUF2d0IsRUFBQTdCLE1BQWdDLElBQUk2TCxRQUFBOUMsTUFBQVQsR0FBaUIsTUFBQWpHLEdBQVMyVixXQUFBLFdBQXNCLE1BQUEzVixLQUFZLFNBQUFzMEMsR0FBQTkwQyxHQUFlLElBQUF5RyxFQUFBekcsRUFBQXlnQixJQUFZLFVBQUFoYSxFQUFBLHNCQUFBQSxFQUFBLElBQXlDQSxFQUFBLE1BQVEsTUFBQTFLLEdBQVNnNUMsR0FBQS8wQyxFQUFBakUsUUFBUTBLLEVBQUE0WixRQUFBLEtBQ25WLFNBQUEyMEIsR0FBQWgxQyxFQUFBeUcsRUFBQTFLLEdBQWdFLFdBQTdCQSxFQUFBLFFBQWhCQSxJQUFBa3RDLGFBQWdCbHRDLEVBQUFvdEMsV0FBQSxNQUE2QixDQUFhLElBQUFudEMsRUFBQUQsSUFBQThILEtBQWUsR0FBRyxJQUFBN0gsRUFBQXVOLElBQUF2SixLQUFBeXRDLEdBQUEsQ0FBbUIsSUFBQWp0QyxFQUFBeEUsRUFBQSt6QyxRQUFnQi96QyxFQUFBK3pDLGFBQUEsT0FBaUIsSUFBQXZ2QyxRQUFnQnhFLEVBQUF1TixJQUFBOUMsS0FBQWduQyxLQUFBanRDLEVBQUF4RSxFQUFBZ0IsT0FBQWhCLEVBQUErekMsUUFBQXZ2QyxLQUEyQ3hFLElBQUE2SCxXQUFTN0gsSUFBQUQsSUFHdk4sU0FBQWs1QyxHQUFBajFDLEdBQTZDLE9BQTlCLG1CQUFBMG9DLE9BQUExb0MsR0FBOEJBLEVBQUF1SixLQUFjLG1DQUFBOUMsRUFBQXpHLEVBQUFpcEMsWUFBbUQsVUFBQXhpQyxHQUFBLFFBQUFBLElBQUEwaUMsWUFBQSxDQUF3QyxJQUFBcHRDLEVBQUEwSyxJQUFBNUMsS0FBZSxHQUFHLElBQUE3SCxFQUFBRCxFQUFBZzBDLFFBQWdCLFlBQUEvekMsRUFBQSxDQUFlLElBQUF3RSxFQUFBUixFQUFRLElBQUloRSxJQUFJLE1BQUFxRSxHQUFTMDBDLEdBQUF2MEMsRUFBQUgsSUFBU3RFLElBQUE4SCxXQUFTOUgsSUFBQTBLLEdBQWEsTUFBTSxPQUEyQixHQUEzQnF1QyxHQUFBOTBDLEdBQTJCLG1CQUFkeUcsRUFBQXpHLEVBQUEybUIsV0FBY3V1QixxQkFBQSxJQUFrRHp1QyxFQUFBa1osTUFBQTNmLEVBQUFrcEMsY0FBQXppQyxFQUFBOUIsTUFBQTNFLEVBQUFncEMsY0FBQXZpQyxFQUFBeXVDLHVCQUF5RSxNQUFBNzBDLEdBQVMwMEMsR0FBQS8wQyxFQUFBSyxHQUFRLE1BQU0sT0FBQXkwQyxHQUFBOTBDLEdBQWEsTUFBTSxPQUFBbTFDLEdBQUFuMUMsSUFDcmMsU0FBQW8xQyxHQUFBcDFDLEdBQWUsV0FBQUEsRUFBQXVKLEtBQUEsSUFBQXZKLEVBQUF1SixLQUFBLElBQUF2SixFQUFBdUosSUFDZixTQUFBOHJDLEdBQUFyMUMsR0FBZUEsRUFBQSxDQUFHLFFBQUF5RyxFQUFBekcsRUFBQXNuQixPQUFtQixPQUFBN2dCLEdBQVMsQ0FBRSxHQUFBMnVDLEdBQUEzdUMsR0FBQSxDQUFVLElBQUExSyxFQUFBMEssRUFBUSxNQUFBekcsRUFBUXlHLElBQUE2Z0IsT0FBV3ZJLEVBQUEsT0FBU2hqQixPQUFBLEVBQVMsSUFBQUMsRUFBQXlLLE9BQUEsRUFBZSxPQUFBMUssRUFBQXdOLEtBQWMsT0FBQTlDLEVBQUExSyxFQUFBNHFCLFVBQXFCM3FCLEdBQUEsRUFBSyxNQUFNLE9BQThDLE9BQUF5SyxFQUFBMUssRUFBQTRxQixVQUFBd1csY0FBbUNuaEMsR0FBQSxFQUFLLE1BQU0sUUFBQStpQixFQUFBLE9BQWlCLEdBQUFoakIsRUFBQXM3QixZQUFBZ0wsR0FBQTU3QixFQUFBLElBQUExSyxFQUFBczdCLFlBQUEsSUFBNENyM0IsRUFBQXlHLEVBQUEsSUFBQTFLLEVBQUFpRSxJQUFhLENBQUUsS0FBSyxPQUFBakUsRUFBQTA3QixTQUFpQixDQUFFLFVBQUExN0IsRUFBQXVyQixRQUFBOHRCLEdBQUFyNUMsRUFBQXVyQixRQUFBLENBQWtDdnJCLEVBQUEsS0FBTyxNQUFBaUUsRUFBUWpFLElBQUF1ckIsT0FBcUMsSUFBMUJ2ckIsRUFBQTA3QixRQUFBblEsT0FBQXZyQixFQUFBdXJCLE9BQTBCdnJCLElBQUEwN0IsUUFBZ0IsSUFBQTE3QixFQUFBd04sS0FBQSxJQUFBeE4sRUFBQXdOLEtBQUEsS0FBQXhOLEVBQUF3TixLQUFpQyxDQUFFLEdBQzdlLEVBRDZleE4sRUFBQXM3QixVQUM3ZSxTQUFBNXdCLEVBQWEsVUFBQTFLLEVBQUF5N0IsT0FBQSxJQUFBejdCLEVBQUF3TixJQUFBLFNBQUE5QyxFQUF3QzFLLEVBQUF5N0IsTUFBQWxRLE9BQUF2ckIsTUFBQXk3QixNQUFnQyxPQUFBejdCLEVBQUFzN0IsV0FBQSxDQUFxQnQ3QixJQUFBNHFCLFVBQWMsTUFBQTNtQixHQUFTLFFBQUFRLEVBQUFSLElBQWEsQ0FBRSxPQUFBUSxFQUFBK0ksS0FBQSxJQUFBL0ksRUFBQStJLElBQUEsR0FBQXhOLEVBQUEsR0FBQUMsRUFBQSxDQUFtQyxJQUFBcUUsRUFBQW9HLEVBQUE0TSxFQUFBN1MsRUFBQW1tQixVQUFBdEgsRUFBQXRqQixFQUEwQixJQUFBc0UsRUFBQXV1QixTQUFBdnVCLEVBQUFzYixXQUFBSixhQUFBbEksRUFBQWdNLEdBQUFoZixFQUFBa2IsYUFBQWxJLEVBQUFnTSxRQUFrRTVZLEVBQUE4VSxhQUFBL2EsRUFBQW1tQixVQUFBNXFCLFFBQW1DQyxHQUFBcVgsRUFBQTVNLEVBQUE0WSxFQUFBN2UsRUFBQW1tQixVQUFBLElBQUF0VCxFQUFBdWIsVUFBQXZ1QixFQUFBZ1QsRUFBQXNJLFlBQUFKLGFBQUE4RCxFQUFBaE0sSUFBQWhULEVBQUFnVCxHQUFBdEQsWUFBQXNQLEdBQUEsT0FBQWhNLElBQUFpaUMsc0JBQUEsT0FBQWoxQyxFQUFBcTBDLFVBQUFyMEMsRUFBQXEwQyxRQUFBak8sS0FBQWhnQyxFQUFBc0osWUFBQXZQLEVBQUFtbUIsZ0JBQ2xULE9BQUFubUIsRUFBQStJLEtBQUEsT0FBQS9JLEVBQUFnM0IsTUFBQSxDQUFtQ2gzQixFQUFBZzNCLE1BQUFsUSxPQUFBOW1CLEVBQWlCQSxJQUFBZzNCLE1BQVUsU0FBUyxHQUFBaDNCLElBQUFSLEVBQUEsTUFBZSxLQUFLLE9BQUFRLEVBQUFpM0IsU0FBaUIsQ0FBRSxVQUFBajNCLEVBQUE4bUIsUUFBQTltQixFQUFBOG1CLFNBQUF0bkIsRUFBQSxPQUF3Q1EsSUFBQThtQixPQUFXOW1CLEVBQUFpM0IsUUFBQW5RLE9BQUE5bUIsRUFBQThtQixPQUEwQjltQixJQUFBaTNCLFNBQzNMLFNBQUEwZCxHQUFBbjFDLEdBQWUsUUFBQXlHLEVBQUF6RyxFQUFBakUsR0FBQSxFQUFBQyxPQUFBLEVBQUF3RSxPQUFBLElBQW9DLENBQUUsSUFBQXpFLEVBQUEsQ0FBT0EsRUFBQTBLLEVBQUE2Z0IsT0FBV3RuQixFQUFBLE9BQVEsQ0FBMkIsT0FBekIsT0FBQWpFLEdBQUFnakIsRUFBQSxPQUF5QmhqQixFQUFBd04sS0FBYyxPQUFBdk4sRUFBQUQsRUFBQTRxQixVQUFxQm5tQixHQUFBLEVBQUssTUFBQVIsRUFBUSxPQUFnRCxPQUFBaEUsRUFBQUQsRUFBQTRxQixVQUFBd1csY0FBbUMzOEIsR0FBQSxFQUFLLE1BQUFSLEVBQVFqRSxJQUFBdXJCLE9BQVd2ckIsR0FBQSxFQUFLLE9BQUEwSyxFQUFBOEMsS0FBQSxJQUFBOUMsRUFBQThDLElBQUEsQ0FBeUJ2SixFQUFBLFFBQUFLLEVBQUFvRyxFQUFBNE0sRUFBQWhULElBQW1CLEdBQUE0MEMsR0FBQTVoQyxHQUFBLE9BQUFBLEVBQUFta0IsT0FBQSxJQUFBbmtCLEVBQUE5SixJQUFBOEosRUFBQW1rQixNQUFBbFEsT0FBQWpVLE1BQUFta0IsVUFBK0QsQ0FBSyxHQUFBbmtCLElBQUFoVCxFQUFBLE1BQWUsS0FBSyxPQUFBZ1QsRUFBQW9rQixTQUFpQixDQUFFLFVBQUFwa0IsRUFBQWlVLFFBQUFqVSxFQUFBaVUsU0FBQWpuQixFQUFBLE1BQUFMLEVBQXlDcVQsSUFBQWlVLE9BQVdqVSxFQUFBb2tCLFFBQUFuUSxPQUFBalUsRUFBQWlVLE9BQTBCalUsSUFBQW9rQixRQUFZajNCLEdBQzNmSCxFQUFBckUsRUFBQXFYLEVBQUE1TSxFQUFBa2dCLFVBQUEsSUFBQXRtQixFQUFBdXVCLFNBQUF2dUIsRUFBQXNiLFdBQUF6RixZQUFBN0MsR0FBQWhULEVBQUE2VixZQUFBN0MsSUFBQXJYLEVBQUFrYSxZQUFBelAsRUFBQWtnQixnQkFBMkcsT0FBQWxnQixFQUFBOEMsS0FBbUIsVUFBQTlDLEVBQUErd0IsTUFBQSxDQUFtQng3QixFQUFBeUssRUFBQWtnQixVQUFBd1csY0FBNEIzOEIsR0FBQSxFQUFLaUcsRUFBQSt3QixNQUFBbFEsT0FBQTdnQixFQUFpQkEsSUFBQSt3QixNQUFVLGVBQVUsR0FBQXlkLEdBQUF4dUMsR0FBQSxPQUFBQSxFQUFBK3dCLE1BQUEsQ0FBOEIvd0IsRUFBQSt3QixNQUFBbFEsT0FBQTdnQixFQUFpQkEsSUFBQSt3QixNQUFVLFNBQVMsR0FBQS93QixJQUFBekcsRUFBQSxNQUFlLEtBQUssT0FBQXlHLEVBQUFneEIsU0FBaUIsQ0FBRSxVQUFBaHhCLEVBQUE2Z0IsUUFBQTdnQixFQUFBNmdCLFNBQUF0bkIsRUFBQSxPQUFtRCxLQUFYeUcsSUFBQTZnQixRQUFXL2QsTUFBQXhOLEdBQUEsR0FBa0IwSyxFQUFBZ3hCLFFBQUFuUSxPQUFBN2dCLEVBQUE2Z0IsT0FBMEI3Z0IsSUFBQWd4QixTQUMvWixTQUFBOGQsR0FBQXYxQyxFQUFBeUcsR0FBaUIsT0FBQUEsRUFBQThDLEtBQWMsK0JBQUF5ckMsR0FBQXJILEdBQUFDLEdBQUFubkMsR0FBMkMsTUFBTSxhQUFhLFdBQUExSyxFQUFBMEssRUFBQWtnQixVQUF5QixTQUFBNXFCLEVBQUEsQ0FBWSxJQUFBQyxFQUFBeUssRUFBQXlpQyxjQUFzQmxwQyxFQUFBLE9BQUFBLElBQUFrcEMsY0FBQWx0QyxFQUE2QixJQUFBd0UsRUFBQWlHLEVBQUF0SSxLQUFBa0MsRUFBQW9HLEVBQUF3aUMsWUFBNkJ4aUMsRUFBQXdpQyxZQUFBLEtBQW1CLE9BQUE1b0MsR0FqR3JPLFNBQUFMLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQXVCUixFQUFBZ25CLEdBQUF4bUIsRUFBUSxVQUFBekUsR0FBQSxVQUFBeUUsRUFBQXJDLE1BQUEsTUFBQXFDLEVBQUF2RSxNQUFBczJCLEdBQUF2eUIsRUFBQVEsR0FBcUQyWCxHQUFBcGMsRUFBQUMsR0FBUUEsRUFBQW1jLEdBQUFwYyxFQUFBeUUsR0FBVSxRQUFBSCxFQUFBLEVBQVlBLEVBQUFvRyxFQUFBbkQsT0FBV2pELEdBQUEsR0FBTSxJQUFBZ1QsRUFBQTVNLEVBQUFwRyxHQUFBZ2YsRUFBQTVZLEVBQUFwRyxFQUFBLEdBQW9CLFVBQUFnVCxFQUFBaXlCLEdBQUF0bEMsRUFBQXFmLEdBQUEsNEJBQUFoTSxFQUFBMnVCLEdBQUFoaUMsRUFBQXFmLEdBQUEsYUFBQWhNLEVBQUFndkIsR0FBQXJpQyxFQUFBcWYsR0FBQW1TLEdBQUF4eEIsRUFBQXFULEVBQUFnTSxFQUFBcmpCLEdBQTZGLE9BQUFELEdBQVUsWUFBQXkyQixHQUFBeHlCLEVBQUFRLEdBQXFCLE1BQU0sZUFBQTJnQyxHQUFBbmhDLEVBQUFRLEdBQXdCLE1BQU0sYUFBQWlHLEVBQUF6RyxFQUFBa3lCLGNBQUFzakIsWUFBQXgxQyxFQUFBa3lCLGNBQUFzakIsY0FBQWgxQyxFQUFBaTFDLFNBQUEsT0FBQTE1QyxFQUFBeUUsRUFBQTdELE9BQUFra0MsR0FBQTdnQyxJQUFBUSxFQUFBaTFDLFNBQUExNUMsR0FBQSxHQUFBMEssTUFBQWpHLEVBQUFpMUMsV0FBQSxNQUFBajFDLEVBQUF5eEIsYUFBQTRPLEdBQUE3Z0MsSUFBQVEsRUFBQWkxQyxTQUFBajFDLEVBQUF5eEIsY0FDdlQsR0FBQTRPLEdBQUE3Z0MsSUFBQVEsRUFBQWkxQyxTQUFBajFDLEVBQUFpMUMsU0FBQSxZQWdHcU9DLENBQUEzNUMsRUFBQXNFLEVBQUFHLEVBQUFSLEVBQUFoRSxHQUEwQixNQUFNLGNBQUF5SyxFQUFBa2dCLFdBQUE1SCxFQUFBLE9BQTBDdFksRUFBQWtnQixVQUFBNGIsVUFBQTk3QixFQUFBeWlDLGNBQXNDLE1BQU0sT0FBYSxjQUFjLFFBQ3hXLEdBRHdXbnRDLEVBQUEwSyxFQUFBdWlDLGNBQTBCaHRDLE9BQUEsRUFBU2dFLEVBQUF5RyxFQUFJLE9BQUExSyxFQUFBQyxHQUFBLEdBQUFBLEdBQUEsRUFBQWdFLEVBQUF5RyxFQUFBK3dCLE1BQUEsSUFBQXo3QixFQUFBazJDLGFBQUFsMkMsRUFBQWsyQyxXQUFBaEgsT0FBcUUsT0FBQWpyQyxHQVRsZSxTQUFBQSxFQUFBeUcsR0FBaUIsUUFBQTFLLEVBQUFpRSxJQUFhLENBQUUsT0FBQWpFLEVBQUF3TixJQUFBLENBQWMsSUFBQXZOLEVBQUFELEVBQUE0cUIsVUFBa0IsR0FBQWxnQixFQUFBekssRUFBQTZULE1BQUFDLFFBQUEsV0FBNEIsQ0FBSzlULEVBQUFELEVBQUE0cUIsVUFBYyxJQUFBbm1CLEVBQUF6RSxFQUFBbXRDLGNBQUFyNUIsTUFBNEJyUCxFQUFBLE1BQUFBLEtBQUFqRCxlQUFBLFdBQUFpRCxFQUFBc1AsUUFBQSxLQUFtRTlULEVBQUE2VCxNQUFBQyxRQUFBczFCLEdBQUEsVUFBQTVrQyxTQUFpQyxPQUFBekUsRUFBQXdOLElBQUF4TixFQUFBNHFCLFVBQUE0YixVQUFBOTdCLEVBQUEsR0FBQTFLLEVBQUFtdEMsa0JBQTZELFNBQUFudEMsRUFBQXdOLEtBQUEsT0FBQXhOLEVBQUFpdEMsY0FBQSxFQUE0Q2h0QyxFQUFBRCxFQUFBeTdCLE1BQUFDLFNBQWtCblEsT0FBQXZyQixFQUFXQSxFQUFBQyxFQUFJLFNBQVMsVUFBQUQsRUFBQXk3QixNQUFBLENBQXdCejdCLEVBQUF5N0IsTUFBQWxRLE9BQUF2ckIsRUFBaUJBLElBQUF5N0IsTUFBVSxVQUFTLEdBQUF6N0IsSUFBQWlFLEVBQUEsTUFBZSxLQUFLLE9BQUFqRSxFQUFBMDdCLFNBQWlCLENBQUUsVUFBQTE3QixFQUFBdXJCLFFBQ3JldnJCLEVBQUF1ckIsU0FBQXRuQixFQUFBLE9BQW9CakUsSUFBQXVyQixPQUFXdnJCLEVBQUEwN0IsUUFBQW5RLE9BQUF2ckIsRUFBQXVyQixPQUEwQnZyQixJQUFBMDdCLFNBUXlha2UsQ0FBQTMxQyxFQUFBaEUsR0FDcGQsUUFEc2VELEVBQ3BmMEssRUFBQXdpQyxhQUFjLENBQWF4aUMsRUFBQXdpQyxZQUFBLEtBQW1CLElBQUE1MUIsRUFBQTVNLEVBQUFrZ0IsVUFBa0IsT0FBQXRULE1BQUE1TSxFQUFBa2dCLFVBQUEsSUFBQWd1QixJQUFpQzU0QyxFQUFBMEksUUFBQSxTQUFBekUsR0FBc0IsSUFBQWpFLEVBK0I4TCxTQUFBaUUsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBaUUsRUFBQTJtQixVQUFrQixPQUFBNXFCLEtBQUE4d0MsT0FBQXBtQyxHQUE2QkEsRUFBQTBrQyxHQUFQMWtDLEVBQUF3a0MsS0FBT2pyQyxHQUFvQixRQUFWQSxFQUFBNDFDLEdBQUE1MUMsRUFBQXlHLE1BQVV3akMsR0FBQWpxQyxFQUFBeUcsR0FBQSxLQUFBQSxFQUFBekcsRUFBQXVwQyxpQkFBQXNNLEdBQUE3MUMsRUFBQXlHLEtBL0JsUnZKLEtBQUEsS0FBQXVKLEVBQUF6RyxHQUF3QnFULEVBQUExTCxJQUFBM0gsS0FBQXFULEVBQUF5aUMsSUFBQTkxQyxLQUFBcXlDLEtBQUF0MkMsUUFBbUMsTUFBTSxjQUFjLFFBQUFnakIsRUFBQSxRQUFrQixJQUFBZzNCLEdBQUEsbUJBQUFDLGdCQUFBcEosSUFBK0MsU0FBQXFKLEdBQUFqMkMsRUFBQXlHLEVBQUExSyxJQUFtQkEsRUFBQW12QyxHQUFBbnZDLElBQVF3TixJQUFBNHBDLEdBQVNwM0MsRUFBQXF2QyxRQUFBLENBQVd6TCxRQUFBLE1BQWMsSUFBQTNqQyxFQUFBeUssRUFBQTlKLE1BQW1ELE9BQXJDWixFQUFBc3ZDLFNBQUEsV0FBc0I2SyxHQUFBbDZDLEdBQU02NEMsR0FBQTcwQyxFQUFBeUcsSUFBUzFLLEVBQ3ZYLFNBQUFvNkMsR0FBQW4yQyxFQUFBeUcsRUFBQTFLLElBQW1CQSxFQUFBbXZDLEdBQUFudkMsSUFBUXdOLElBQUE0cEMsR0FBUyxJQUFBbjNDLEVBQUFnRSxFQUFBN0IsS0FBQTRTLHlCQUFzQyxzQkFBQS9VLEVBQUEsQ0FBMEIsSUFBQXdFLEVBQUFpRyxFQUFBOUosTUFBY1osRUFBQXF2QyxRQUFBLFdBQXFCLE9BQUFwdkMsRUFBQXdFLElBQWEsSUFBQUgsRUFBQUwsRUFBQTJtQixVQUEwUCxPQUF4TyxPQUFBdG1CLEdBQUEsbUJBQUFBLEVBQUErMUMsb0JBQUFyNkMsRUFBQXN2QyxTQUFBLFdBQTBFLG1CQUFBcnZDLElBQUEsT0FBQXE2QyxNQUFBLElBQUE1TyxJQUFBLENBQUExakMsT0FBQXN5QyxHQUFBUCxJQUFBL3hDLE9BQW1FLElBQUFoSSxFQUFBMEssRUFBQTlKLE1BQUE2RCxFQUFBaUcsRUFBQTB0QyxNQUF3QlUsR0FBQTcwQyxFQUFBeUcsR0FBUTFDLEtBQUFxeUMsa0JBQUFyNkMsRUFBQSxDQUEwQnU2QyxlQUFBLE9BQUE5MUMsSUFBQSxPQUFpQ3pFLEVBQzlZLFNBQUF3NkMsR0FBQXYyQyxHQUFlLE9BQUFBLEVBQUF1SixLQUFjLE9BQUErVyxHQUFBdGdCLEVBQUE3QixPQUFBOHBDLEtBQXdCLElBQUF4aEMsRUFBQXpHLEVBQUFxM0IsVUFBa0IsWUFBQTV3QixHQUFBekcsRUFBQXEzQixXQUFBLEtBQUE1d0IsRUFBQSxHQUFBekcsR0FBQSxLQUE4QyxjQUFBc3RDLEtBQUFwRixLQUFBLFFBQUF6aEMsRUFBQXpHLEVBQUFxM0IsYUFBQXRZLEVBQUEsT0FBQS9lLEVBQUFxM0IsV0FBQSxLQUFBNXdCLEVBQUEsR0FBQXpHLEVBQTRGLGNBQUF3dEMsR0FBQXh0QyxHQUFBLEtBQXlCLHFCQUFBeUcsRUFBQXpHLEVBQUFxM0IsWUFBQXIzQixFQUFBcTNCLFdBQUEsS0FBQTV3QixFQUFBLEdBQUF6RyxHQUFBLEtBQW9FLG9CQUFvQixjQUFBc3RDLEtBQUEsS0FBeUIsZUFBQTJGLEdBQUFqekMsR0FBQSxLQUEwQixxQkFDclgsSUFBQXcyQyxHQUFBam5CLEdBQUFwTCx1QkFBQXN5QixHQUFBbG5CLEdBQUFuTCxrQkFBQXN5QixHQUFBLFdBQUFDLElBQUEsRUFBQWp0QyxHQUFBLEtBQUFrdEMsR0FBQSxLQUFBdDNDLEdBQUEsRUFBQXUzQyxJQUFBLEVBQUFDLElBQUEsRUFBQXAxQixHQUFBLEtBQUFxMUIsSUFBQSxFQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBYixHQUFBLEtBQXlKLFNBQUFjLEtBQWMsVUFBQXp0QyxHQUFBLFFBQUExSixFQUFBMEosR0FBQTRkLE9BQStCLE9BQUF0bkIsR0FBUyxDQUFFLElBQUF5RyxFQUFBekcsRUFBUSxPQUFBeUcsRUFBQThDLEtBQWMsV0FBQXhOLEVBQUEwSyxFQUFBdEksS0FBQXNTLGtCQUFzQyxNQUFBMVUsR0FBQWtzQyxLQUE0QixNQUFNLE9BQUFxRixLQUFhcEYsS0FBTSxNQUFNLE9BQUFzRixHQUFBL21DLEdBQWEsTUFBTSxPQUFBNm1DLEtBQWEsTUFBTSxRQUFBMkYsR0FBQXhzQyxHQUFjekcsSUFBQXNuQixPQUFXc3ZCLEdBQUEsS0FBUXQzQyxHQUFBLEVBQUl1M0MsSUFBQSxFQUFNQyxJQUFBLEVBQU1wdEMsR0FBQSxLQUMvWixTQUFBMHRDLEtBQWMsS0FBSyxPQUFBMTFCLElBQVMsQ0FBRSxJQUFBMWhCLEVBQUEwaEIsR0FBQTJWLFVBQTJDLEdBQXpCLEdBQUFyM0IsR0FBQXFpQyxHQUFBM2dCLEdBQUFpRixVQUFBLElBQXlCLElBQUEzbUIsRUFBQSxDQUFVLElBQUF5RyxFQUFBaWIsR0FBQXNWLFVBQWtCLE9BQUF2d0IsSUFBQSxRQUFBQSxJQUFBZ2EsT0FBQSxtQkFBQWhhLElBQUEsTUFBQUEsRUFBQTRaLFFBQUEsT0FBNkUsVUFBQXJnQixHQUFhLE9BQUFxMUMsR0FBQTN6QixJQUFhQSxHQUFBMlYsWUFBQSxFQUFnQixNQUFNLE9BQUFnZSxHQUFBM3pCLElBQWFBLEdBQUEyVixZQUFBLEVBQWdCa2UsR0FBQTd6QixHQUFBc1YsVUFBQXRWLElBQWtCLE1BQU0sT0FBQTZ6QixHQUFBN3pCLEdBQUFzVixVQUFBdFYsSUFBeUIsTUFBTSxPQUFBeXpCLEdBQUFuMUMsRUFBQTBoQixJQUFBMWhCLEVBQUFzbkIsT0FBQSxLQUFBdG5CLEVBQUF3M0IsTUFBQSxLQUFBeDNCLEVBQUFncEMsY0FBQSxLQUFBaHBDLEVBQUFpcEMsWUFBQSxhQUFBanBDLElBQUFnM0IsYUFBQWgzQixFQUFBc25CLE9BQUEsS0FBQXRuQixFQUFBdzNCLE1BQUEsS0FBQXgzQixFQUFBZ3BDLGNBQUEsS0FBQWhwQyxFQUFBaXBDLFlBQUEsTUFBaUx2bkIsTUFBQTJuQixZQUN2ZSxTQUFBZ08sS0FBYyxLQUFLLE9BQUEzMUIsSUFBUyxDQUFFLE9BQUFBLEdBQUEyVixVQUFBcjNCLEVBQUEsQ0FBc0IsSUFBQUEsRUFBQTBoQixHQUFBc1YsVUFBQXZ3QixFQUFBaWIsR0FBc0IsT0FBQWpiLEVBQUE4QyxLQUFjLHVCQUFBeXJDLEdBQUF0SCxHQUFBRCxHQUFBaG5DLEdBQW1DLE1BQUF6RyxFQUFRLGNBQUF5RyxFQUFBNHdCLFdBQUEsT0FBQXIzQixFQUFBLENBQXFDLElBQUFqRSxFQUFBaUUsRUFBQWtwQyxjQUFBbHRDLEVBQUFnRSxFQUFBZ3BDLGNBQXNEdmlDLEdBQWR6RyxFQUFBeUcsRUFBQWtnQixXQUFjd2xCLHdCQUFBMWxDLEVBQUFvaUMsY0FBQXBpQyxFQUFBdEksS0FBQXBDLEVBQUF5a0IsR0FBQS9aLEVBQUF0SSxLQUFBcEMsR0FBQUMsR0FBb0VnRSxFQUFBczNDLG9DQUFBN3dDLEVBQXdDLE1BQUF6RyxFQUFRLDBDQUFBQSxFQUE0QyxRQUFBK2UsRUFBQSxRQUFrQjJDLE1BQUEybkIsWUFDaFosU0FBQWtPLEdBQUF2M0MsRUFBQXlHLEdBQWlCLEtBQUssT0FBQWliLElBQVMsQ0FBRSxJQUFBM2xCLEVBQUEybEIsR0FBQTJWLFVBQWtCLE1BQUF0N0IsRUFBQSxDQUFTLElBQUFDLEVBQUEwbEIsR0FBQXNWLFVBQUF4MkIsRUFBQWtoQixHQUFBcmhCLEVBQUFvRyxFQUEwQixPQUFBakcsRUFBQStJLEtBQWMsdUJBQUF5ckMsR0FBQW5ILEdBQUFDLEdBQUF0dEMsR0FBbUMsTUFBTSxXQUFBNlMsRUFBQTdTLEVBQUFtbUIsVUFBeUIsS0FBQW5tQixFQUFBNjJCLFVBQUEsVUFBQXI3QixFQUFBcVgsRUFBQWk1Qix3QkFBbUQsQ0FBSyxJQUFBanRCLEVBQUE3ZSxFQUFBcW9DLGNBQUFyb0MsRUFBQXJDLEtBQUFuQyxFQUFBa3RDLGNBQUExb0IsR0FBQWhnQixFQUFBckMsS0FBQW5DLEVBQUFrdEMsZUFBdUU3MUIsRUFBQXUrQixtQkFBQXZ5QixFQUFBcmpCLEVBQUFndEMsY0FBQTMxQixFQUFBaWtDLHFDQUE4RixRQUFoQnQ3QyxFQUFBd0UsRUFBQXlvQyxjQUFnQitLLEdBQUF4ekMsRUFBQXhFLEVBQUFxWCxHQUFzQixNQUFNLE9BQXVCLFdBQXZCclgsRUFBQXdFLEVBQUF5b0MsYUFBdUIsQ0FBb0IsR0FBUDUxQixFQUFBLEtBQU8sT0FBQTdTLEVBQUFnM0IsTUFBQSxPQUFBaDNCLEVBQUFnM0IsTUFBQWp1QixLQUFzQyxPQUFBOEosRUFDaGY3UyxFQUFBZzNCLE1BQUE3USxVQUFrQixNQUFNLE9BQUF0VCxFQUFBN1MsRUFBQWczQixNQUFBN1EsVUFBMkJxdEIsR0FBQXh6QyxFQUFBeEUsRUFBQXFYLEdBQVksTUFBTSxPQUFBaFQsRUFBQUcsRUFBQW1tQixVQUFxQixPQUFBM3FCLEdBQUEsRUFBQXdFLEVBQUE2MkIsV0FBQXVQLEdBQUFwbUMsRUFBQXJDLEtBQUFxQyxFQUFBMG9DLGdCQUFBN29DLEVBQUEyL0IsUUFBK0QsTUFBTSxPQUFhLE9BQWEsUUFBYyxRQUFjLGNBQWMsUUFBQWpoQixFQUFBLFFBQWtCLElBQUFoakIsSUFBQSxRQUFBeUUsRUFBQWtoQixHQUFBakIsT0FBQXBnQixFQUFBcWhCLEdBQUFpRixVQUFBLG1CQUFBbm1CLElBQUFILEdBQUFHLEVBQUE2ZixRQUFBaGdCLElBQWtGLElBQUF0RSxJQUFBaTdDLEdBQUFoM0MsR0FBYzBoQixNQUFBMm5CLFlBQ2xHLFNBQUFpQyxLQUFjLE9BQUEyTCxJQUFBNVAsR0FBQTRQLElBQWtCLE9BQUFDLFNBQ25SLFNBQUFNLEdBQUF4M0MsRUFBQXlHLEdBQWlCc3dDLEdBQUFKLElBQUEsRUFBUzMyQyxFQUFBcWdCLFVBQUE1WixHQUFBc1ksRUFBQSxPQUE4QixJQUFBaGpCLEVBQUFpRSxFQUFBeTNDLDRCQUFvQyxJQUFBMTdDLEdBQUFnakIsRUFBQSxPQUFzQi9lLEVBQUF5M0MsNEJBQUEsRUFBZ0MsSUFBQXo3QyxFQUFBeUssRUFBQThpQyxlQUFBL29DLEVBQUFpRyxFQUFBNmlDLG9CQUE0TSxJQTlGOVYsU0FBQXRwQyxFQUFBeUcsR0FBK0IsR0FBZHpHLEVBQUFrcUMsVUFBQSxFQUFjLElBQUF6akMsRUFBQXpHLEVBQUFtcUMsb0JBQUEsRUFBQW5xQyxFQUFBb3FDLGtCQUFBLEVBQUFwcUMsRUFBQXdxQyxzQkFBQSxFQUFBeHFDLEVBQUF5cUMsb0JBQUEsRUFBQXpxQyxFQUFBdXFDLGlCQUFBLE1BQThILENBQUs5akMsRUFBQXpHLEVBQUF1cUMsbUJBQUF2cUMsRUFBQXVxQyxpQkFBQSxHQUE2QyxJQUFBeHVDLEVBQUFpRSxFQUFBb3FDLGtCQUEwQixJQUFBcnVDLE1BQUEwSyxFQUFBekcsRUFBQW1xQyxvQkFBQW5xQyxFQUFBb3FDLGtCQUFBLEVBQUFwcUMsRUFBQW1xQyxvQkFBQTFqQyxJQUFBekcsRUFBQW1xQyxvQkFBQW5xQyxFQUFBb3FDLG9CQUF3SixLQUExQnJ1QyxFQUFBaUUsRUFBQXdxQyx1QkFBMEJQLEdBQUFqcUMsRUFBQXlHLEtBQUF6RyxFQUFBeXFDLHFCQUFBenFDLEVBQUF3cUMsc0JBQUEsRUFBQXhxQyxFQUFBeXFDLG9CQUFBLEVBQUF6cUMsRUFBQXVxQyxpQkFBQSxFQUFBTixHQUFBanFDLEVBQUF5RyxJQUNqWUEsRUFBQTFLLEdBQUFrdUMsR0FBQWpxQyxFQUFBeUcsR0FBYTRqQyxHQUFBLEVBQUFycUMsR0E2Rm9MMDNDLENBQUExM0MsRUFBQVEsRUFBQXhFLEVBQUF3RSxFQUFBeEUsR0FBY3k2QyxHQUFBcDJCLFFBQUEsS0FBZ0Jya0IsT0FBQSxFQUFTLEVBQUF5SyxFQUFBNHdCLFVBQUEsT0FBQTV3QixFQUFBMGlDLFlBQUExaUMsRUFBQTBpQyxXQUFBRSxXQUFBNWlDLEVBQUF6SyxFQUFBeUssRUFBQTJpQyxhQUFBcHRDLEVBQUF5SyxFQUFBekssRUFBQXlLLEVBQUEyaUMsWUFBa0cxQyxHQUFBckosR0FBTXNKLEdBakloVixXQUFjLElBQUEzbUMsRUFBQW0rQixLQUFXLEdBQUFDLEdBQUFwK0IsR0FBQSxDQUFVLHNCQUFBQSxFQUFBLElBQUF5RyxFQUFBLENBQStCbTRCLE1BQUE1K0IsRUFBQTgrQixlQUFBRCxJQUFBNytCLEVBQUErK0IsbUJBQTJDLytCLEVBQUEsQ0FBcUQsSUFBQWpFLEdBQTdDMEssS0FBQXpHLEVBQUEyeUIsZ0JBQUFsc0IsRUFBQXF3QixhQUFBcjNCLFFBQTZDdS9CLGNBQUF2NEIsRUFBQXU0QixlQUF1QyxHQUFBampDLEdBQUEsSUFBQUEsRUFBQWtqQyxXQUFBLENBQXdCeDRCLEVBQUExSyxFQUFBbWpDLFdBQWUsSUFBQWxqQyxFQUFBRCxFQUFBb2pDLGFBQUEzK0IsRUFBQXpFLEVBQUFxakMsVUFBbUNyakMsSUFBQXNqQyxZQUFnQixJQUFJNTRCLEVBQUFtb0IsU0FBQXB1QixFQUFBb3VCLFNBQXNCLE1BQUF4UCxHQUFTM1ksRUFBQSxLQUFPLE1BQUF6RyxFQUFRLElBQUFLLEVBQUEsRUFBQWdULEdBQUEsRUFBQWdNLEdBQUEsRUFBQTFqQixFQUFBLEVBQUFvVCxFQUFBLEVBQUFqVCxFQUFBa0UsRUFBQXhDLEVBQUEsS0FBcUNpSixFQUFBLE9BQVEsQ0FBRSxRQUFBN0osRUFBYWQsSUFBQTJLLEdBQUEsSUFBQXpLLEdBQUEsSUFBQUYsRUFBQTh5QixXQUFBdmIsRUFBQWhULEVBQUFyRSxHQUFzQ0YsSUFBQTBFLEdBQUEsSUFBQXpFLEdBQUEsSUFBQUQsRUFBQTh5QixXQUFBdlAsRUFBQWhmLEVBQUF0RSxHQUFzQyxJQUFBRCxFQUFBOHlCLFdBQUF2dUIsR0FBQXZFLEVBQUF5bUMsVUFBQWovQixRQUM3ZCxRQUFBMUcsRUFBQWQsRUFBQTBmLGFBQWlDaGUsRUFBQTFCLEVBQUlBLEVBQUFjLEVBQUksT0FBTSxDQUFFLEdBQUFkLElBQUFrRSxFQUFBLE1BQUF5RyxFQUE2RCxHQUE1Q2pKLElBQUFpSixLQUFBOUssSUFBQUssSUFBQXFYLEVBQUFoVCxHQUFzQjdDLElBQUFnRCxLQUFBdU8sSUFBQWhULElBQUFzakIsRUFBQWhmLEdBQXNCLFFBQUF6RCxFQUFBZCxFQUFBd2YsYUFBQSxNQUFzQzlkLEdBQUoxQixFQUFBMEIsR0FBSW1lLFdBQWU3ZixFQUFBYyxFQUFJNkosR0FBQSxJQUFBNE0sSUFBQSxJQUFBZ00sRUFBQSxNQUF1QnVmLE1BQUF2ckIsRUFBQXdyQixJQUFBeGYsUUFBZTVZLEVBQUEsS0FBWUEsS0FBQSxDQUFNbTRCLE1BQUEsRUFBQUMsSUFBQSxRQUFlcDRCLEVBQUEsS0FBWSxPQUFPODNCLFlBQUF2K0IsRUFBQXcrQixlQUFBLzNCLEdBZ0krRWt4QyxHQUFRdGEsSUFBQSxFQUFNM2IsR0FBQTFsQixFQUFRLE9BQUEwbEIsSUFBUyxDQUFFbGhCLEdBQUEsRUFBSyxJQUFBSCxPQUFBLEVBQWEsSUFBSWczQyxLQUFLLE1BQUFoNEIsR0FBUzdlLEdBQUEsRUFBQUgsRUFBQWdmLEVBQVM3ZSxJQUFBLE9BQUFraEIsSUFBQTNDLEVBQUEsT0FBQWcyQixHQUFBcnpCLEdBQUFyaEIsR0FBQSxPQUFBcWhCLFdBQUEybkIsYUFBaUUsSUFBQTNuQixHQUFBMWxCLEVBQVEsT0FBQTBsQixJQUFTLENBQUVsaEIsR0FBQSxFQUNsZkgsT0FBQSxFQUFTLElBQUkrMkMsS0FBSyxNQUFBLzNCLEdBQVM3ZSxHQUFBLEVBQUFILEVBQUFnZixFQUFTN2UsSUFBQSxPQUFBa2hCLElBQUEzQyxFQUFBLE9BQUFnMkIsR0FBQXJ6QixHQUFBcmhCLEdBQUEsT0FBQXFoQixXQUFBMm5CLGFBQTRHLElBQTNDL0ssR0FBQXFJLElBQU9BLEdBQUEsS0FBUXRKLEtBQUFxSixHQUFRQSxHQUFBLEtBQVExbUMsRUFBQXFnQixRQUFBNVosRUFBWWliLEdBQUExbEIsRUFBUSxPQUFBMGxCLElBQVMsQ0FBRWxoQixHQUFBLEVBQUtILE9BQUEsRUFBUyxJQUFJazNDLEdBQUF2M0MsRUFBQWpFLEdBQVEsTUFBQXNqQixHQUFTN2UsR0FBQSxFQUFBSCxFQUFBZ2YsRUFBUzdlLElBQUEsT0FBQWtoQixJQUFBM0MsRUFBQSxPQUFBZzJCLEdBQUFyekIsR0FBQXJoQixHQUFBLE9BQUFxaEIsV0FBQTJuQixhQUFpRSxVQUFBcnRDLEdBQUEsT0FBQWc3QyxHQUFBLENBQXdCLElBQUEzakMsRUFGeFMsU0FBQXJULEVBQUF5RyxHQUFpQnl3QyxHQUFBRCxHQUFBRCxHQUFBLEtBQWMsSUFBQWo3QyxFQUFBd0QsR0FBUUEsSUFBQSxFQUFLLEdBQUcsT0FBQWtILEVBQUE0d0IsVUFBQSxDQUFvQixJQUFBcjdCLEdBQUEsRUFBQXdFLE9BQUEsRUFBa0IsSUFBSSxJQUFBSCxFQUFBb0csRUFBUXV1QyxHQUFBaEgsR0FBQVAsR0FBQXB0QyxHQUFZMjBDLEdBQUF2SCxHQUFBTSxHQUFBMXRDLEdBQVksTUFBQWdULEdBQVNyWCxHQUFBLEVBQUF3RSxFQUFBNlMsRUFBU3JYLEdBQUErNEMsR0FBQXR1QyxFQUFBakcsR0FBV2lHLElBQUE0aUMsaUJBQWUsT0FBQTVpQyxHQUFnQmxILEdBQUF4RCxFQUF1QixLQUFuQkEsRUFBQWlFLEVBQUF1cEMsaUJBQW1Cc00sR0FBQTcxQyxFQUFBakUsR0FBZTZsQixJQUFBcmlCLElBQUFxNEMsR0FBQSxnQkFFNkUxNkMsS0FBQSxLQUFBOEMsRUFBQWhFLEdBQXdCaTdDLEdBQUF6NkMsRUFBQXE3Qyx5QkFBQXI3QyxFQUFBczdDLHdCQUFBLFdBQW1FLE9BQUEzUSxHQUFBOXpCLEtBQWU2akMsR0FBQTdqQyxFQUFLc2pDLEdBQUFJLElBQUEsRUFBUyxtQkFBQXRPLE9BQUFoaUMsRUFBQWtnQixXQUF3QzVxQixFQUFBMEssRUFBQThpQyxlQUNoYyxLQUQyZTlpQyxHQUF4QkEsSUFBQTZpQyxxQkFDM2R2dEMsRUFBQTBLLEVBQUExSyxLQUFRczZDLEdBQUEsTUF1QnlaLFNBQUFyMkMsRUFBQXlHLEdBQWlCekcsRUFBQXVwQyxlQUFBOWlDLEVBQW1CekcsRUFBQSszQyxhQUFBLEtBdkI1YUMsQ0FBQWg0QyxFQUFBeUcsR0FDekIsU0FBQXd4QyxHQUFBajRDLEdBQWUsT0FBTSxDQUFFLElBQUF5RyxFQUFBekcsRUFBQWczQixVQUFBajdCLEVBQUFpRSxFQUFBc25CLE9BQUF0ckIsRUFBQWdFLEVBQUF5M0IsUUFBeUMsWUFBQXozQixFQUFBcTNCLFdBQUEsQ0FBMkIzdEIsR0FBQTFKLEVBQUlBLEVBQUEsQ0FBRyxJQUFBUSxFQUFBaUcsRUFBWXBHLEVBQUFmLEdBQVErVCxHQUFaNU0sRUFBQXpHLEdBQVk4b0MsYUFBcUIsT0FBQXJpQyxFQUFBOEMsS0FBYyxPQUFhLGNBQWMscUJBQXFCLE9BQUErVyxHQUFBN1osRUFBQXRJLE9BQUE4cEMsS0FBd0IsTUFBTSxPQUFBcUYsS0FBYXBGLE1BQU03MEIsRUFBQTVNLEVBQUFrZ0IsV0FBY29yQixpQkFBQTErQixFQUFBdU0sUUFBQXZNLEVBQUEwK0IsZUFBQTErQixFQUFBMCtCLGVBQUEsTUFBcUUsT0FBQXZ4QyxHQUFBLE9BQUFBLEVBQUFnM0IsUUFBQXNaLEdBQUFycUMsS0FBQTR3QixZQUFBLEdBQWtEaWQsR0FBQTd0QyxHQUFNLE1BQU0sT0FBQSttQyxHQUFBL21DLEdBQWEsSUFBQTRZLEVBQUE4dEIsR0FBQUQsR0FBQTdzQixTQUE4QixHQUFUaGdCLEVBQUFvRyxFQUFBdEksS0FBUyxPQUFBcUMsR0FBQSxNQUFBaUcsRUFBQWtnQixVQUFBNHRCLEdBQUEvekMsRUFBQWlHLEVBQUFwRyxFQUFBZ1QsRUFBQWdNLEdBQUE3ZSxFQUFBaWdCLE1BQUFoYSxFQUFBZ2EsTUFBQWhhLEVBQUE0d0IsV0FDdGIsVUFBSyxHQUFBaGtCLEVBQUEsQ0FBVyxJQUFBMVgsRUFBQXd4QyxHQUFBcHNCLEdBQUFWLFNBQW9CLEdBQUF5d0IsR0FBQXJxQyxHQUFBLENBQWNqRyxHQUFKNlMsRUFBQTVNLEdBQUlrZ0IsVUFBYyxJQUFBNVgsRUFBQXNFLEVBQUFsVixLQUFBckMsRUFBQXVYLEVBQUE2MUIsY0FBQTFyQyxFQUFBNmhCLEVBQWdFLE9BQTdCN2UsRUFBQXVtQixHQUFBMVQsRUFBUTdTLEVBQUF3bUIsR0FBQWxyQixFQUFRdUUsT0FBQSxFQUFTZ2YsRUFBQXRRLEdBQWMsMEJBQUFYLEdBQUEsT0FBQTVOLEdBQXdDLE1BQU0sNEJBQUF1TyxFQUFBLEVBQWtDQSxFQUFBZ2EsR0FBQXpsQixPQUFZeUwsSUFBQVgsR0FBQTJhLEdBQUFoYSxHQUFBdk8sR0FBZSxNQUFNLGFBQUE0TixHQUFBLFFBQUE1TixHQUEyQixNQUFNLGlDQUFBNE4sR0FBQSxRQUFBNU4sR0FBaUQ0TixHQUFBLE9BQUE1TixHQUFZLE1BQU0sV0FBQTROLEdBQUEsUUFBQTVOLEdBQXlCNE4sR0FBQSxTQUFBNU4sR0FBYyxNQUFNLGNBQUE0TixHQUFBLFNBQUE1TixHQUE2QixNQUFNLFlBQUE0eEIsR0FBQTV4QixFQUFBMUUsR0FBcUJzUyxHQUFBLFVBQUE1TixHQUFlK2xDLEdBQUEvb0MsRUFBQSxZQUFpQixNQUFNLGFBQUFnRCxFQUFBMHhCLGNBQzFlLENBQUNzakIsY0FBQTE1QyxFQUFBMjVDLFVBQTBCcm5DLEdBQUEsVUFBQTVOLEdBQWUrbEMsR0FBQS9vQyxFQUFBLFlBQWlCLE1BQU0sZUFBQTBqQyxHQUFBMWdDLEVBQUExRSxHQUFBc1MsR0FBQSxVQUFBNU4sR0FBQStsQyxHQUFBL29DLEVBQUEsWUFBdUUsSUFBQTZDLEtBQWZpbUMsR0FBQWpuQixFQUFBdmpCLEdBQVFpVCxFQUFBLEtBQU9qVCxJQUFBeUIsZUFBQThDLEtBQUExRSxFQUFBRyxFQUFBdUUsR0FBQSxhQUFBQSxFQUFBLGlCQUFBMUUsRUFBQTZFLEVBQUE0b0IsY0FBQXp0QixJQUFBb1QsRUFBQSxZQUFBcFQsSUFBQSxpQkFBQUEsR0FBQTZFLEVBQUE0b0IsY0FBQSxHQUFBenRCLElBQUFvVCxFQUFBLGVBQUFwVCxJQUFBMHBCLEVBQUE5bkIsZUFBQThDLElBQUEsTUFBQTFFLEdBQUE0cUMsR0FBQS9vQyxFQUFBNkMsSUFBME4sT0FBQWdmLEdBQVUsWUFBQTBQLEdBQUF2dUIsR0FBbUJreUIsR0FBQWx5QixFQUFBMUUsR0FBQSxHQUFXLE1BQU0sZUFBQWl6QixHQUFBdnVCLEdBQXNCNGdDLEdBQUE1Z0MsR0FBUSxNQUFNLGdDQUFrQywyQkFBQTFFLEVBQUEyNEMsVUFDdGRqMEMsRUFBQWswQyxRQUFBak8sSUFBZXBtQyxFQUFBME8sRUFBSXNFLEVBQUE0MUIsWUFBQTVvQyxHQUFnQmdULEVBQUEsT0FBQWhULElBQWlCK3pDLEdBQUEzdEMsT0FBUyxDQUFLM0ssRUFBQTJLLEVBQUlqSixFQUFBNkMsRUFBSUcsRUFBQTZTLEVBQUl0RSxFQUFBLElBQUFzUSxFQUFBdVAsU0FBQXZQLElBQUFzVCxjQUFtQ2gzQixJQUFBK2xDLEdBQUE5c0IsT0FBQWpaLEVBQUFrbUMsR0FBQXJrQyxJQUF1QjdCLElBQUErbEMsR0FBQTlzQixLQUFBLFdBQUFwWCxJQUFBZ0QsRUFBQXVPLEVBQUE1RSxjQUFBLFFBQUFpNEIsVUFBQSxxQkFBQXJ6QixFQUFBdk8sRUFBQTBWLFlBQUExVixFQUFBZ2IsYUFBQSxpQkFBQWhiLEVBQUEwSixHQUFBNkUsSUFBQTVFLGNBQUEzTSxFQUFBLENBQWlLME0sR0FBQTFKLEVBQUEwSixNQUFRNkUsSUFBQTVFLGNBQUEzTSxHQUFBLFdBQUFBLE1BQUF1UixFQUFBdk8sRUFBQWkxQyxTQUFBajRDLEVBQUFpNEMsVUFBQSxFQUFBajFDLEVBQUEwM0MsT0FBQTE2QyxFQUFBMDZDLEtBQUExM0MsRUFBQTAzQyxRQUFBbnBDLElBQUFvcEMsZ0JBQUF4OEMsRUFBQTZCLElBQXVIZ0QsRUFBQXVPLEdBQUlnWSxHQUFBanJCLEVBQVEwRSxFQUFBd21CLEdBQUEzVCxFQUFRZ2hDLEdBQUE3ekMsRUFBQWlHLEdBQUEsTUFBY2pKLEVBQUFnRCxFQUFZLElBQUE1RCxFQUFBeWlCLEVBQUFELEVBQUFqSCxHQUFScEosRUFBQTFPLEVBQUl2RSxFQUFBdVgsR0FBc0IsT0FBQXRFLEdBQVUsMEJBQUFYLEdBQUEsT0FDbGY1USxHQUFHNmhCLEVBQUF2akIsRUFBSSxNQUFNLDRCQUFBdWpCLEVBQUEsRUFBa0NBLEVBQUEwSixHQUFBemxCLE9BQVkrYixJQUFBalIsR0FBQTJhLEdBQUExSixHQUFBN2hCLEdBQWU2aEIsRUFBQXZqQixFQUFJLE1BQU0sYUFBQXNTLEdBQUEsUUFBQTVRLEdBQTJCNmhCLEVBQUF2akIsRUFBSSxNQUFNLGlDQUFBc1MsR0FBQSxRQUFBNVEsR0FBaUQ0USxHQUFBLE9BQUE1USxHQUFZNmhCLEVBQUF2akIsRUFBSSxNQUFNLFdBQUFzUyxHQUFBLFFBQUE1USxHQUF5QjRRLEdBQUEsU0FBQTVRLEdBQWM2aEIsRUFBQXZqQixFQUFJLE1BQU0sY0FBQXNTLEdBQUEsU0FBQTVRLEdBQTZCNmhCLEVBQUF2akIsRUFBSSxNQUFNLFlBQUFzMkIsR0FBQTUwQixFQUFBMUIsR0FBcUJ1akIsRUFBQTBTLEdBQUF2MEIsRUFBQTFCLEdBQVVzUyxHQUFBLFVBQUE1USxHQUFlK29DLEdBQUEzcEMsRUFBQSxZQUFpQixNQUFNLGFBQUF5aUIsRUFBQXNoQixHQUFBbmpDLEVBQUExQixHQUF3QixNQUFNLGFBQUEwQixFQUFBMDBCLGNBQUEsQ0FBK0JzakIsY0FBQTE1QyxFQUFBMjVDLFVBQTBCcDJCLEVBQUFsaUIsRUFBQSxHQUFNckIsRUFBQSxDQUFJYSxXQUFBLElBQWV5UixHQUFBLFVBQUE1USxHQUFlK29DLEdBQUEzcEMsRUFBQSxZQUFpQixNQUFNLGVBQUFza0MsR0FBQTFqQyxFQUNuZjFCLEdBQUd1akIsRUFBQTJoQixHQUFBeGpDLEVBQUExQixHQUFVc1MsR0FBQSxVQUFBNVEsR0FBZStvQyxHQUFBM3BDLEVBQUEsWUFBaUIsTUFBTSxRQUFBeWlCLEVBQUF2akIsRUFBWXdxQyxHQUFBdjNCLEVBQUFzUSxHQUFRMWpCLE9BQUEsRUFBUyxJQUFBa2pCLEVBQUE5UCxFQUFBdlAsRUFBQWhDLEVBQUFvaEIsRUFBQVMsRUFBZ0IsSUFBQTFqQixLQUFBaWpCLEVBQUEsR0FBQUEsRUFBQXJoQixlQUFBNUIsR0FBQSxDQUFtQyxJQUFBZ2pCLEVBQUFDLEVBQUFqakIsR0FBVyxVQUFBQSxFQUFBMnBDLEdBQUE5bEMsRUFBQW1mLEdBQUEsNEJBQUFoakIsRUFBQSxPQUFBZ2pCLE1BQUFvb0IsWUFBQSxJQUFBL0UsR0FBQXhpQyxFQUFBbWYsR0FBQSxhQUFBaGpCLEVBQUEsaUJBQUFnakIsR0FBQSxhQUFBRSxHQUFBLEtBQUFGLElBQUEwakIsR0FBQTdpQyxFQUFBbWYsR0FBQSxpQkFBQUEsR0FBQTBqQixHQUFBN2lDLEVBQUEsR0FBQW1mLEdBQUEsbUNBQUFoakIsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBMHBCLEVBQUE5bkIsZUFBQTVCLEdBQUEsTUFBQWdqQixHQUFBNG5CLEdBQUEzcEMsRUFBQWpCLEdBQUEsTUFBQWdqQixHQUFBNlMsR0FBQWh5QixFQUFBN0QsRUFBQWdqQixFQUFBUyxJQUFrVixPQUFBclEsR0FBVSxZQUFBZ2dCLEdBQUF2eEIsR0FDMWVrMUIsR0FBQWwxQixFQUFBMUIsR0FBQSxHQUFXLE1BQU0sZUFBQWl6QixHQUFBdnhCLEdBQXNCNGpDLEdBQUE1akMsR0FBUSxNQUFNLG1CQUFBMUIsRUFBQWEsT0FBQWEsRUFBQTRlLGFBQUEsV0FBQTBWLEdBQUFoMkIsRUFBQWEsUUFBb0UsTUFBTSxjQUFBMGlCLEVBQUE3aEIsR0FBa0JpNEMsV0FBQTM1QyxFQUFBMjVDLFNBQWtDLE9BQVZqNEMsRUFBQTFCLEVBQUFhLE9BQVVra0MsR0FBQXhoQixJQUFBdmpCLEVBQUEyNUMsU0FBQWo0QyxHQUFBLFNBQUExQixFQUFBbTJCLGNBQUE0TyxHQUFBeGhCLElBQUF2akIsRUFBQTI1QyxTQUFBMzVDLEVBQUFtMkIsY0FBQSxHQUEyRixNQUFNLDJCQUFBNVMsRUFBQW8xQixVQUFBajNDLEVBQUFrM0MsUUFBQWpPLEtBQXNEcHpCLEVBQUF1ekIsR0FBQXZtQyxFQUFBZ1QsS0FBQStnQyxHQUFBM3RDLEdBQW1CQSxFQUFBa2dCLFVBQUFubUIsRUFBYyxPQUFBaUcsRUFBQWdhLE1BQUFoYSxFQUFBNHdCLFdBQUEsVUFBaUMsT0FBQTV3QixFQUFBa2dCLFdBQUE1SCxFQUFBLE9BQXdDLE1BQU0sT0FBQXZlLEdBQUEsTUFBQWlHLEVBQUFrZ0IsVUFBQTZ0QixHQUFBaDBDLEVBQUFpRyxFQUFBakcsRUFBQTBvQyxjQUFBNzFCLElBQUEsaUJBQzFiQSxJQUFBLE9BQUE1TSxFQUFBa2dCLFdBQUE1SCxFQUFBLFFBQUF2ZSxFQUFBMnNDLEdBQUFELEdBQUE3c0IsU0FBQThzQixHQUFBcHNCLEdBQUFWLFNBQUF5d0IsR0FBQXJxQyxJQUFBcEcsR0FBQWdULEVBQUE1TSxHQUFBa2dCLFVBQUFubUIsRUFBQTZTLEVBQUE2MUIsY0FBQTdvQyxFQUFBMG1CLEdBQUExVCxLQUFBaFQsRUFBQWtpQyxZQUFBL2hDLElBQUE0ekMsR0FBQTN0QyxLQUFBcEcsRUFBQW9HLEdBQUE0TSxHQUFBLElBQUE3UyxFQUFBb3VCLFNBQUFwdUIsSUFBQW15QixlQUFBbFYsZUFBQXBLLElBQUEwVCxHQUFBdGdCLEVBQUFwRyxFQUFBc21CLFVBQUF0VCxJQUFpUCxNQUFNLGNBQWMsUUFBMEIsR0FBMUJBLEVBQUE1TSxFQUFBdWlDLGNBQTBCLE9BQUF2aUMsRUFBQTR3QixXQUFBLENBQXlCNXdCLEVBQUE4aUMsZUFBQWxwQyxFQUFtQnFKLEdBQUFqRCxFQUFJLE1BQUF6RyxFQUFRcVQsRUFBQSxPQUFBQSxFQUFXaFQsRUFBQSxPQUFBRyxHQUFBLE9BQUFBLEVBQUF3b0MsY0FBbUMsT0FBQXhvQyxJQUFBNlMsR0FBQWhULElBQUEsUUFBQUcsSUFBQWczQixNQUFBQyxXQUFBLFFBQUFwWSxFQUFBNVksRUFBQTJpQyxjQUFBM2lDLEVBQUEyaUMsWUFBQTVvQyxJQUFBNm9DLFdBQUFocUIsSUFBQTVZLEVBQUEyaUMsWUFDclkzaUMsRUFBQTBpQyxXQUFBM29DLElBQUE2b0MsV0FBQSxNQUFBN29DLEVBQUE2MkIsVUFBQSxLQUFrRGhrQixHQUFBaFQsS0FBQW9HLEVBQUE0d0IsV0FBQSxHQUF1QixNQUFNLE9BQWEsT0FBYSxjQUFjLE9BQUFpVyxLQUFhZ0gsR0FBQTd0QyxHQUFNLE1BQU0sUUFBQXdzQyxHQUFBeHNDLEdBQWMsTUFBTSxPQUFhLGNBQWMsUUFBQTZaLEdBQUE3WixFQUFBdEksT0FBQThwQyxLQUF5QixNQUFNLGNBQWMsUUFBQWxwQixFQUFBLE9BQWlCclYsR0FBQSxLQUFXLEdBQUpqRCxFQUFBekcsRUFBSSxJQUFBVixJQUFBLElBQUFtSCxFQUFBNmlDLG9CQUFBLENBQXlDLElBQUpqMkIsRUFBQSxFQUFJaFQsRUFBQW9HLEVBQUErd0IsTUFBYyxPQUFBbjNCLElBQVNHLEVBQUFILEVBQUFrcEMsZ0JBQUFsMkIsTUFBQTdTLElBQUE2ZSxFQUFBaGYsRUFBQWlwQyxxQkFBQWoyQixNQUFBZ00sR0FBQWhmLElBQUFvM0IsUUFBOEVoeEIsRUFBQTZpQyxvQkFBQWoyQixFQUF3QixVQUFBM0osR0FBQSxPQUFBQSxHQUFxQixPQUFBM04sR0FBQSxTQUFBQSxFQUFBczdCLGFBQUEsT0FBQXQ3QixFQUFBcXRDLGNBQ25jcnRDLEVBQUFxdEMsWUFBQXBwQyxFQUFBb3BDLGFBQUEsT0FBQXBwQyxFQUFBbXBDLGFBQUEsT0FBQXB0QyxFQUFBb3RDLGFBQUFwdEMsRUFBQW90QyxXQUFBRSxXQUFBcnBDLEVBQUFvcEMsYUFBQXJ0QyxFQUFBb3RDLFdBQUFucEMsRUFBQW1wQyxZQUFBLEVBQUFucEMsRUFBQXEzQixZQUFBLE9BQUF0N0IsRUFBQW90QyxXQUFBcHRDLEVBQUFvdEMsV0FBQUUsV0FBQXJwQyxFQUFBakUsRUFBQXF0QyxZQUFBcHBDLEVBQUFqRSxFQUFBb3RDLFdBQUFucEMsUUFBMk8sQ0FBZSxXQUFWQSxFQUFBdTJDLEdBQUF2MkMsSUFBVSxPQUFBQSxFQUFBcTNCLFdBQUEsS0FBQXIzQixFQUF1QyxPQUFBakUsTUFBQXF0QyxZQUFBcnRDLEVBQUFvdEMsV0FBQSxLQUFBcHRDLEVBQUFzN0IsV0FBQSxNQUE4RCxVQUFBcjdCLEVBQUEsT0FBQUEsRUFBcUIsVUFBQUQsRUFBZ0IsTUFBaEJpRSxFQUFBakUsRUFBMkIsWUFDL1ksU0FBQXE4QyxHQUFBcDRDLEdBQWUsSUFBQXlHLEVBQUEwckMsR0FBQW55QyxFQUFBZzNCLFVBQUFoM0IsRUFBQVYsSUFBNkYsT0FBbkVVLEVBQUFrcEMsY0FBQWxwQyxFQUFBOG9DLGFBQStCLE9BQUFyaUMsTUFBQXd4QyxHQUFBajRDLElBQW9CeTJDLEdBQUFwMkIsUUFBQSxLQUFnQjVaLEVBQzVHLFNBQUE0eEMsR0FBQXI0QyxFQUFBeUcsR0FBaUJrd0MsSUFBQTUzQixFQUFBLE9BQW1CdXNCLEtBQUtxTCxJQUFBLEVBQU0sSUFBQTU2QyxFQUFBeTZDLEdBQUFuMkIsUUFBaUJtMkIsR0FBQW4yQixRQUFBNHVCLEdBQWMsSUFBQWp6QyxFQUFBZ0UsRUFBQTJxQywyQkFBbUMzdUMsSUFBQXNELElBQUFVLElBQUE0MkMsSUFBQSxPQUFBbHRDLEtBQUF5dEMsS0FBQTczQyxHQUFBdEQsRUFBQTBOLEdBQUErL0IsSUFBQW1OLEdBQUE1MkMsR0FBQXFnQixRQUFBLE1BQUFyZ0IsRUFBQXkzQyw0QkFBQSxHQUEwRyxJQUFULElBQUFqM0MsR0FBQSxJQUFTLENBQUcsSUFBSSxHQUFBaUcsRUFBQSxLQUFVLE9BQUFpRCxLQUFBNHVDLE1BQWdCNXVDLEdBQUEwdUMsR0FBQTF1QyxTQUFTLEtBQVUsT0FBQUEsSUFBU0EsR0FBQTB1QyxHQUFBMXVDLElBQVMsTUFBQWtWLEdBQVMsR0FBQW8wQixHQUFBRCxHQUFBRCxHQUFBLEtBQUE1RCxLQUFBLE9BQUF4bEMsR0FBQWxKLEdBQUEsRUFBQTAxQyxHQUFBdDNCLE9BQTBDLENBQUssT0FBQWxWLElBQUFxVixFQUFBLE9BQXlCLElBQUExZSxFQUFBcUosR0FBQTJKLEVBQUFoVCxFQUFBaW5CLE9BQW1CLFVBQUFqVSxFQUF1QixDQUFLclQsRUFBQSxDQUFHLElBQUFxZixFQUFBcmYsRUFBQXJFLEVBQUEwWCxFQUFBdEUsRUFBQTFPLEVBQUF2RSxFQUFBOGlCLEVBQTBFLEdBQXREdkwsRUFBQS9ULEdBQUl5UCxFQUFBc29CLFdBQUEsS0FBa0J0b0IsRUFBQXE2QixZQUFBcjZCLEVBQUFvNkIsV0FBQSxLQUFnQyxPQUM5ZXJ0QyxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBdTJDLEtBQUEsQ0FBb0QsSUFBQTcwQyxFQUFBMUIsRUFBUUEsRUFBQUgsRUFBSSxJQUFBaUIsR0FBQSxFQUFBd2lCLEdBQUEsRUFBYyxHQUFHLFFBQUF0akIsRUFBQXlOLElBQUEsQ0FBZSxJQUFBc1YsRUFBQS9pQixFQUFBazdCLFVBQWtCLFVBQUFuWSxHQUFBLFFBQUFBLElBQUFtcUIsZUFBQSxDQUEyQzVwQixFQUFBLGVBQUFQLEVBQUFvekIsWUFBK0IsTUFBbUMsaUJBQTdCcHpCLEVBQUEvaUIsRUFBQWd0QyxhQUFBeVAsZUFBNkIsR0FBQTE1QixFQUFBamlCLEVBQUEsSUFBbUMsSUFBQUEsR0FBQWlpQixFQUFBamlCLE9BQUFpaUIsSUFBd0IvaUIsSUFBQXdyQixhQUFXLE9BQUF4ckIsR0FBZ0JBLEVBQUFILEVBQUksR0FBaUYsSUFBOUVrakIsRUFBQSxLQUFBL2lCLEVBQUF5TixPQUFBc1YsT0FBQSxJQUFBL2lCLEVBQUFvdEMsY0FBQWdKLFVBQUEsT0FBQXAyQyxFQUFBa3RDLGVBQThFbnFCLEVBQUEsQ0FBNkUsR0FBdkQsUUFBaEJsakIsRUFBQUcsRUFBQW10QyxlQUFnQnR0QyxFQUFBLElBQUE4ckMsS0FBQXFPLElBQUF0NEMsR0FBQTFCLEVBQUFtdEMsWUFBQXR0QyxLQUFBbTZDLElBQUF0NEMsR0FBdUQsTUFBQTFCLEVBQUFlLE1BQUEsQ0FBbUJmLEVBQUF1N0IsV0FDMWUsR0FBR3RvQixFQUFBc29CLFlBQUEsS0FBbUIsSUFBQXRvQixFQUFBeEYsTUFBQSxPQUFBd0YsRUFBQWlvQixVQUFBam9CLEVBQUF4RixJQUFBLEtBQUE4SixFQUFBNjNCLEdBQUEsYUFBQTNoQyxJQUFBbWlDLEdBQUFILEdBQUF4OEIsRUFBQXNFLEtBQTZFdEUsRUFBQXc2QixlQUFBLFdBQTRCLE1BQUF2cEMsRUFBWXJFLEVBQUEwWCxFQUFJLElBQUE3VCxHQUFSdVAsRUFBQXNRLEdBQVFtNUIsVUFBa0IsT0FBQWg1QyxLQUFBdVAsRUFBQXlwQyxVQUFBLElBQUF6QyxHQUFBbDNCLEVBQUEsSUFBQTRvQixJQUFBam9DLEVBQUFtUCxJQUFBblIsRUFBQXFoQixTQUFBLEtBQUFBLEVBQUFyZixFQUFBakQsSUFBQWlCLE1BQUFxaEIsRUFBQSxJQUFBNG9CLElBQUFqb0MsRUFBQW1QLElBQUFuUixFQUFBcWhCLElBQXFHQSxFQUFBbFgsSUFBQWhNLEtBQUFrakIsRUFBQWkzQixJQUFBbjZDLEdBQUFvVCxFQUFBMHBDLEdBQUF2N0MsS0FBQSxLQUFBNlIsRUFBQXZSLEVBQUE3QixHQUFBNkIsRUFBQTYwQyxLQUFBdGpDLE9BQXVELElBQUFuUyxFQUFBeWlCLEVBQUEsaUJBQUFELE1BQUEsZUFBQXNyQixHQUFBcnJCLEVBQUFoTSxJQUFBLEtBQUFnTSxFQUFBRCxFQUFBeGlCLEdBQW9FLEdBQUF5aUIsR0FBQXczQixHQUFBeDNCLElBQUF3M0IsR0FBQXgzQixHQUFtQnZqQixFQUFBdTdCLFdBQUEsS0FBa0J2N0IsRUFBQXl0QyxlQUFBbDJCLEVBQW1CLE1BQUFyVCxFQUFRbEUsSUFBQXdyQixhQUFXLE9BQUF4ckIsR0FBZ0JBLEVBQUFxRyxPQUFBb3VCLEdBQUF4aEIsRUFBQTVRLE9BQUEscUJBQzVkLHdMQUFBcXlCLEdBQUF6aEIsSUFBK0wrbkMsSUFBQSxFQUFNaDdDLEVBQUFvNEMsR0FBQXA0QyxFQUFBaVQsR0FBVXNRLEVBQUExakIsRUFBSSxHQUFHLE9BQUEwakIsRUFBQTlWLEtBQWMsT0FBQThWLEVBQUFnWSxXQUFBLEtBQXlCaFksRUFBQWtxQixlQUFBbDJCLEVBQStCd2dDLEdBQUF4MEIsRUFBWmhNLEVBQUE0aUMsR0FBQTUyQixFQUFBdmpCLEVBQUF1WCxJQUFvQixNQUFBclQsRUFBUSxVQUFBcEQsRUFBQWQsRUFBQXNqQixFQUFBQyxFQUFBbGhCLEtBQUE0USxFQUFBc1EsRUFBQXNILFVBQUEsT0FBQXRILEVBQUFnWSxhQUFBLG1CQUFBalksRUFBQXJPLDBCQUFBLE9BQUFoQyxHQUFBLG1CQUFBQSxFQUFBcW5DLG9CQUFBLE9BQUFDLFFBQUExdUMsSUFBQW9ILEtBQUEsQ0FBeUxzUSxFQUFBZ1ksV0FBQSxLQUNyZWhZLEVBQUFrcUIsZUFBQWwyQixFQUErQndnQyxHQUFBeDBCLEVBQVpoTSxFQUFBOGlDLEdBQUE5MkIsRUFBQXppQixFQUFBeVcsSUFBb0IsTUFBQXJULEdBQVNxZixJQUFBaUksYUFBVyxPQUFBakksR0FBZ0IzVixHQUFBdXVDLEdBQUE1M0MsR0FBUSxTQUprVEcsR0FBQSxFQUFBMDFDLEdBQUF0M0IsSUFJdlMsTUFBcUQsR0FBdEMrM0IsSUFBQSxFQUFNSCxHQUFBbjJCLFFBQUF0a0IsRUFBYWkzQyxHQUFBRCxHQUFBRCxHQUFBLEtBQWM1RCxLQUFLMXVDLEVBQUFvMkMsR0FBQSxLQUFBNTJDLEVBQUErM0MsYUFBQSxVQUFpQyxVQUFBcnVDLEdBQUExSixFQUFBKzNDLGFBQUEsU0FBcUMsQ0FBNEQsR0FBakMsUUFBdEJoOEMsRUFBQWlFLEVBQUFxZ0IsUUFBQTJXLFlBQXNCalksRUFBQSxPQUF5QjYzQixHQUFBLEtBQVFFLEdBQUEsQ0FBMEUsR0FBbkV0MkMsRUFBQVIsRUFBQW9xQyxrQkFBc0IvcEMsRUFBQUwsRUFBQXlxQyxvQkFBd0JwM0IsRUFBQXJULEVBQUF1cUMsaUJBQXFCLElBQUEvcEMsS0FBQXhFLEdBQUEsSUFBQXFFLEtBQUFyRSxHQUFBLElBQUFxWCxLQUFBclgsRUFBNkUsT0FBdENzdUMsR0FBQXRxQyxFQUFBaEUsUUFBUTA4QyxHQUFBMTRDLEVBQUFqRSxFQUFBQyxFQUFBZ0UsRUFBQXVwQyxnQkFBQSxHQUFxQyxJQUFBdnBDLEVBQUFrcUMsVUFBQXpqQyxFQUN0WSxPQUR5WnpHLEVBQUFrcUMsVUFBQSxFQUFjbHVDLEVBQUFnRSxFQUFBMnFDLDJCQUFBM3VDLEVBQ3BkeUssRUFBQXpHLEVBQUF1cEMsZUFBQSxnQkFBOEJtUCxHQUFBMTRDLEVBQUFqRSxFQUFBQyxFQUFBeUssR0FBQSxHQUF1QkEsSUFBQSxJQUFBb3dDLElBQUF2TSxHQUFBdHFDLEVBQUFoRSxJQUFBeUssRUFBQSxlQUFBaWtDLEdBQUExcUMsRUFBQWhFLEtBQUE2NkMsUUFBQXB3QyxLQUFBLGVBQUF3a0MsTUFBQXhrQyxFQUFBb3dDLEdBQUFwd0MsRUFBQWl5QyxHQUFBMTRDLEVBQUFqRSxFQUFBQyxFQUFBZ0UsRUFBQXVwQyxlQUFBLEVBQUE5aUMsRUFBQSxFQUFBQSxLQUFBekcsRUFBQXkzQyw0QkFBQXo3QyxFQUFBZ0UsRUFBQSszQyxhQUFBaDhDLElBQ3JELFNBQUFnNUMsR0FBQS8wQyxFQUFBeUcsR0FBaUIsUUFBQTFLLEVBQUFpRSxFQUFBc25CLE9BQW1CLE9BQUF2ckIsR0FBUyxDQUFFLE9BQUFBLEVBQUF3TixLQUFjLFdBQUF2TixFQUFBRCxFQUFBNHFCLFVBQXlCLHNCQUFBNXFCLEVBQUFvQyxLQUFBNFMsMEJBQUEsbUJBQUEvVSxFQUFBbzZDLG9CQUFBLE9BQUFDLFFBQUExdUMsSUFBQTNMLElBQWtMLE9BQXpCdXZDLEdBQUF4dkMsRUFBckJpRSxFQUFBbTJDLEdBQUFwNkMsRUFBVmlFLEVBQUFrMEMsR0FBQXp0QyxFQUFBekcsR0FBVSxrQkFBNkJ3ckMsR0FBQXp2QyxFQUFBLFlBQXdCLE1BQU0sT0FBK0QsT0FBekJ3dkMsR0FBQXh2QyxFQUFyQmlFLEVBQUFpMkMsR0FBQWw2QyxFQUFqQmlFLEVBQUFrMEMsR0FBQXp0QyxFQUFBekcsR0FBaUIsa0JBQTZCd3JDLEdBQUF6dkMsRUFBQSxZQUF3QkEsSUFBQXVyQixPQUFXLElBQUF0bkIsRUFBQXVKLE1BQUFnaUMsR0FBQXZyQyxFQUFBakUsRUFBQWs2QyxHQUFBajJDLEVBQUFqRSxFQUFBbTRDLEdBQUF6dEMsRUFBQXpHLEdBQUEsYUFBQXdyQyxHQUFBeHJDLEVBQUEsYUFDdFcsU0FBQW1yQyxHQUFBbnJDLEVBQUF5RyxHQUFpQixJQUFBMUssRUFBQVMsRUFBQW04QyxtQ0FBQTM4QyxPQUFBLEVBQW9ELFNBQUF5SyxFQUFBNUosTUFBQWIsRUFBQSxnQkFBK0IsR0FBQTI2QyxLQUFBSSxHQUFBLzZDLEVBQUFzRCxPQUFvQixDQUFLLE9BQUF2RCxHQUFVLEtBQUFTLEVBQUFvOEMsMkJBQUE1OEMsRUFBQSxXQUErQyxNQUFNLEtBQUFRLEVBQUFxOEMsOEJBQUE3OEMsRUFBQSw4QkFBQWdFLEVBQUEsV0FBa0YsTUFBTSxLQUFBeEQsRUFBQXM3Qyx3QkFBQTk3QyxFQUFBLDhCQUFBZ0UsRUFBQSxZQUE2RSxNQUFNLEtBQUF4RCxFQUFBczhDLHFCQUFBLEtBQUF0OEMsRUFBQXU4QyxzQkFBQS84QyxFQUFBLEVBQTZELE1BQU0sUUFBQStpQixFQUFBLE9BQWlCLE9BQUE2M0IsSUFBQTU2QyxJQUFBc0QsTUFBQXRELEVBQ3BhLE9BRDBiRCxJQUFBUyxFQUFBcThDLGdDQUNqZCxJQUFBRyxJQUFBaDlDLEVBQUFnOUMsU0FBQWg5QyxHQUF1QkEsRUFBUyxTQUFBeThDLEdBQUF6NEMsRUFBQXlHLEVBQUExSyxHQUFtQixJQUFBQyxFQUFBZ0UsRUFBQXc0QyxVQUFrQixPQUFBeDhDLEtBQUE2d0MsT0FBQXBtQyxHQUFzQixPQUFBbXdDLElBQUF0M0MsS0FBQXZELEVBQUE2NkMsR0FBQSxNQUE0Qm53QyxFQUFBekcsRUFBQXdxQyxzQkFBQXh1QyxFQUFBZ0UsRUFBQXlxQyxvQkFBQSxJQUFBaGtDLEdBQUExSyxHQUFBMEssR0FBQTFLLEdBQUFDLElBQTZFZ0UsRUFBQWtxQyxVQUFBLEdBQW1DLEtBQXJCempDLEVBQUF6RyxFQUFBdXFDLG1CQUFxQjlqQyxFQUFBMUssS0FBQWlFLEVBQUF1cUMsaUJBQUF4dUMsR0FBbUNzdUMsR0FBQXR1QyxFQUFBaUUsR0FBMkIsS0FBbkJqRSxFQUFBaUUsRUFBQXVwQyxpQkFBbUJzTSxHQUFBNzFDLEVBQUFqRSxLQUNyUyxTQUFBNjVDLEdBQUE1MUMsRUFBQXlHLEdBQWlCekcsRUFBQXVwQyxlQUFBOWlDLElBQUF6RyxFQUFBdXBDLGVBQUE5aUMsR0FBeUMsSUFBQTFLLEVBQUFpRSxFQUFBZzNCLFVBQWtCLE9BQUFqN0IsS0FBQXd0QyxlQUFBOWlDLElBQUExSyxFQUFBd3RDLGVBQUE5aUMsR0FBbUQsSUFBQXpLLEVBQUFnRSxFQUFBc25CLE9BQUE5bUIsRUFBQSxLQUFzQixVQUFBeEUsR0FBQSxJQUFBZ0UsRUFBQXVKLElBQUEvSSxFQUFBUixFQUFBMm1CLGVBQXFDLEtBQVUsT0FBQTNxQixHQUFTLENBQWdJLEdBQTlIRCxFQUFBQyxFQUFBZzdCLFVBQWNoN0IsRUFBQXN0QyxvQkFBQTdpQyxJQUFBekssRUFBQXN0QyxvQkFBQTdpQyxHQUFtRCxPQUFBMUssS0FBQXV0QyxvQkFBQTdpQyxJQUFBMUssRUFBQXV0QyxvQkFBQTdpQyxHQUE2RCxPQUFBekssRUFBQXNyQixRQUFBLElBQUF0ckIsRUFBQXVOLElBQUEsQ0FBK0IvSSxFQUFBeEUsRUFBQTJxQixVQUFjLE1BQU0zcUIsSUFBQXNyQixPQUFXLE9BQUE5bUIsRUFDM1ksU0FBQWdyQyxHQUFBeHJDLEVBQUF5RyxHQUEyQixRQUFWekcsRUFBQTQxQyxHQUFBNTFDLEVBQUF5RyxPQUFVa3dDLElBQUEsSUFBQXIzQyxJQUFBbUgsRUFBQW5ILElBQUE2M0MsS0FBQWxOLEdBQUFqcUMsRUFBQXlHLEdBQUFrd0MsS0FBQUksSUFBQUgsS0FBQTUyQyxHQUFBNjFDLEdBQUE3MUMsSUFBQXVwQyxnQkFBQTBQLEdBQUFDLEtBQUFELEdBQUEsRUFBQWw2QixFQUFBLFNBQXlHLFNBQUFvNkIsR0FBQW41QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxHQUF1QixPQUFBaEUsRUFBQXE3Qyx5QkFBQXI3QyxFQUFBbzhDLDJCQUFBLFdBQTBFLE9BQUE1NEMsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsS0FBb0IsSUFBQTQ0QyxHQUFBLEtBQUEvMEIsR0FBQSxLQUFBZzFCLEdBQUEsRUFBQUMsUUFBQSxFQUFBLzVDLElBQUEsRUFBQWc2QyxHQUFBLEtBQUFqMUIsR0FBQSxFQUFBMDBCLEdBQUEsRUFBQVEsSUFBQSxFQUFBQyxHQUFBLEtBQUE3M0IsSUFBQSxFQUFBODNCLElBQUEsRUFBQUMsR0FBQSxLQUFBQyxHQUFBcDlDLEVBQUFxOUMsZUFBQUMsR0FBQSxZQUFBRixHQUFBLE1BQUFHLEdBQUFELEdBQUFaLEdBQUEsR0FBQUQsR0FBQSxFQUFBZSxHQUFBLEtBQThKLFNBQUFDLEtBQWNILEdBQUEsYUFBQXQ5QyxFQUFBcTlDLGVBQUFELElBQUEsTUFDcmEsU0FBQU0sR0FBQWw2QyxFQUFBeUcsR0FBaUIsT0FBQTR5QyxHQUFBLENBQVcsR0FBQTV5QyxFQUFBNHlDLEdBQUEsT0FBZSxPQUFBQyxJQUFBOThDLEVBQUE4cUMsd0JBQUFnUyxJQUF5Q0QsR0FBQTV5QyxFQUFLekcsRUFBQXhELEVBQUFxOUMsZUFBQUQsR0FBc0JOLEdBQUE5OEMsRUFBQTRxQywwQkFBQStTLEdBQUEsQ0FBbUNDLFFBQUEsZUFBQTN6QyxHQUFBekcsSUFBOEIsU0FBQTA0QyxHQUFBMTRDLEVBQUF5RyxFQUFBMUssRUFBQUMsRUFBQXdFLEdBQXVCUixFQUFBdXBDLGVBQUF2dEMsRUFBbUIsSUFBQXdFLEdBQUE4M0MsS0FBQSxFQUFBOTNDLElBQUFSLEVBQUFxNkMsY0FBQXJULEdBQWdILFNBQUFobkMsRUFBQXlHLEVBQUExSyxHQUFtQmlFLEVBQUF5M0MsNEJBQUExN0MsRUFBZ0NpRSxFQUFBKzNDLGFBQUF0eEMsRUFBaUJ3ekMsS0FBS0YsR0FBQUQsR0FBTVEsR0FBQXQ2QyxFQUFBakUsSUFBL0xtQixLQUFBLEtBQUE4QyxFQUFBeUcsRUFBQTFLLEdBQUF5RSxLQUFBUixFQUFBeTNDLDRCQUFBMTdDLEVBQUFpRSxFQUFBKzNDLGFBQUF0eEMsR0FDMU4sU0FBQXdrQyxLQUFjLE9BQUExckMsR0FBQXc2QyxJQUFlUSxLQUFLLElBQUFqMkIsSUFBQSxJQUFBQSxLQUFBMjFCLEtBQUFGLEdBQUFELElBQTJCQyxJQUFVLFNBQUFsRSxHQUFBNzFDLEVBQUF5RyxHQUFpQixPQUFBekcsRUFBQXc2QyxtQkFBQXg2QyxFQUFBdXBDLGVBQUE5aUMsRUFBQSxPQUFBNGQsSUFBQSswQixHQUFBLzBCLEdBQUFya0IsSUFBQXc2QyxrQkFBQXg2QyxJQUFBcWtCLE1BQUFtMkIsa0JBQUF4NkMsR0FBQXc2QyxrQkFBQXBCLElBQUEzeUMsRUFBQXpHLEVBQUF1cEMsaUJBQUF2cEMsRUFBQXVwQyxlQUFBOWlDLEdBQWtMbEgsS0FBQXFpQixHQUFBODNCLEtBQUFILEdBQUF2NUMsRUFBQXNrQixHQUFBLFdBQUFtMkIsR0FBQXo2QyxFQUFBLDZCQUFBeUcsRUFBQW14QyxHQUFBLGVBQUFzQyxHQUFBbDZDLEVBQUF5RyxJQUMxUSxTQUFBOHpDLEtBQWMsSUFBQXY2QyxFQUFBLEVBQUF5RyxFQUFBLEtBQWUsVUFBQTRkLEdBQUEsUUFBQXRvQixFQUFBc29CLEdBQUFyb0IsRUFBQW85QyxHQUE2QixPQUFBcDlDLEdBQVMsQ0FBRSxJQUFBd0UsRUFBQXhFLEVBQUF1dEMsZUFBdUIsT0FBQS9vQyxFQUFBLENBQTZDLElBQW5DLE9BQUF6RSxHQUFBLE9BQUFzb0IsS0FBQXRGLEVBQUEsT0FBbUMvaUIsTUFBQXcrQyxrQkFBQSxDQUE0QnBCLEdBQUEvMEIsR0FBQXJvQixFQUFBdytDLGtCQUFBLEtBQThCLE1BQU0sR0FBQXgrQyxJQUFBbzlDLE1BQUE1NEMsRUFBQXhFLEVBQUF3K0Msa0JBQUFuMkIsR0FBQW0yQixrQkFBQWg2QyxFQUFBeEUsRUFBQXcrQyxrQkFBQSxTQUF1RixJQUFBeCtDLElBQUFxb0IsR0FBQSxFQUFlQSxHQUFBdG9CLEdBQUl5K0Msa0JBQUFwQixHQUF1QnA5QyxFQUFBdytDLGtCQUFBLEtBQXlCLE1BQU16K0MsRUFBQXkrQyxrQkFBQXgrQyxFQUFBdytDLGtCQUFBeCtDLEVBQUF3K0Msa0JBQUEsS0FBc0V4K0MsRUFBQUQsRUFBQXkrQyxzQkFBc0IsQ0FBb0IsR0FBZmg2QyxFQUFBUixNQUFBUSxFQUFBaUcsRUFBQXpLLEdBQWVBLElBQUFxb0IsR0FBQSxNQUFlLGdCQUN4ZXJrQixFQUFBLE1BQVFqRSxFQUFBQyxFQUFJQSxJQUFBdytDLG1CQUF1QmpCLEdBQUE5eUMsRUFBSzZkLEdBQUF0a0IsRUFBSSxJQUFBMDZDLElBQUEsRUFBVSxTQUFBcEMsS0FBYyxRQUFBb0MsTUFBQWwrQyxFQUFBbStDLHlCQUFBRCxJQUFBLEdBQStDLFNBQUFQLEtBQWMsSUFBSSxJQUFBN0IsTUFBQSxPQUFBYyxHQUFBLENBQXFCYSxLQUFLLElBQUFqNkMsRUFBQW81QyxHQUFTLEdBQUcsSUFBQTN5QyxFQUFBekcsRUFBQXVwQyxlQUF1QixJQUFBOWlDLEdBQUFxekMsSUFBQXJ6QyxJQUFBekcsRUFBQTJxQywyQkFBQW1QLElBQWdEOTVDLElBQUF3NkMsd0JBQXNCeDZDLElBQUFvNUMsSUFBY3hCLEdBQUEsTUFBUyxRQUFROEMsSUFBQSxHQUN2UyxTQUFBOUMsR0FBQTUzQyxFQUFBeUcsR0FBc0IsR0FBTDh6QyxLQUFLOXpDLEVBQUEsSUFBQXd6QyxLQUFBRixHQUFBRCxHQUFvQixPQUFBUCxJQUFBLElBQUFqMUIsSUFBQXRrQixHQUFBc2tCLE1BQUFvMkIsSUFBQVosR0FBQXgxQixLQUFvQ20yQixHQUFBbEIsR0FBQWoxQixHQUFBdzFCLEdBQUF4MUIsSUFBQWkyQixLQUFBTixLQUFBRixHQUFBRCxRQUErQixLQUFVLE9BQUFQLElBQUEsSUFBQWoxQixJQUFBdGtCLEdBQUFza0IsSUFBdUJtMkIsR0FBQWxCLEdBQUFqMUIsSUFBQSxHQUFBaTJCLEtBQWlFLEdBQS9DOXpDLElBQUE0eUMsR0FBQSxFQUFBQyxHQUFBLE1BQWtCLElBQUFoMUIsSUFBQTQxQixHQUFBWCxHQUFBajFCLElBQWdCMjBCLEdBQUEsRUFBS2UsR0FBQSxLQUFRLE9BQUFMLEdBQUEsSUFBQTM1QyxFQUFBMjVDLE1BQUEsS0FBQWx6QyxFQUFBLEVBQWtDQSxFQUFBekcsRUFBQXNELE9BQVdtRCxJQUFBLENBQUssSUFBQTFLLEVBQUFpRSxFQUFBeUcsR0FBVyxJQUFJMUssRUFBQTYrQyxjQUFnQixNQUFBNStDLEdBQVN3OUMsU0FBQSxFQUFBQyxHQUFBejlDLElBQWtCLEdBQUF3OUMsR0FBQSxNQUFBeDVDLEVBQUF5NUMsTUFBQSxLQUFBRCxJQUFBLEVBQUF4NUMsRUFBa0MsU0FBQXM2QyxHQUFBdDZDLEVBQUF5RyxHQUFpQmxILElBQUF3ZixFQUFBLE9BQWtCdzZCLEdBQUF2NUMsRUFBS3NrQixHQUFBN2QsRUFBSWcwQyxHQUFBejZDLEVBQUF5RyxHQUFBLEdBQVdteEMsR0FBQSxlQUNwWixTQUFBNkMsR0FBQXo2QyxFQUFBeUcsRUFBQTFLLEdBQTBDLEdBQXZCd0QsSUFBQXdmLEVBQUEsT0FBa0J4ZixJQUFBLEVBQUt4RCxFQUFBLENBQU0sSUFBQUMsRUFBQWdFLEVBQUErM0MsYUFBcUIsT0FBQS83QyxFQUFBNitDLEdBQUE3NkMsRUFBQWhFLEVBQUF5SyxJQUFBekcsRUFBQSszQyxhQUFBLFdBQUEvN0MsRUFBQWdFLEVBQUFxNkMsaUJBQUFyNkMsRUFBQXE2QyxlQUFBLEVBQUFwVCxHQUFBanJDLElBQUFxOEMsR0FBQXI0QyxFQUFBakUsR0FBQSxRQUFBQyxFQUFBZ0UsRUFBQSszQyxnQkFBQU8sS0FBQXQ0QyxFQUFBKzNDLGFBQUEvN0MsRUFBQTYrQyxHQUFBNzZDLEVBQUFoRSxFQUFBeUssVUFBbUssUUFBQXpLLEVBQUFnRSxFQUFBKzNDLGNBQUE4QyxHQUFBNzZDLEVBQUFoRSxFQUFBeUssSUFBQXpHLEVBQUErM0MsYUFBQSxXQUFBLzdDLEVBQUFnRSxFQUFBcTZDLGlCQUFBcjZDLEVBQUFxNkMsZUFBQSxFQUFBcFQsR0FBQWpyQyxJQUFBcThDLEdBQUFyNEMsRUFBQWpFLEdBQUEsUUFBQUMsRUFBQWdFLEVBQUErM0MsZUFBQThDLEdBQUE3NkMsRUFBQWhFLEVBQUF5SyxJQUFpS2xILElBQUEsRUFDelksU0FBQXM3QyxHQUFBNzZDLEVBQUF5RyxFQUFBMUssR0FBbUIsSUFBQUMsRUFBQWdFLEVBQUE4NkMsV0FBbUIsVUFBQTkrQyxLQUFBKytDLGlCQUFBaC9DLElBQUEsT0FBQTQ5QyxNQUFBLENBQUEzOUMsR0FBQTI5QyxHQUFBNTJDLEtBQUEvRyxLQUFBZy9DLFFBQStHLE9BQXBDaDdDLEVBQUErM0MsYUFBQXR4QyxPQUFpQnpHLEVBQUF1cEMsZUFBQSxHQUEwQnZwQyxFQUFBKzNDLGFBQUEsS0FBb0IvM0MsSUFBQWc2QyxHQUFBZixNQUFBZSxHQUFBaDZDLEVBQUFpNUMsR0FBQSxHQUF3Qno4QyxFQUFBcTdDLHlCQUFBcjdDLEVBQUFvOEMsMkJBQUEsV0FBbUVwQixHQUFBeDNDLEVBQUF5RyxLQUFVLFNBQUF5dkMsR0FBQWwyQyxHQUFlLE9BQUF1NUMsSUFBQXg2QixFQUFBLE9BQTBCdzZCLEdBQUFoUSxlQUFBLEVBQW9CaVEsU0FBQSxFQUFBQyxHQUFBejVDLEdBQWlCLFNBQUFpN0MsR0FBQWo3QyxFQUFBeUcsR0FBaUIsSUFBQTFLLEVBQUE2bEIsR0FBUUEsSUFBQSxFQUFLLElBQUksT0FBQTVoQixFQUFBeUcsR0FBWSxTQUFRbWIsR0FBQTdsQixJQUFBd0QsSUFBQXE0QyxHQUFBLGdCQUN6WixTQUFBc0QsR0FBQWw3QyxFQUFBeUcsR0FBaUIsR0FBQW1iLEtBQUE4M0IsR0FBQSxDQUFXQSxJQUFBLEVBQU0sSUFBSSxPQUFBMTVDLEVBQUF5RyxHQUFZLFFBQVFpekMsSUFBQSxHQUFPLE9BQUExNUMsRUFBQXlHLEdBQVksU0FBQTAwQyxHQUFBbjdDLEVBQUF5RyxFQUFBMUssR0FBbUI2bEIsSUFBQXJpQixJQUFBLElBQUF5NUMsS0FBQXBCLEdBQUFvQixJQUFBLEdBQUFBLEdBQUEsR0FBK0IsSUFBQWg5QyxFQUFBNGxCLEdBQVFBLElBQUEsRUFBSyxJQUFJLE9BQUFwbEIsRUFBQXE3Qyx5QkFBQXI3QyxFQUFBcThDLDhCQUFBLFdBQTZFLE9BQUE3NEMsRUFBQXlHLEVBQUExSyxLQUFnQixTQUFRNmxCLEdBQUE1bEIsSUFBQXVELElBQUFxNEMsR0FBQSxnQkFDclAsU0FBQXdELEdBQUFwN0MsRUFBQXlHLEVBQUExSyxFQUFBQyxFQUFBd0UsR0FBdUIsSUFBQUgsRUFBQW9HLEVBQUE0WixRQUFnQnJnQixFQUFBLEdBQUFqRSxFQUFBLENBQWdDMEssRUFBQSxDQUFHLElBQUEyd0IsR0FBM0JyN0IsSUFBQWl2QyxzQkFBMkIsSUFBQWp2QyxFQUFBd04sS0FBQXdWLEVBQUEsT0FBcUMsSUFBQTFMLEVBQUF0WCxFQUFRLEdBQUcsT0FBQXNYLEVBQUE5SixLQUFjLE9BQUE4SixJQUFBc1QsVUFBQS9HLFFBQTZCLE1BQUFuWixFQUFRLFVBQUE2WixHQUFBak4sRUFBQWxWLE1BQUEsQ0FBcUJrVixJQUFBc1QsVUFBQTRoQiwwQ0FBd0QsTUFBQTloQyxHQUFTNE0sSUFBQWlVLGFBQVcsT0FBQWpVLEdBQWdCMEwsRUFBQSxPQUFTMUwsT0FBQSxFQUFTLE9BQUF0WCxFQUFBd04sSUFBQSxDQUFjLElBQUE4VixFQUFBdGpCLEVBQUFvQyxLQUFhLEdBQUFtaUIsR0FBQWpCLEdBQUEsQ0FBU3RqQixFQUFBcXNDLEdBQUFyc0MsRUFBQXNqQixFQUFBaE0sR0FBWSxNQUFBclQsR0FBU2pFLEVBQUFzWCxPQUFJdFgsRUFBQTZyQyxHQUN4VixPQURrVyxPQUFBbmhDLEVBQUFtWixRQUFBblosRUFBQW1aLFFBQUE3akIsRUFBQTBLLEVBQUFzckMsZUFBQWgyQyxFQUFnRDBLLEVBQUFqRyxHQUFJQSxFQUFBMHFDLEdBQUFsdkMsSUFBUW92QyxRQUFBLENBQVd6TCxRQUFBMy9CLEdBQStCLFFBQXBCeUcsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEtBQW9CakcsRUFBQTZxQyxTQUFBNWtDLEdBQzdkNmtDLEtBQUtDLEdBQUFsckMsRUFBQUcsR0FBUWdyQyxHQUFBbnJDLEVBQUFyRSxHQUFRQSxFQUFTLFNBQUFxL0MsR0FBQXI3QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEdBQXFCLElBQUF3RSxFQUFBaUcsRUFBQTRaLFFBQWlDLE9BQUErNkIsR0FBQXA3QyxFQUFBeUcsRUFBQTFLLEVBQVZ5RSxFQUFBMnFDLEdBQXZCRixLQUF1QnpxQyxHQUFVeEUsR0FBcUIsU0FBQXMvQyxHQUFBdDdDLEdBQTJCLEtBQVpBLElBQUFxZ0IsU0FBWW1YLE1BQUEsWUFBd0IsT0FBQXgzQixFQUFBdzNCLE1BQUFqdUIsS0FBb0IsT0FBZ0MsZUFBQXZKLEVBQUF3M0IsTUFBQTdRLFdBRWhOLFNBQUE0MEIsR0FBQXY3QyxHQUFlLElBQUF5RyxFQUFBLDhCQUFBd2tDLEtBQUEsWUFBcUR4a0MsR0FBQWl3QyxLQUFBandDLEVBQUFpd0MsR0FBQSxHQUFnQjN5QyxLQUFBZzNDLGdCQUFBckUsR0FBQWp3QyxFQUEwQjFDLEtBQUF5M0MsTUFBQXg3QyxFQUFhK0QsS0FBQTAzQyxXQUFBMTNDLEtBQUEyM0MsTUFBQSxLQUFnQzMzQyxLQUFBNDNDLGFBQUE1M0MsS0FBQTYzQyxjQUFBLEVBQXVDNzNDLEtBQUE4M0MsVUFBQSxLQUFvQjkzQyxLQUFBaTNDLFFBQUEsRUFHdkMsU0FBQWMsS0FBYy8zQyxLQUFBMDNDLFdBQUEsS0FBcUIxM0MsS0FBQWc0QyxZQUFBLEVBQW1CaDRDLEtBQUFpNEMsVUFBQWo0QyxLQUFBaTRDLFVBQUE5K0MsS0FBQTZHLE1BRXJPLFNBQUFrNEMsR0FBQWo4QyxFQUFBeUcsRUFBQTFLLEdBQTBDaUUsRUFBQSxDQUFHcWdCLFFBQTFCNVosRUFBQThaLEdBQUEsWUFBQTlaLEVBQUEsS0FBMEIwMkIsY0FBQW45QixFQUFBK3BDLGdCQUFBLEtBQUF5TyxVQUFBLEtBQUFyTyxvQkFBQSxFQUFBQyxrQkFBQSxFQUFBSSxzQkFBQSxFQUFBQyxvQkFBQSxFQUFBRixpQkFBQSxFQUFBTCxVQUFBLEVBQUF1Tiw0QkFBQSxFQUFBTSxhQUFBLEtBQUFzQyxlQUFBLEVBQUF6NkIsUUFBQSxLQUFBbXlCLGVBQUEsS0FBQVMsUUFBQXoyQyxFQUFBNHVDLDJCQUFBLEVBQUFwQixlQUFBLEVBQUF1UixXQUFBLEtBQUFOLGtCQUFBLE1BQXVYejJDLEtBQUFtNEMsY0FBQXoxQyxFQUFBa2dCLFVBQUEzbUIsRUFFckssU0FBQW04QyxHQUFBbjhDLEdBQWUsU0FBQUEsR0FBQSxJQUFBQSxFQUFBNHVCLFVBQUEsSUFBQTV1QixFQUFBNHVCLFVBQUEsS0FBQTV1QixFQUFBNHVCLFdBQUEsSUFBQTV1QixFQUFBNHVCLFVBQUEsaUNBQUE1dUIsRUFBQXVpQyxZQUU5USxTQUFBNlosR0FBQXA4QyxFQUFBeUcsRUFBQTFLLEVBQUFDLEVBQUF3RSxHQUF1QixJQUFBSCxFQUFBdEUsRUFBQXU1QyxvQkFBNEIsR0FBQWoxQyxFQUFBLENBQU0sc0JBQUFHLEVBQUEsQ0FBMEIsSUFBQTZTLEVBQUE3UyxFQUFRQSxFQUFBLFdBQWEsSUFBQVIsRUFBQXM3QyxHQUFBajdDLEVBQUE2N0MsZUFBMEI3b0MsRUFBQXhYLEtBQUFtRSxJQUFXLE1BQUFBLEVBQUFLLEVBQUFnOEMsa0NBQUFyOEMsRUFBQXlHLEVBQUFqRyxHQUFBSCxFQUFBeVIsT0FBQXJMLEVBQUFqRyxPQUFpRSxDQUFxQyxHQUFoQ0gsRUFBQXRFLEVBQUF1NUMsb0JBRG5OLFNBQUF0MUMsRUFBQXlHLEdBQXdJLEdBQXZIQSxZQUFBekcsRUFBQSxJQUFBQSxFQUFBNHVCLFNBQUE1dUIsRUFBQTZULGdCQUFBN1QsRUFBQXdiLFdBQUEsV0FBQS9VLEVBQUFtb0IsV0FBQW5vQixFQUFBNjFDLGFBQUEscUJBQXVINzFDLEVBQUEsUUFBQTFLLEVBQWdCQSxFQUFBaUUsRUFBQXNpQyxXQUFjdGlDLEVBQUFrVyxZQUFBbmEsR0FBa0IsV0FBQWtnRCxHQUFBajhDLEdBQUEsRUFBQXlHLEdBQzJCODFDLENBQUF4Z0QsRUFBQUMsR0FBZ0MsbUJBQUF3RSxFQUFBLENBQTBCLElBQUE2ZSxFQUFBN2UsRUFBUUEsRUFBQSxXQUFhLElBQUFSLEVBQUFzN0MsR0FBQWo3QyxFQUFBNjdDLGVBQTBCNzhCLEVBQUF4akIsS0FBQW1FLElBQVdrN0MsR0FBQSxXQUFjLE1BQUFsN0MsRUFBQUssRUFBQWc4QyxrQ0FBQXI4QyxFQUFBeUcsRUFBQWpHLEdBQUFILEVBQUF5UixPQUFBckwsRUFBQWpHLEtBQW1FLE9BQUE4NkMsR0FBQWo3QyxFQUFBNjdDLGVBQ3haLFNBQUFNLEdBQUF4OEMsRUFBQXlHLEdBQWlCLElBQUExSyxFQUFBLEVBQUFtRyxVQUFBb0IsYUFBQSxJQUFBcEIsVUFBQSxHQUFBQSxVQUFBLFFBQXdGLE9BQXRCaTZDLEdBQUExMUMsSUFBQXNZLEVBQUEsT0FaK0osU0FBQS9lLEVBQUF5RyxFQUFBMUssR0FBbUIsSUFBQUMsRUFBQSxFQUFBa0csVUFBQW9CLGFBQUEsSUFBQXBCLFVBQUEsR0FBQUEsVUFBQSxRQUFrRSxPQUFPcVAsU0FBQW1lLEdBQUF6eUIsSUFBQSxNQUFBakIsRUFBQSxRQUFBQSxFQUFBNmtCLFNBQUE3Z0IsRUFBQW05QixjQUFBMTJCLEVBQUF1akMsZUFBQWp1QyxHQVlyTzBnRCxDQUFBejhDLEVBQUF5RyxFQUFBLEtBQUExSyxHQVh6RzZ3QixHQUFBLFNBQUE1c0IsRUFBQXlHLEVBQUExSyxHQUFtQixPQUFBMEssR0FBVSxZQUE4QixHQUE5QityQixHQUFBeHlCLEVBQUFqRSxHQUFxQjBLLEVBQUExSyxFQUFBRSxLQUFTLFVBQUFGLEVBQUFvQyxNQUFBLE1BQUFzSSxFQUFBLENBQThCLElBQUExSyxFQUFBaUUsRUFBUWpFLEVBQUE0ZixZQUFhNWYsSUFBQTRmLFdBQTJGLElBQTNFNWYsSUFBQTJnRCxpQkFBQSxjQUFBOXZDLEtBQUFFLFVBQUEsR0FBQXJHLEdBQUEsbUJBQTJFQSxFQUFBLEVBQVFBLEVBQUExSyxFQUFBdUgsT0FBV21ELElBQUEsQ0FBSyxJQUFBekssRUFBQUQsRUFBQTBLLEdBQVcsR0FBQXpLLElBQUFnRSxHQUFBaEUsRUFBQTJnRCxPQUFBMzhDLEVBQUEyOEMsS0FBQSxDQUEyQixJQUFBbjhDLEVBQUE0bUIsRUFBQXByQixHQUFZd0UsR0FBQXVlLEVBQUEsTUFBaUJzUSxHQUFBcnpCLEdBQU13MkIsR0FBQXgyQixFQUFBd0UsS0FBVSxNQUFNLGVBQUEyZ0MsR0FBQW5oQyxFQUFBakUsR0FBd0IsTUFBTSxvQkFBQTBLLEVBQUExSyxFQUFBWSxRQUFBa2tDLEdBQUE3Z0MsSUFBQWpFLEVBQUEwNUMsU0FBQWh2QyxHQUFBLEtBQ25IODBDLEdBQUFqK0MsVUFBQXdVLE9BQUEsU0FBQTlSLEdBQWdDK0QsS0FBQWkzQyxRQUFBajhCLEVBQUEsT0FBNEJoYixLQUFBNDNDLGNBQUEsRUFBcUI1M0MsS0FBQTgzQyxVQUFBNzdDLEVBQWlCLElBQUF5RyxFQUFBMUMsS0FBQXkzQyxNQUFBVSxjQUFBbmdELEVBQUFnSSxLQUFBZzNDLGdCQUFBLytDLEVBQUEsSUFBQTgvQyxHQUEwRixPQUEzQlYsR0FBQXA3QyxFQUFBeUcsRUFBQSxLQUFBMUssRUFBQUMsRUFBQWdnRCxXQUEyQmhnRCxHQUNqYXUvQyxHQUFBaitDLFVBQUErMEMsS0FBQSxTQUFBcnlDLEdBQThCLEdBQUErRCxLQUFBNjNDLGFBQUE1N0MsUUFBeUIsQ0FBSyxJQUFBeUcsRUFBQTFDLEtBQUEwM0MsV0FBc0IsT0FBQWgxQyxNQUFBMUMsS0FBQTAzQyxXQUFBLElBQWlDaDFDLEVBQUExRCxLQUFBL0MsS0FDbkh1N0MsR0FBQWorQyxVQUFBcy9DLE9BQUEsV0FBK0IsSUFBQTU4QyxFQUFBK0QsS0FBQXkzQyxNQUFBVSxjQUFBejFDLEVBQUF6RyxFQUFBODZDLFdBQW9GLEdBQXRDLzJDLEtBQUFpM0MsUUFBQSxPQUFBdjBDLEdBQUFzWSxFQUFBLE9BQXNDaGIsS0FBQTQzQyxhQUFBLENBQXNCLElBQUE1L0MsRUFBQWdJLEtBQUFnM0MsZ0JBQTJCLEdBQUF0MEMsSUFBQTFDLEtBQUEsQ0FBYUEsS0FBQTQzQyxlQUFBNS9DLEVBQUFnSSxLQUFBZzNDLGdCQUFBdDBDLEVBQUFzMEMsZ0JBQUFoM0MsS0FBQStOLE9BQUEvTixLQUFBODNDLFlBQTBGLFFBQUE3L0MsRUFBQSxLQUFBd0UsRUFBQWlHLEVBQW1CakcsSUFBQXVELE1BQVMvSCxFQUFBd0UsTUFBQWs3QyxNQUFlLE9BQUExL0MsR0FBQStpQixFQUFBLE9BQXlCL2lCLEVBQUEwL0MsTUFBQWw3QyxFQUFBazdDLE1BQWdCMzNDLEtBQUEyM0MsTUFBQWoxQyxFQUFhekcsRUFBQTg2QyxXQUFBLzJDLEtBQWtCQSxLQUFBaTNDLFFBQUEsRUFBZVYsR0FBQXQ2QyxFQUFBakUsR0FBUTBLLEVBQUExQyxLQUFBMjNDLE1BQWEzM0MsS0FBQTIzQyxNQUFBLEtBQWlDLFFBQWpCajFDLEVBQUF6RyxFQUFBODZDLFdBQUFyMEMsSUFBaUJBLEVBQUFrMUMsY0FBQWwxQyxFQUFBcUwsT0FBQXJMLEVBQUFvMUMsZ0JBQWdEOTNDLEtBQUEyM0MsTUFDbmYsS0FBQTMzQyxLQUFBaTNDLFFBQUEsR0FBcUJPLEdBQUFqK0MsVUFBQXM5QyxZQUFBLFdBQW9DLElBQUE3MkMsS0FBQTYzQyxhQUFBLENBQXVCNzNDLEtBQUE2M0MsY0FBQSxFQUFxQixJQUFBNTdDLEVBQUErRCxLQUFBMDNDLFdBQXNCLFVBQUF6N0MsRUFBQSxRQUFBeUcsRUFBQSxFQUF3QkEsRUFBQXpHLEVBQUFzRCxPQUFXbUQsS0FBQSxFQUFBekcsRUFBQXlHLFFBQWdIcTFDLEdBQUF4K0MsVUFBQSswQyxLQUFBLFNBQUFyeUMsR0FBOEIsR0FBQStELEtBQUFnNEMsV0FBQS83QyxRQUF1QixDQUFLLElBQUF5RyxFQUFBMUMsS0FBQTAzQyxXQUFzQixPQUFBaDFDLE1BQUExQyxLQUFBMDNDLFdBQUEsSUFBaUNoMUMsRUFBQTFELEtBQUEvQyxLQUMvWDg3QyxHQUFBeCtDLFVBQUEwK0MsVUFBQSxXQUFrQyxJQUFBajRDLEtBQUFnNEMsV0FBQSxDQUFxQmg0QyxLQUFBZzRDLFlBQUEsRUFBbUIsSUFBQS83QyxFQUFBK0QsS0FBQTAzQyxXQUFzQixVQUFBejdDLEVBQUEsUUFBQXlHLEVBQUEsRUFBd0JBLEVBQUF6RyxFQUFBc0QsT0FBV21ELElBQUEsQ0FBSyxJQUFBMUssRUFBQWlFLEVBQUF5RyxHQUFXLG1CQUFBMUssR0FBQWdqQixFQUFBLE1BQUFoakIsR0FBd0NBLE9BRTNMa2dELEdBQUEzK0MsVUFBQXdVLE9BQUEsU0FBQTlSLEVBQUF5RyxHQUFrQyxJQUFBMUssRUFBQWdJLEtBQUFtNEMsY0FBQWxnRCxFQUFBLElBQUE4L0MsR0FBbUcsT0FBN0MsUUFBcEJyMUMsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CekssRUFBQXEyQyxLQUFBNXJDLEdBQW9CNDBDLEdBQUFyN0MsRUFBQWpFLEVBQUEsS0FBQUMsRUFBQWdnRCxXQUF5QmhnRCxHQUFVaWdELEdBQUEzK0MsVUFBQXUvQyxRQUFBLFNBQUE3OEMsR0FBaUMsSUFBQXlHLEVBQUExQyxLQUFBbTRDLGNBQUFuZ0QsRUFBQSxJQUFBKy9DLEdBQXNHLE9BQWhELFFBQXBCOTdDLE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxJQUFvQmpFLEVBQUFzMkMsS0FBQXJ5QyxHQUFvQnE3QyxHQUFBLEtBQUE1MEMsRUFBQSxLQUFBMUssRUFBQWlnRCxXQUE0QmpnRCxHQUFVa2dELEdBQUEzK0MsVUFBQSsrQyxrQ0FBQSxTQUFBcjhDLEVBQUF5RyxFQUFBMUssR0FBK0QsSUFBQUMsRUFBQStILEtBQUFtNEMsY0FBQTE3QyxFQUFBLElBQUFzN0MsR0FBZ0csT0FBMUMsUUFBcEIvL0MsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CeUUsRUFBQTZ4QyxLQUFBdDJDLEdBQW9Ccy9DLEdBQUE1MEMsRUFBQXpLLEVBQUFnRSxFQUFBUSxFQUFBdzdDLFdBQXNCeDdDLEdBQy9ieTdDLEdBQUEzK0MsVUFBQXcvQyxZQUFBLFdBQW9DLElBQUE5OEMsRUFBQSxJQUFBdTdDLEdBQUF4M0MsTUFBQTBDLEVBQUF6RyxFQUFBKzZDLGdCQUFBaC9DLEVBQUFnSSxLQUFBbTRDLGNBQUFsZ0QsRUFBQUQsRUFBQSsrQyxXQUEyRSxVQUFBOStDLEVBQUFELEVBQUErK0MsV0FBQTk2QyxJQUFBMDdDLE1BQUEsU0FBd0MsQ0FBSyxJQUFBMy9DLEVBQUEsS0FBVyxPQUFBQyxLQUFBKytDLGlCQUFBdDBDLEdBQStCMUssRUFBQUMsTUFBQTAvQyxNQUFlMTdDLEVBQUEwN0MsTUFBQTEvQyxFQUFVLE9BQUFELE1BQUEyL0MsTUFBQTE3QyxHQUFzQixPQUFBQSxHQUFzSmt0QixHQUFBK3RCLEdBQU05dEIsR0FBQWd1QixHQUFNL3RCLEdBQUEsV0FBYzd0QixJQUFBLElBQUF5NUMsS0FBQXBCLEdBQUFvQixJQUFBLEdBQUFBLEdBQUEsSUFJcmEsSUFHQWg1QyxHQUFheUcsR0FIYnMyQyxHQUFBLENBQVFDLGFBQUFSLEdBQUFTLFlBQUEsU0FBQWo5QyxHQUF3QyxTQUFBQSxFQUFBLFlBQXVCLE9BQUFBLEVBQUE0dUIsU0FBQSxPQUFBNXVCLEVBQTJCLElBQUF5RyxFQUFBekcsRUFBQWdyQyxvQkFBNEksWUFBaEgsSUFBQXZrQyxJQUFBLG1CQUFBekcsRUFBQThSLE9BQUFpTixFQUFBLE9BQUFBLEVBQUEsTUFBQTNpQixPQUFBaUksS0FBQXJFLEtBQW9GQSxFQUFBLFFBQVJBLEVBQUF1M0IsR0FBQTl3QixJQUFRLEtBQUF6RyxFQUFBMm1CLFdBQXFDNnJCLFFBQUEsU0FBQXh5QyxFQUFBeUcsRUFBQTFLLEdBQStDLE9BQXRCb2dELEdBQUExMUMsSUFBQXNZLEVBQUEsT0FBc0JxOUIsR0FBQSxLQUFBcDhDLEVBQUF5RyxHQUFBLEVBQUExSyxJQUF5QitWLE9BQUEsU0FBQTlSLEVBQUF5RyxFQUFBMUssR0FBOEMsT0FBdEJvZ0QsR0FBQTExQyxJQUFBc1ksRUFBQSxPQUFzQnE5QixHQUFBLEtBQUFwOEMsRUFBQXlHLEdBQUEsRUFBQTFLLElBQXlCbWhELG9DQUFBLFNBQUFsOUMsRUFBQXlHLEVBQUExSyxFQUFBQyxHQUN2WCxPQUQ4YW1nRCxHQUFBcGdELElBQUFnakIsRUFBQSxRQUFzQixNQUFBL2UsUUFBQSxJQUFBQSxFQUFBZ3JDLHNCQUNuZGpzQixFQUFBLE1BQWVxOUIsR0FBQXA4QyxFQUFBeUcsRUFBQTFLLEdBQUEsRUFBQUMsSUFBc0JtaEQsdUJBQUEsU0FBQW45QyxHQUF5RCxPQUFyQm04QyxHQUFBbjhDLElBQUErZSxFQUFBLFFBQXFCL2UsRUFBQXMxQyxzQkFBQTRGLEdBQUEsV0FBNENrQixHQUFBLFVBQUFwOEMsR0FBQSxhQUE2QkEsRUFBQXMxQyxvQkFBQSxVQUE2QixJQUFTOEgsc0JBQUEsV0FBa0MsT0FBQVosR0FBQW4zQyxXQUFBLEVBQUFuRCxZQUFrQ203Qyx3QkFBQXBDLEdBQUFxQyw0QkFBQW5DLEdBQUFvQyxVQUFBLFNBQUF2OUMsRUFBQXlHLEdBQW1GbEgsSUFBQXdmLEVBQUEsT0FBa0IsSUFBQWhqQixFQUFBNmxCLEdBQVFBLElBQUEsRUFBSyxJQUFJLE9BQUF1M0IsR0FBQW41QyxFQUFBeUcsR0FBZSxRQUFRbWIsR0FBQTdsQixFQUFBNjdDLEdBQUEsaUJBQXVCNEYsb0JBQ2xQLFNBQUF4OUMsRUFBQXlHLEdBQTZELE9BQTVDMDFDLEdBQUFuOEMsSUFBQStlLEVBQUEsNkJBQTRDLElBQUFrOUIsR0FBQWo4QyxHQUFBLFFBQUF5RyxJQUFBLElBQUFBLEVBQUErckMsVUFEcUxpTCx5QkFBQSxTQUFBejlDLEdBQTZELElBQUF5RyxFQUNsZm1iLEdBQUVBLElBQUEsRUFBSyxJQUFJdTNCLEdBQUFuNUMsR0FBTSxTQUFRNGhCLEdBQUFuYixJQUFBbEgsSUFBQXE0QyxHQUFBLGlCQUE2QjF6QixtREFBQSxDQUFxRHc1QixPQUFBLENBQUF4MkIsRUFBQUMsRUFBQUMsRUFBQWIsRUFBQUUseUJBQUF4QixFQUFBNEMsRUFBQSxTQUFBN25CLEdBQStEK2xCLEVBQUEvbEIsRUFBQTRuQixJQUFTb0YsR0FBQUMsR0FBQXNRLEdBQUExVyxLQUN0S3BnQixJQUFiekcsR0FBMFEsQ0FBRzI5Qyx3QkFBQTEyQixFQUFBMjJCLFdBQUEsRUFBQW4yQyxRQUFBLFNBQUFvMkMsb0JBQUEsY0FBaFFGLHdCQXhKYixTQUFBMzlDLEdBQWUsdUJBQUE4SiwrQkFBQSxTQUFnRSxJQUFBckQsRUFBQXFELCtCQUFxQyxHQUFBckQsRUFBQXEzQyxhQUFBcjNDLEVBQUFzM0MsY0FBQSxTQUEyQyxJQUFJLElBQUFoaUQsRUFBQTBLLEVBQUF1M0MsT0FBQWgrQyxHQUFrQnlvQyxHQUFBRSxHQUFBLFNBQUEzb0MsR0FBa0IsT0FBQXlHLEVBQUF3M0Msa0JBQUFsaUQsRUFBQWlFLEtBQWtDMG9DLEdBQUFDLEdBQUEsU0FBQTNvQyxHQUFrQixPQUFBeUcsRUFBQXkzQyxxQkFBQW5pRCxFQUFBaUUsS0FBcUMsTUFBQWhFLEtBd0puUG1pRCxDQUFBaGhELEVBQUEsR0FBYzZDLEdBQUEsQ0FBSW8rQyxjQUFBLEtBQUFDLHFCQUFBOXVCLEdBQUFwTCx1QkFBQW02Qix3QkFBQSxTQUFBdCtDLEdBQThHLGVBQVJBLEVBQUF1M0IsR0FBQXYzQixJQUFRLEtBQUFBLEVBQUEybUIsV0FBaUNnM0Isd0JBQUEsU0FBQTM5QyxHQUFxQyxPQUFBeUcsTUFBQXpHLEdBQUEsU0FBcUgsSUFBQXUrQyxHQUFBLENBQVEvaEMsUUFBQXVnQyxJQUFXeUIsR0FBQUQsSUFBQXhCLElBQUF3QixHQUFlOWlELEVBQUFELFFBQUFnakQsR0FBQWhpQyxTQUFBZ2lDLGlDQ3pRMVkvaUQsRUFBQUQsUUFBbUJGLEVBQVEsbUNDSDNCLFNBQUF1Qzs7Ozs7Ozs7O0FBU2F6QixPQUFBQyxlQUFBYixFQUFBLGNBQTRDbUIsT0FBQSxJQUFXLElBQUFYLEVBQUEsS0FBQXdFLEdBQUEsRUFBQTZTLEVBQUEsRUFBQXRFLEdBQUEsRUFBQXBULEdBQUEsRUFBQUcsR0FBQSxFQUFBcUIsR0FBQSxFQUF3QyxTQUFBSyxJQUFhLElBQUExQixFQUFBLENBQU8sSUFBQWtFLEVBQUFoRSxFQUFBdXRDLGVBQXVCcHNDLEVBQUF3aEIsSUFBQXhoQixHQUFBLEVBQVdYLEVBQUFJLEVBQUFvRCxJQUNsSyxTQUFBNGUsSUFBYSxJQUFBNWUsRUFBQWhFLEVBQUF5SyxFQUFBekssRUFBQTZILEtBQWlCLEdBQUE3SCxJQUFBeUssRUFBQXpLLEVBQUEsU0FBZ0IsQ0FBSyxJQUFBRCxFQUFBQyxFQUFBeWlELFNBQWlCemlELEVBQUFELEVBQUE4SCxLQUFBNEMsRUFBV0EsRUFBQWc0QyxTQUFBMWlELEVBQWFpRSxFQUFBNkQsS0FBQTdELEVBQUF5K0MsU0FBQSxLQUF1QjFpRCxFQUFBaUUsRUFBQXFyQyxTQUFhNWtDLEVBQUF6RyxFQUFBdXBDLGVBQW1CdnBDLElBQUEwK0MsY0FBa0IsSUFBQXIrQyxFQUFBZ1QsRUFBQTJOLEVBQUFybEIsRUFBWTBYLEVBQUFyVCxFQUFJckUsRUFBQThLLEVBQUksSUFBSSxJQUFBNFksRUFBQXRqQixJQUFVLFFBQVFzWCxFQUFBaFQsRUFBQTFFLEVBQUFxbEIsRUFBUSxzQkFBQTNCLEVBQUEsR0FBQUEsRUFBQSxDQUErQmdzQixTQUFBaHNCLEVBQUFxL0IsY0FBQTErQyxFQUFBdXBDLGVBQUE5aUMsRUFBQTVDLEtBQUEsS0FBQTQ2QyxTQUFBLE1BQW9FLE9BQUF6aUQsSUFBQXFqQixFQUFBeGIsS0FBQXdiLEVBQUFvL0IsU0FBQXAvQixNQUFnQyxDQUFLdGpCLEVBQUEsS0FBT2lFLEVBQUFoRSxFQUFJLEdBQUcsR0FBQWdFLEVBQUF1cEMsZ0JBQUE5aUMsRUFBQSxDQUF3QjFLLEVBQUFpRSxFQUFJLE1BQU1BLElBQUE2RCxXQUFTN0QsSUFBQWhFLEdBQWEsT0FBQUQsSUFBQUMsRUFBQUQsSUFBQUMsTUFBQXFqQixFQUFBN2hCLE1BQThCaUosRUFBQTFLLEVBQUEwaUQsVUFBYTU2QyxLQUFBOUgsRUFBQTBpRCxTQUFBcC9CLEVBQW9CQSxFQUFBeGIsS0FBQTlILEVBQVNzakIsRUFBQW8vQixTQUM3ZWg0QyxHQUFHLFNBQUFvWSxJQUFhLFFBQUE5UCxHQUFBLE9BQUEvUyxHQUFBLElBQUFBLEVBQUEwaUQsY0FBQSxDQUEwQzVpRCxHQUFBLEVBQUssSUFBSSxHQUFBOGlCLFVBQU8sT0FBQTVpQixHQUFBLElBQUFBLEVBQUEwaUQsZUFBcUMsUUFBUTVpRCxHQUFBLFNBQUFFLEVBQUF3QixJQUFBTCxHQUFBLElBQXlCLFNBQUFQLEVBQUFvRCxHQUFjbEUsR0FBQSxFQUFLLElBQUEySyxFQUFBakcsRUFBUUEsRUFBQVIsRUFBSSxJQUFJLEdBQUFBLEVBQUEsS0FBVSxPQUFBaEUsR0FBUyxDQUFFLElBQUFELEVBQUFQLEVBQUFxK0MsZUFBNkIsS0FBQTc5QyxFQUFBdXRDLGdCQUFBeHRDLEdBQW9FLE1BQTVDLEdBQUE2aUIsVUFBTyxPQUFBNWlCLEtBQUF1dEMsZ0JBQUF4dEMsUUFBZ0QsVUFBQUMsRUFBa0IsR0FBQTRpQixVQUFPLE9BQUE1aUIsSUFBQThpQixLQUF1QixRQUFRaGpCLEdBQUEsRUFBQTBFLEVBQUFpRyxFQUFBLE9BQUF6SyxFQUFBd0IsSUFBQUwsR0FBQSxFQUFBMGhCLEtBQzVXLElBQUF0SSxFQUFBNUksRUFBQW9SLEVBQUEyTCxLQUFBMUwsRUFBQSxtQkFBQTdJLDJCQUFBLEVBQUE4SSxFQUFBLG1CQUFBaW9CLCtCQUFBLEVBQUE5bkIsRUFBQSxtQkFBQXUvQixpREFBQSxFQUFBMS9DLEVBQUEsbUJBQUEyL0MsK0NBQUEsRUFBeVEsU0FBQXh3QyxFQUFBcE8sR0FBY3VXLEVBQUE2SSxFQUFBLFNBQUEzWSxHQUFnQndZLEVBQUF0UixHQUFLM04sRUFBQXlHLEtBQU9rSCxFQUFBcVIsRUFBQSxXQUFlL2YsRUFBQXNYLEdBQUt2VyxFQUFBeEUsRUFBQXErQyxpQkFBMEIsS0FDalcsb0JBQUFnRixhQUFBLG1CQUFBQSxZQUFBbHBDLElBQUEsQ0FBdUUsSUFBQWxYLEVBQUFvZ0QsWUFBa0JyakQsRUFBQXErQyxhQUFBLFdBQWdDLE9BQUFwN0MsRUFBQWtYLFlBQWdCbmEsRUFBQXErQyxhQUFBLFdBQXFDLE9BQUE5NkIsRUFBQXBKLE9BQWdCLElBQUFuWixFQUFBbWlCLEVBQUFHLEVBQUFuZ0IsRUFBQSxLQUM5TCxHQUQrTSxvQkFBQWMsT0FBQWQsRUFBQWMsWUFBQSxJQUFBNUIsSUFBQWMsRUFBQWQsR0FDL01jLEtBQUFtZ0QsV0FBQSxDQUFvQixJQUFBNytCLEVBQUF0aEIsRUFBQW1nRCxXQUFtQnRpRCxFQUFBeWpCLEVBQUEsR0FBT3RCLEVBQUFzQixFQUFBLEdBQU9uQixFQUFBbUIsRUFBQSxHQUFPemtCLEVBQUFxK0MsYUFBQTU1QixFQUFBLFFBQTBCLHVCQUFBeGdCLFFBQUEsbUJBQUEwVixlQUFBLENBQXlFLElBQUFpTCxFQUFBLEtBQUFFLEVBQUEsU0FBQXRnQixHQUF5QixVQUFBb2dCLEVBQUEsSUFBZ0JBLEVBQUFwZ0IsR0FBSyxRQUFRb2dCLEVBQUEsT0FBUzVqQixFQUFBLFNBQUF3RCxHQUFjLE9BQUFvZ0IsRUFBQWpLLFdBQUEzWixFQUFBLEVBQUF3RCxJQUFBb2dCLEVBQUFwZ0IsRUFBQW1XLFdBQUFtSyxFQUFBLFFBQXFEM0IsRUFBQSxXQUFheUIsRUFBQSxNQUFRdEIsRUFBQSxXQUFhLGNBQVUsQ0FBSyxvQkFBQTlVLFVBQUEsbUJBQUFvVixHQUFBcFYsUUFBQTlDLE1BQUEsMklBQ2xWLG1CQUFBakksR0FBQStLLFFBQUE5QyxNQUFBLDJJQUFnTCxJQUFBcVosRUFBQSxLQUFBQyxHQUFBLEVBQUFJLEdBQUEsRUFBQUcsR0FBQSxFQUFBemdCLEdBQUEsRUFBQXZCLEVBQUEsRUFBQVMsRUFBQSxHQUFBWCxFQUFBLEdBQTZDaWdCLEVBQUEsV0FBYSxPQUFBL2YsR0FBQXZELEVBQUFxK0MsZ0JBQWtDLElBQUFud0MsRUFBQSxJQUFBeUwsZUFBQTdWLEVBQUFvSyxFQUFBa00sTUFBbUNsTSxFQUFBbU0sTUFBQUMsVUFBQSxXQUE2QjBLLEdBQUEsRUFBSyxJQUFBeGdCLEVBQUF1Z0IsRUFBQTlaLEVBQUFtYSxFQUFZTCxFQUFBLEtBQU9LLEdBQUEsRUFBSyxJQUFBN2tCLEVBQUFQLEVBQUFxK0MsZUFBQXg1QyxHQUFBLEVBQWtDLE1BQUF0QixFQUFBaEQsRUFBQSxXQUFBMEssTUFBQTFLLEdBQTJELE9BQXZCZ2xCLE9BQUEsRUFBQTNTLEVBQUFzVCxJQUFlbkIsRUFBQXZnQixPQUFJNGdCLEVBQUFuYSxHQUF2RHBHLEdBQUEsRUFBa0UsVUFBQUwsRUFBQSxDQUFhTSxHQUFBLEVBQUssSUFBSU4sRUFBQUssR0FBSyxRQUFRQyxHQUFBLEtBQ2hmLElBQUFvaEIsRUFBQSxTQUFBMWhCLEdBQWtCLFVBQUF1Z0IsRUFBQSxDQUFhblMsRUFBQXNULEdBQUssSUFBQWpiLEVBQUF6RyxFQUFBakIsRUFBQUYsRUFBWTRILEVBQUE1SCxHQUFBVyxFQUFBWCxHQUFBLEVBQUE0SCxNQUFBLEdBQUE1SCxFQUFBNEgsRUFBQWpILElBQUFpSCxHQUFBakgsRUFBQWlILEVBQW9DMUgsRUFBQWlCLEVBQUFuQixFQUFNMmhCLE9BQUEsRUFBQWxoQixFQUFBeVcsaUJBQUEsU0FBZ0NnTCxHQUFBLEdBQVd2a0IsRUFBQSxTQUFBd0QsRUFBQXlHLEdBQWdCOFosRUFBQXZnQixFQUFJNGdCLEVBQUFuYSxFQUFJbkcsR0FBQSxFQUFBbUcsRUFBQW5ILEVBQUF5VyxpQkFBQSxHQUFBZ0wsT0FBQSxFQUFBM1MsRUFBQXNULEtBQTZDL0MsRUFBQSxXQUFhNEIsRUFBQSxLQUFPQyxHQUFBLEVBQUtJLEdBQUEsR0FBTXBsQixFQUFBbzlDLDJCQUFBLEVBQXFDcDlDLEVBQUFxOUMsOEJBQUEsRUFBd0NyOUMsRUFBQXM4Qyx3QkFBQSxFQUFrQ3Q4QyxFQUFBdTlDLHNCQUFBLEVBQWdDdjlDLEVBQUFzOUMscUJBQUEsRUFDeFh0OUMsRUFBQXE4Qyx5QkFBQSxTQUFBNzNDLEVBQUF5RyxHQUErQyxPQUFBekcsR0FBVSx5Q0FBeUMsUUFBQUEsRUFBQSxFQUFZLElBQUFqRSxFQUFBc1gsRUFBQWhULEVBQUEwTyxFQUFZc0UsRUFBQXJULEVBQUkrTyxFQUFBdlQsRUFBQXErQyxlQUF5QixJQUFJLE9BQUFwekMsSUFBVyxRQUFRNE0sRUFBQXRYLEVBQUFnVCxFQUFBMU8sRUFBQXdlLE1BQWNyakIsRUFBQXVqRCxjQUFBLFNBQUEvK0MsR0FBa0MsT0FBQXFULEdBQVUseUJBQUE1TSxFQUFBLEVBQTZCLE1BQU0sUUFBQUEsRUFBQTRNLEVBQVksSUFBQXRYLEVBQUFzWCxFQUFBaFQsRUFBQTBPLEVBQVlzRSxFQUFBNU0sRUFBSXNJLEVBQUF2VCxFQUFBcStDLGVBQXlCLElBQUksT0FBQTc1QyxJQUFXLFFBQVFxVCxFQUFBdFgsRUFBQWdULEVBQUExTyxFQUFBd2UsTUFDdlZyakIsRUFBQTRyQywwQkFBQSxTQUFBcG5DLEVBQUF5RyxHQUFnRCxJQUFBMUssR0FBQSxJQUFBZ1QsSUFBQXZULEVBQUFxK0MsZUFBc0Msb0JBQUFwekMsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQSxFQUFBMnpDLFFBQUEzekMsRUFBQTFLLEVBQUEwSyxFQUFBMnpDLGFBQTRFLE9BQUEvbUMsR0FBZSxPQUFBNU0sRUFBQTFLLEdBQUEsRUFBYyxNQUFNLE9BQUEwSyxFQUFBMUssRUFBQSxJQUFlLE1BQU0sT0FBQTBLLEVBQUExSyxFQUFBLFdBQXNCLE1BQU0sT0FBQTBLLEVBQUExSyxFQUFBLElBQWUsTUFBTSxRQUFBMEssRUFBQTFLLEVBQUEsSUFBd0YsR0FBeEVpRSxFQUFBLENBQUdxckMsU0FBQXJyQyxFQUFBMCtDLGNBQUFyckMsRUFBQWsyQixlQUFBOWlDLEVBQUE1QyxLQUFBLEtBQUE0NkMsU0FBQSxNQUFxRSxPQUFBemlELElBQUFnRSxFQUFBNkQsS0FBQTdELEVBQUF5K0MsU0FBQXorQyxFQUFBeEMsUUFBc0MsQ0FBS3pCLEVBQUEsS0FBTyxJQUFBc0UsRUFBQXJFLEVBQVEsR0FBRyxHQUFBcUUsRUFBQWtwQyxlQUFBOWlDLEVBQUEsQ0FBdUIxSyxFQUFBc0UsRUFBSSxNQUFNQSxJQUFBd0QsV0FBU3hELElBQUFyRSxHQUFhLE9BQUFELElBQUFDLEVBQUFELElBQUFDLE1BQUFnRSxFQUFBeEMsTUFDdmRpSixFQUFBMUssRUFBQTBpRCxVQUFhNTZDLEtBQUE5SCxFQUFBMGlELFNBQUF6K0MsRUFBb0JBLEVBQUE2RCxLQUFBOUgsRUFBU2lFLEVBQUF5K0MsU0FBQWg0QyxFQUFhLE9BQUF6RyxHQUFVeEUsRUFBQThyQyx3QkFBQSxTQUFBdG5DLEdBQTRDLElBQUF5RyxFQUFBekcsRUFBQTZELEtBQWEsVUFBQTRDLEVBQUEsQ0FBYSxHQUFBQSxJQUFBekcsRUFBQWhFLEVBQUEsU0FBZ0IsQ0FBS2dFLElBQUFoRSxNQUFBeUssR0FBYSxJQUFBMUssRUFBQWlFLEVBQUF5K0MsU0FBaUIxaUQsRUFBQThILEtBQUE0QyxFQUFTQSxFQUFBZzRDLFNBQUExaUQsRUFBYWlFLEVBQUE2RCxLQUFBN0QsRUFBQXkrQyxTQUFBLE9BQXlCampELEVBQUF3akQsc0JBQUEsU0FBQWgvQyxHQUEwQyxJQUFBeUcsRUFBQTRNLEVBQVEsa0JBQWtCLElBQUF0WCxFQUFBc1gsRUFBQWhULEVBQUEwTyxFQUFZc0UsRUFBQTVNLEVBQUlzSSxFQUFBdlQsRUFBQXErQyxlQUF5QixJQUFJLE9BQUE3NUMsRUFBQXFGLE1BQUF0QixLQUFBN0IsV0FBK0IsUUFBUW1SLEVBQUF0WCxFQUFBZ1QsRUFBQTFPLEVBQUF3ZSxPQUFlcmpCLEVBQUFtOUMsaUNBQUEsV0FBb0QsT0FBQXRsQyxHQUNwYzdYLEVBQUFtL0MscUJBQUEsV0FBd0MsT0FBQW42QyxJQUFBLE9BQUF4RSxLQUFBdXRDLGVBQUE1dEMsR0FBQW1qQixNQUErQ3RqQixFQUFBeWpELDJCQUFBLFdBQThDLE9BQUFqakQsR0FBQXdCLEtBQWVoQyxFQUFBMGpELHdCQUFBLGFBQTZDMWpELEVBQUEyakQsOEJBQUEsV0FBaUQsT0FBQW5qRCxvRENYbFAsSUFBQW9qRCxFQUEyQjlqRCxFQUFRLElBRW5DLFNBQUErakQsS0FDQSxTQUFBQyxLQUNBQSxFQUFBQyxrQkFBQUYsRUFFQTVqRCxFQUFBRCxRQUFBLFdBQ0EsU0FBQWdrRCxFQUFBNy9CLEVBQUE4L0IsRUFBQUMsRUFBQXBrQixFQUFBcWtCLEVBQUFDLEdBQ0EsR0FBQUEsSUFBQVIsRUFBQSxDQUlBLElBQUFyMUMsRUFBQSxJQUFBNUgsTUFDQSxtTEFLQSxNQURBNEgsRUFBQTlOLEtBQUEsc0JBQ0E4TixHQUdBLFNBQUE4MUMsSUFDQSxPQUFBTCxFQUZBQSxFQUFBTSxXQUFBTixFQU1BLElBQUFPLEVBQUEsQ0FDQUMsTUFBQVIsRUFDQVMsS0FBQVQsRUFDQXIrQixLQUFBcStCLEVBQ0ExeEIsT0FBQTB4QixFQUNBcGlELE9BQUFvaUQsRUFDQVUsT0FBQVYsRUFDQVcsT0FBQVgsRUFFQVksSUFBQVosRUFDQWEsUUFBQVIsRUFDQWxnQixRQUFBNmYsRUFDQTNXLFlBQUEyVyxFQUNBYyxXQUFBVCxFQUNBNWhCLEtBQUF1aEIsRUFDQWUsU0FBQVYsRUFDQVcsTUFBQVgsRUFDQVksVUFBQVosRUFDQWEsTUFBQWIsRUFDQWMsTUFBQWQsRUFFQWUsZUFBQXRCLEVBQ0FDLGtCQUFBRixHQUtBLE9BRkFVLEVBQUFjLFVBQUFkLEVBRUFBLGlDQ25EQXRrRCxFQUFBRCxRQUZBOzs7Ozs7OztHQ0FhWSxPQUFBQyxlQUFBYixFQUFBLGNBQTRDbUIsT0FBQSxJQUN6RCxJQUFBOEosRUFBQSxtQkFBQWhLLGVBQUF1UyxJQUFBalQsRUFBQTBLLEVBQUFoSyxPQUFBdVMsSUFBQSx1QkFBQWhULEVBQUF5SyxFQUFBaEssT0FBQXVTLElBQUEsc0JBQUF4TyxFQUFBaUcsRUFBQWhLLE9BQUF1UyxJQUFBLHdCQUFBM08sRUFBQW9HLEVBQUFoSyxPQUFBdVMsSUFBQSwyQkFBQXFFLEVBQUE1TSxFQUFBaEssT0FBQXVTLElBQUEsd0JBQUFxUSxFQUFBNVksRUFBQWhLLE9BQUF1UyxJQUFBLHdCQUFBRCxFQUFBdEksRUFBQWhLLE9BQUF1UyxJQUFBLHVCQUFBclQsRUFBQThLLEVBQUFoSyxPQUFBdVMsSUFBQSwwQkFBQWxULEVBQUEySyxFQUFBaEssT0FBQXVTLElBQUEsK0JBQUE3UixFQUFBc0osRUFBQWhLLE9BQUF1UyxJQUFBLDJCQUFBeFIsRUFBQWlKLEVBQUFoSyxPQUFBdVMsSUFBQSx3QkFBQTJQLEVBQUFsWSxFQUFBaEssT0FBQXVTLElBQUEsY0FDQSxNQUFBeFMsRUFBQWlLLEVBQUFoSyxPQUFBdVMsSUFBQSxvQkFBeUMsU0FBQXBTLEVBQUFvRCxHQUFjLG9CQUFBQSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsSUFBQTRlLEVBQUE1ZSxFQUFBdVIsU0FBaUIsT0FBQXFOLEdBQVUsS0FBQTdpQixFQUFBLE9BQUFpRSxJQUFBN0IsTUFBMEIsS0FBQXhDLEVBQUEsS0FBQUcsRUFBQSxLQUFBMEUsRUFBQSxLQUFBNlMsRUFBQSxLQUFBaFQsRUFBQSxLQUFBN0MsRUFBQSxPQUFBd0MsRUFBbUQsZUFBQUEsT0FBQXVSLFVBQWtDLEtBQUF4QyxFQUFBLEtBQUE1UixFQUFBLEtBQUFraUIsRUFBQSxPQUFBcmYsRUFBOEIsZUFBQTRlLEdBQWtCLEtBQUFwaUIsRUFBQSxLQUFBbWlCLEVBQUEsS0FBQTNpQixFQUFBLE9BQUE0aUIsSUFBZ0MsU0FBQUMsRUFBQTdlLEdBQWMsT0FBQXBELEVBQUFvRCxLQUFBbEUsRUFBZ0JOLEVBQUFzbEQsT0FBQWxrRCxFQUFpQnBCLEVBQUF1bEQsVUFBQXBsRCxFQUFvQkgsRUFBQXdsRCxlQUFBbGxELEVBQXlCTixFQUFBeWxELGdCQUFBbHlDLEVBQTBCdlQsRUFBQTBsRCxnQkFBQTdoQyxFQUEwQjdqQixFQUFBMmxELFFBQUFwbEQsRUFBa0JQLEVBQUFxVyxXQUFBMVUsRUFDcmQzQixFQUFBa29CLFNBQUFsakIsRUFBbUJoRixFQUFBNGxELEtBQUE1a0QsRUFBZWhCLEVBQUE2bEQsS0FBQTFpQyxFQUFlbmpCLEVBQUE4bEQsT0FBQXRsRCxFQUFpQlIsRUFBQStsRCxTQUFBbHVDLEVBQW1CN1gsRUFBQW1vQixXQUFBdGpCLEVBQXFCN0UsRUFBQW9vQixTQUFBcG1CLEVBQW1CaEMsRUFBQWdtRCxtQkFBQSxTQUFBeGhELEdBQXVDLHVCQUFBQSxHQUFBLG1CQUFBQSxPQUFBUSxHQUFBUixJQUFBbEUsR0FBQWtFLElBQUFxVCxHQUFBclQsSUFBQUssR0FBQUwsSUFBQXhDLEdBQUEsaUJBQUF3QyxHQUFBLE9BQUFBLE1BQUF1UixXQUFBL1UsR0FBQXdELEVBQUF1UixXQUFBb04sR0FBQTNlLEVBQUF1UixXQUFBOE4sR0FBQXJmLEVBQUF1UixXQUFBeEMsR0FBQS9PLEVBQUF1UixXQUFBcFUsSUFBc00zQixFQUFBaW1ELFlBQUEsU0FBQXpoRCxHQUFnQyxPQUFBNmUsRUFBQTdlLElBQUFwRCxFQUFBb0QsS0FBQXJFLEdBQXVCSCxFQUFBa21ELGlCQUFBN2lDLEVBQTJCcmpCLEVBQUFtbUQsa0JBQUEsU0FBQTNoRCxHQUFzQyxPQUFBcEQsRUFBQW9ELEtBQUErTyxHQUNsZXZULEVBQUFvbUQsa0JBQUEsU0FBQTVoRCxHQUFzQyxPQUFBcEQsRUFBQW9ELEtBQUFxZixHQUFpQjdqQixFQUFBcW1ELFVBQUEsU0FBQTdoRCxHQUE4Qix1QkFBQUEsR0FBQSxPQUFBQSxLQUFBdVIsV0FBQXhWLEdBQXFEUCxFQUFBc21ELGFBQUEsU0FBQTloRCxHQUFpQyxPQUFBcEQsRUFBQW9ELEtBQUE3QyxHQUFpQjNCLEVBQUF1bUQsV0FBQSxTQUFBL2hELEdBQStCLE9BQUFwRCxFQUFBb0QsS0FBQVEsR0FBaUJoRixFQUFBd21ELE9BQUEsU0FBQWhpRCxHQUEyQixPQUFBcEQsRUFBQW9ELEtBQUF4RCxHQUFpQmhCLEVBQUFvVyxPQUFBLFNBQUE1UixHQUEyQixPQUFBcEQsRUFBQW9ELEtBQUEyZSxHQUFpQm5qQixFQUFBeW1ELFNBQUEsU0FBQWppRCxHQUE2QixPQUFBcEQsRUFBQW9ELEtBQUFoRSxHQUFpQlIsRUFBQTBtRCxXQUFBLFNBQUFsaUQsR0FBK0IsT0FBQXBELEVBQUFvRCxLQUFBcVQsR0FBaUI3WCxFQUFBMm1ELGFBQUEsU0FBQW5pRCxHQUFpQyxPQUFBcEQsRUFBQW9ELEtBQUFLLEdBQ25jN0UsRUFBQTRtRCxXQUFBLFNBQUFwaUQsR0FBK0IsT0FBQXBELEVBQUFvRCxLQUFBeEMsa0JDZC9CL0IsRUFBQUQsUUFBQSxTQUFBNm1ELEdBQ0EsSUFBQUEsRUFBQUMsZ0JBQUEsQ0FDQSxJQUFBN21ELEVBQUFXLE9BQUFZLE9BQUFxbEQsR0FFQTVtRCxFQUFBb2xCLFdBQUFwbEIsRUFBQW9sQixTQUFBLElBQ0F6a0IsT0FBQUMsZUFBQVosRUFBQSxVQUNBYSxZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBZCxFQUFBRSxLQUdBUyxPQUFBQyxlQUFBWixFQUFBLE1BQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFkLEVBQUFDLEtBR0FVLE9BQUFDLGVBQUFaLEVBQUEsV0FDQWEsWUFBQSxJQUVBYixFQUFBNm1ELGdCQUFBLEVBRUEsT0FBQTdtRCxvQkN0QkEsSUFBQXlDLEVBQWM1QyxFQUFRLEdBRXRCNEMsSUFBQVcsRUFBQVgsRUFBQU8sR0FBaUNuRCxFQUFRLEdBQWdCLFVBQWM2SyxpQkFBbUI3SyxFQUFRLHVCQ0ZsR0csRUFBQUQsUUFBaUJGLEVBQVEsR0FBUkEsQ0FBbUIsNEJBQUErRCxTQUFBOEIsMkJDRXBDLElBQUFzSixFQUFnQm5QLEVBQVEsSUFDeEJzUCxFQUFldFAsRUFBUSxJQUN2QmluRCxFQUFzQmpuRCxFQUFRLElBQzlCRyxFQUFBRCxRQUFBLFNBQUFnbkQsR0FDQSxnQkFBQWwzQyxFQUFBNlEsRUFBQXNtQyxHQUNBLElBR0E5bEQsRUFIQTJELEVBQUFtSyxFQUFBYSxHQUNBaEksRUFBQXNILEVBQUF0SyxFQUFBZ0QsUUFDQU4sRUFBQXUvQyxFQUFBRSxFQUFBbi9DLEdBSUEsR0FBQWsvQyxHQUFBcm1DLE1BQUEsS0FBQTdZLEVBQUFOLEdBR0EsSUFGQXJHLEVBQUEyRCxFQUFBMEMsT0FFQXJHLEVBQUEsY0FFSyxLQUFZMkcsRUFBQU4sRUFBZUEsSUFBQSxJQUFBdy9DLEdBQUF4L0MsS0FBQTFDLElBQ2hDQSxFQUFBMEMsS0FBQW1aLEVBQUEsT0FBQXFtQyxHQUFBeC9DLEdBQUEsRUFDSyxPQUFBdy9DLElBQUEscUJDcEJMLElBQUF2NUMsRUFBZ0IzTixFQUFRLElBQ3hCb25ELEVBQUFoakQsS0FBQWdqRCxJQUNBeDVDLEVBQUF4SixLQUFBd0osSUFDQXpOLEVBQUFELFFBQUEsU0FBQXdILEVBQUFNLEdBRUEsT0FEQU4sRUFBQWlHLEVBQUFqRyxJQUNBLEVBQUEwL0MsRUFBQTEvQyxFQUFBTSxFQUFBLEdBQUE0RixFQUFBbEcsRUFBQU0scUJDSkEsSUFBQXBGLEVBQWM1QyxFQUFRLEdBQ3RCcUssRUFBY3JLLEVBQVEsSUFDdEJtUCxFQUFnQm5QLEVBQVEsSUFDeEJvUCxFQUFXcFAsRUFBUSxJQUNuQnFuRCxFQUFxQnJuRCxFQUFRLElBRTdCNEMsSUFBQVcsRUFBQSxVQUNBcUgsMEJBQUEsU0FBQTlJLEdBT0EsSUFOQSxJQUtBSCxFQUFBMmxELEVBTEF0aUQsRUFBQW1LLEVBQUFyTixHQUNBeWxELEVBQUFuNEMsRUFBQXJLLEVBQ0FnRSxFQUFBc0IsRUFBQXJGLEdBQ0FtTCxFQUFBLEdBQ0EvUCxFQUFBLEVBRUEySSxFQUFBZixPQUFBNUgsUUFFQTBELEtBREF3akQsRUFBQUMsRUFBQXZpRCxFQUFBckQsRUFBQW9ILEVBQUEzSSxRQUNBaW5ELEVBQUFsM0MsRUFBQXhPLEVBQUEybEQsR0FFQSxPQUFBbjNDLHNCQ2xCQSxJQUFBZ0IsRUFBV25SLEVBQVEsSUFDbkJ3bkQsRUFBV3huRCxFQUFRLElBQ25CMkUsRUFBZTNFLEVBQVEsR0FDdkJ5bkQsRUFBY3puRCxFQUFRLEdBQVd5bkQsUUFDakN0bkQsRUFBQUQsUUFBQXVuRCxLQUFBcDlDLFNBQUEsU0FBQTdGLEdBQ0EsSUFBQXVFLEVBQUFvSSxFQUFBcE0sRUFBQUosRUFBQUgsSUFDQWtqRCxFQUFBRixFQUFBemlELEVBQ0EsT0FBQTJpRCxFQUFBMytDLEVBQUF3RSxPQUFBbTZDLEVBQUFsakQsSUFBQXVFLGlDQ1BBLElBQUE0SixFQUFzQjNTLEVBQVEsR0FDOUJpTSxFQUFpQmpNLEVBQVEsSUFFekJHLEVBQUFELFFBQUEsU0FBQTRCLEVBQUE0RixFQUFBckcsR0FDQXFHLEtBQUE1RixFQUFBNlEsRUFBQTVOLEVBQUFqRCxFQUFBNEYsRUFBQXVFLEVBQUEsRUFBQTVLLElBQ0FTLEVBQUE0RixHQUFBckcsaUNDTEEsSUFBQXVCLEVBQWM1QyxFQUFRLEdBQ3RCMm5ELEVBQWUzbkQsRUFBUSxHQUFSQSxDQUEwQixHQUN6QzRuRCxFQUFhNW5ELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQW1KLFNBQUEsR0FFdkN2RyxJQUFBYSxFQUFBYixFQUFBTyxHQUFBeWtELEVBQUEsU0FFQXorQyxRQUFBLFNBQUE4RyxHQUNBLE9BQUEwM0MsRUFBQWwvQyxLQUFBd0gsRUFBQXJKLFVBQUEsd0JDUEEsSUFBQWloRCxFQUF5QjduRCxFQUFRLElBRWpDRyxFQUFBRCxRQUFBLFNBQUE0bkQsRUFBQTkvQyxHQUNBLFdBQUE2L0MsRUFBQUMsR0FBQSxDQUFBOS9DLHFCQ0pBLElBQUF6RCxFQUFldkUsRUFBUSxHQUN2QjZRLEVBQWM3USxFQUFRLElBQ3RCK25ELEVBQWMvbkQsRUFBUSxFQUFSQSxDQUFnQixXQUU5QkcsRUFBQUQsUUFBQSxTQUFBNG5ELEdBQ0EsSUFBQTdzQyxFQVNHLE9BUkhwSyxFQUFBaTNDLEtBR0EsbUJBRkE3c0MsRUFBQTZzQyxFQUFBbGpDLGNBRUEzSixJQUFBalEsUUFBQTZGLEVBQUFvSyxFQUFBalosYUFBQWlaLE9BQUFuWCxHQUNBUyxFQUFBMFcsSUFFQSxRQURBQSxJQUFBOHNDLE1BQ0E5c0MsT0FBQW5YLFNBRUdBLElBQUFtWCxFQUFBalEsTUFBQWlRLG9CQ2RILElBQUE1SyxFQUFXclEsRUFBUSxHQUFSQSxDQUFnQixRQUMzQnVFLEVBQWV2RSxFQUFRLEdBQ3ZCcU0sRUFBVXJNLEVBQVEsSUFDbEJnb0QsRUFBY2hvRCxFQUFRLEdBQWMrRSxFQUNwQ3NJLEVBQUEsRUFDQTQ2QyxFQUFBbm5ELE9BQUFtbkQsY0FBQSxXQUNBLFVBRUFDLEdBQWNsb0QsRUFBUSxHQUFSQSxDQUFrQixXQUNoQyxPQUFBaW9ELEVBQUFubkQsT0FBQXFuRCxrQkFBQSxPQUVBQyxFQUFBLFNBQUE1akQsR0FDQXdqRCxFQUFBeGpELEVBQUE2TCxFQUFBLENBQXFCaFAsTUFBQSxDQUNyQmpCLEVBQUEsT0FBQWlOLEVBQ0FtVyxFQUFBLE9BZ0NBb25CLEVBQUF6cUMsRUFBQUQsUUFBQSxDQUNBb1EsSUFBQUQsRUFDQWc0QyxNQUFBLEVBQ0FDLFFBaENBLFNBQUE5akQsRUFBQTlDLEdBRUEsSUFBQTZDLEVBQUFDLEdBQUEsdUJBQUFBLEtBQUEsaUJBQUFBLEVBQUEsU0FBQUEsRUFDQSxJQUFBNkgsRUFBQTdILEVBQUE2TCxHQUFBLENBRUEsSUFBQTQzQyxFQUFBempELEdBQUEsVUFFQSxJQUFBOUMsRUFBQSxVQUVBMG1ELEVBQUE1akQsR0FFRyxPQUFBQSxFQUFBNkwsR0FBQWpRLEdBc0JIbW9ELFFBcEJBLFNBQUEvakQsRUFBQTlDLEdBQ0EsSUFBQTJLLEVBQUE3SCxFQUFBNkwsR0FBQSxDQUVBLElBQUE0M0MsRUFBQXpqRCxHQUFBLFNBRUEsSUFBQTlDLEVBQUEsU0FFQTBtRCxFQUFBNWpELEdBRUcsT0FBQUEsRUFBQTZMLEdBQUFtVCxHQVlIZ2xDLFNBVEEsU0FBQWhrRCxHQUVBLE9BREEwakQsR0FBQXRkLEVBQUF5ZCxNQUFBSixFQUFBempELEtBQUE2SCxFQUFBN0gsRUFBQTZMLElBQUErM0MsRUFBQTVqRCxHQUNBQSxxQkMzQ0EsSUFBQXdULEVBQWNoWSxFQUFRLElBQ3RCd25ELEVBQVd4bkQsRUFBUSxJQUNuQmtQLEVBQVVsUCxFQUFRLElBQ2xCRyxFQUFBRCxRQUFBLFNBQUFzRSxHQUNBLElBQUEyTCxFQUFBNkgsRUFBQXhULEdBQ0FrakQsRUFBQUYsRUFBQXppRCxFQUNBLEdBQUEyaUQsRUFLQSxJQUpBLElBR0EvbEQsRUFIQWtXLEVBQUE2dkMsRUFBQWxqRCxHQUNBbU4sRUFBQXpDLEVBQUFuSyxFQUNBM0UsRUFBQSxFQUVBeVgsRUFBQTdQLE9BQUE1SCxHQUFBdVIsRUFBQXBSLEtBQUFpRSxFQUFBN0MsRUFBQWtXLEVBQUF6WCxPQUFBK1AsRUFBQTFJLEtBQUE5RixHQUNHLE9BQUF3TyxvQkNaSCxJQUFBaEIsRUFBZ0JuUCxFQUFRLElBQ3hCbVIsRUFBV25SLEVBQVEsSUFBZ0IrRSxFQUNuQ2MsRUFBQSxHQUFpQkEsU0FFakI0aUQsRUFBQSxpQkFBQXRrRCxnQkFBQXJELE9BQUFtTyxvQkFDQW5PLE9BQUFtTyxvQkFBQTlLLFFBQUEsR0FVQWhFLEVBQUFELFFBQUE2RSxFQUFBLFNBQUFQLEdBQ0EsT0FBQWlrRCxHQUFBLG1CQUFBNWlELEVBQUF0RixLQUFBaUUsR0FUQSxTQUFBQSxHQUNBLElBQ0EsT0FBQTJNLEVBQUEzTSxHQUNHLE1BQUFVLEdBQ0gsT0FBQXVqRCxFQUFBcmhELFNBS0FzaEQsQ0FBQWxrRCxHQUFBMk0sRUFBQWhDLEVBQUEzSyxzQkM0QkEsSUE3Q0EsSUFBQW1rRCxFQUFpQjNvRCxFQUFRLElBQ3pCZ1ksRUFBY2hZLEVBQVEsSUFDdEIwQyxFQUFlMUMsRUFBUSxJQUN2QnVDLEVBQWF2QyxFQUFRLEdBQ3JCeUMsRUFBV3pDLEVBQVEsSUFDbkIwWSxFQUFnQjFZLEVBQVEsSUFDeEJ5USxFQUFVelEsRUFBUSxHQUNsQjRvRCxFQUFBbjRDLEVBQUEsWUFDQW80QyxFQUFBcDRDLEVBQUEsZUFDQXE0QyxFQUFBcHdDLEVBQUExTixNQUVBKzlDLEVBQUEsQ0FDQUMsYUFBQSxFQUNBQyxxQkFBQSxFQUNBQyxjQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsZUFBQSxFQUNBQyxjQUFBLEVBQ0FDLHNCQUFBLEVBQ0FDLFVBQUEsRUFDQUMsbUJBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsaUJBQUEsRUFDQUMsbUJBQUEsRUFDQUMsV0FBQSxFQUNBQyxlQUFBLEVBQ0FDLGNBQUEsRUFDQUMsVUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxRQUFBLEVBQ0FDLGFBQUEsRUFDQUMsZUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGNBQUEsRUFDQUMsZUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxrQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxrQkFBQSxFQUNBQyxlQUFBLEVBQ0FDLFdBQUEsR0FHQUMsRUFBQS95QyxFQUFBK3dDLEdBQUEzb0QsRUFBQSxFQUFvREEsRUFBQTJxRCxFQUFBL2lELE9BQXdCNUgsSUFBQSxDQUM1RSxJQUlBdUIsRUFKQXFwRCxFQUFBRCxFQUFBM3FELEdBQ0E2cUQsRUFBQWxDLEVBQUFpQyxHQUNBRSxFQUFBM29ELEVBQUF5b0QsR0FDQTFrRCxFQUFBNGtELEtBQUFscEQsVUFFQSxHQUFBc0UsSUFDQUEsRUFBQXNpRCxJQUFBbm1ELEVBQUE2RCxFQUFBc2lELEVBQUFFLEdBQ0F4aUQsRUFBQXVpRCxJQUFBcG1ELEVBQUE2RCxFQUFBdWlELEVBQUFtQyxHQUNBdHlDLEVBQUFzeUMsR0FBQWxDLEVBQ0FtQyxHQUFBLElBQUF0cEQsS0FBQWduRCxFQUFBcmlELEVBQUEzRSxJQUFBZSxFQUFBNEQsRUFBQTNFLEVBQUFnbkQsRUFBQWhuRCxJQUFBLHFCQ3REQSxJQUFBd3BELEVBQWtCbnJELEVBQVEsRUFBUkEsQ0FBZ0IsZUFDbENvckQsRUFBQXBnRCxNQUFBaEosVUFDQThCLE1BQUFzbkQsRUFBQUQsSUFBMENuckQsRUFBUSxHQUFSQSxDQUFpQm9yRCxFQUFBRCxFQUFBLElBQzNEaHJELEVBQUFELFFBQUEsU0FBQXlCLEdBQ0F5cEQsRUFBQUQsR0FBQXhwRCxJQUFBLGtCQ0xBeEIsRUFBQUQsUUFBQSxTQUFBNGIsRUFBQXphLEdBQ0EsT0FBVUEsUUFBQXlhLHlDQ0FWLElBQUF6RCxFQUFjclksRUFBUSxJQUN0QjRDLEVBQWM1QyxFQUFRLEdBQ3RCMEMsRUFBZTFDLEVBQVEsSUFDdkJ5QyxFQUFXekMsRUFBUSxJQUNuQjBZLEVBQWdCMVksRUFBUSxJQUN4QnFyRCxFQUFrQnJyRCxFQUFRLEtBQzFCd1EsRUFBcUJ4USxFQUFRLElBQzdCdUcsRUFBcUJ2RyxFQUFRLEtBQzdCNG9ELEVBQWU1b0QsRUFBUSxFQUFSQSxDQUFnQixZQUMvQnNyRCxJQUFBLEdBQUF2aUQsTUFBQSxXQUFBQSxRQUtBd2lELEVBQUEsV0FBOEIsT0FBQTlpRCxNQUU5QnRJLEVBQUFELFFBQUEsU0FBQXNyRCxFQUFBUixFQUFBUyxFQUFBbGpELEVBQUFtakQsRUFBQUMsRUFBQUMsR0FDQVAsRUFBQUksRUFBQVQsRUFBQXppRCxHQUNBLElBZUFzakQsRUFBQWxxRCxFQUFBbXFELEVBZkFDLEVBQUEsU0FBQW56QyxHQUNBLElBQUEweUMsR0FBQTF5QyxLQUFBdFMsRUFBQSxPQUFBQSxFQUFBc1MsR0FDQSxPQUFBQSxHQUNBLElBVkEsT0FXQSxJQVZBLFNBVUEsa0JBQTZDLFdBQUE2eUMsRUFBQWhqRCxLQUFBbVEsSUFDeEMsa0JBQTRCLFdBQUE2eUMsRUFBQWhqRCxLQUFBbVEsS0FFakM1SyxFQUFBZzlDLEVBQUEsWUFDQWdCLEVBZEEsVUFjQU4sRUFDQU8sR0FBQSxFQUNBM2xELEVBQUFrbEQsRUFBQXhwRCxVQUNBa3FELEVBQUE1bEQsRUFBQXNpRCxJQUFBdGlELEVBbkJBLGVBbUJBb2xELEdBQUFwbEQsRUFBQW9sRCxHQUNBUyxFQUFBRCxHQUFBSCxFQUFBTCxHQUNBVSxFQUFBVixFQUFBTSxFQUFBRCxFQUFBLFdBQUFJLE9BQUFyb0QsRUFDQXVvRCxFQUFBLFNBQUFyQixHQUFBMWtELEVBQUFnbUQsU0FBQUosRUF3QkEsR0FyQkFHLElBQ0FQLEVBQUF2bEQsRUFBQThsRCxFQUFBOXJELEtBQUEsSUFBQWlyRCxPQUNBMXFELE9BQUFrQixXQUFBOHBELEVBQUF2akQsT0FFQWlJLEVBQUFzN0MsRUFBQTk5QyxHQUFBLEdBRUFxSyxHQUFBLG1CQUFBeXpDLEVBQUFsRCxJQUFBbm1ELEVBQUFxcEQsRUFBQWxELEVBQUEyQyxJQUlBUyxHQUFBRSxHQWpDQSxXQWlDQUEsRUFBQXZyRCxPQUNBc3JELEdBQUEsRUFDQUUsRUFBQSxXQUFrQyxPQUFBRCxFQUFBM3JELEtBQUFrSSxRQUdsQzRQLElBQUF1ekMsSUFBQU4sSUFBQVcsR0FBQTNsRCxFQUFBc2lELElBQ0FubUQsRUFBQTZELEVBQUFzaUQsRUFBQXVELEdBR0F6ekMsRUFBQXN5QyxHQUFBbUIsRUFDQXp6QyxFQUFBMUssR0FBQXU5QyxFQUNBRyxFQU1BLEdBTEFHLEVBQUEsQ0FDQVUsT0FBQVAsRUFBQUcsRUFBQUosRUE5Q0EsVUErQ0FoakQsS0FBQTRpRCxFQUFBUSxFQUFBSixFQWhEQSxRQWlEQU8sUUFBQUYsR0FFQVIsRUFBQSxJQUFBanFELEtBQUFrcUQsRUFDQWxxRCxLQUFBMkUsR0FBQTVELEVBQUE0RCxFQUFBM0UsRUFBQWtxRCxFQUFBbHFELFNBQ0tpQixJQUFBYSxFQUFBYixFQUFBTyxHQUFBbW9ELEdBQUFXLEdBQUFqQixFQUFBYSxHQUVMLE9BQUFBLGlDQ2xFQSxJQUFBbnFELEVBQWExQixFQUFRLElBQ3JCaVgsRUFBaUJqWCxFQUFRLElBQ3pCd1EsRUFBcUJ4USxFQUFRLElBQzdCOHJELEVBQUEsR0FHQTlyRCxFQUFRLEdBQVJBLENBQWlCOHJELEVBQXFCOXJELEVBQVEsRUFBUkEsQ0FBZ0IsdUJBQTRCLE9BQUF5SSxPQUVsRnRJLEVBQUFELFFBQUEsU0FBQXVyRCxFQUFBVCxFQUFBemlELEdBQ0FrakQsRUFBQXpwRCxVQUFBTixFQUFBb3FELEVBQUEsQ0FBcUR2akQsS0FBQTBPLEVBQUEsRUFBQTFPLEtBQ3JEaUksRUFBQWk3QyxFQUFBVCxFQUFBLCtCQ1ZBLElBQUEzK0MsRUFBVXJNLEVBQVEsSUFDbEJxUCxFQUFlclAsRUFBUSxJQUN2QmtVLEVBQWVsVSxFQUFRLEdBQVJBLENBQXVCLFlBQ3RDK1IsRUFBQWpSLE9BQUFrQixVQUVBN0IsRUFBQUQsUUFBQVksT0FBQXlGLGdCQUFBLFNBQUF2QixHQUVBLE9BREFBLEVBQUFxSyxFQUFBckssR0FDQXFILEVBQUFySCxFQUFBa1AsR0FBQWxQLEVBQUFrUCxHQUNBLG1CQUFBbFAsRUFBQTRmLGFBQUE1ZixlQUFBNGYsWUFDQTVmLEVBQUE0ZixZQUFBNWlCLFVBQ0dnRCxhQUFBbEUsT0FBQWlSLEVBQUEsdUJDVkgsSUFBQTFDLEVBQWVyUCxFQUFRLElBQ3ZCa04sRUFBWWxOLEVBQVEsSUFFcEJBLEVBQVEsSUFBUkEsQ0FBdUIsa0JBQ3ZCLGdCQUFBd0UsR0FDQSxPQUFBMEksRUFBQW1DLEVBQUE3Syx3QkNMQSxJQUFBNUIsRUFBYzVDLEVBQVEsR0FDdEJ3QyxFQUFXeEMsRUFBUSxJQUNuQjZOLEVBQVk3TixFQUFRLElBQ3BCRyxFQUFBRCxRQUFBLFNBQUFvUSxFQUFBcEUsR0FDQSxJQUFBYyxHQUFBeEssRUFBQTFCLFFBQUEsSUFBNkJ3UCxJQUFBeFAsT0FBQXdQLEdBQzdCck4sRUFBQSxHQUNBQSxFQUFBcU4sR0FBQXBFLEVBQUFjLEdBQ0FwSyxJQUFBVyxFQUFBWCxFQUFBTyxFQUFBMEssRUFBQSxXQUFxRGIsRUFBQSxLQUFTLFNBQUEvSixxQkNQOUQsSUFBQUwsRUFBYzVDLEVBQVEsR0FFdEI0QyxJQUFBVyxFQUFBWCxFQUFBTyxFQUFBLFVBQTBDa1UsT0FBU3JYLEVBQVEscUNDRDNELElBQUFvUSxFQUFrQnBRLEVBQVEsR0FDMUJnWSxFQUFjaFksRUFBUSxJQUN0QnduRCxFQUFXeG5ELEVBQVEsSUFDbkJrUCxFQUFVbFAsRUFBUSxJQUNsQnFQLEVBQWVyUCxFQUFRLElBQ3ZCNk0sRUFBYzdNLEVBQVEsSUFDdEJ3c0QsRUFBQTFyRCxPQUFBdVcsT0FHQWxYLEVBQUFELFNBQUFzc0QsR0FBNkJ4c0QsRUFBUSxHQUFSQSxDQUFrQixXQUMvQyxJQUFBOGpCLEVBQUEsR0FDQW5nQixFQUFBLEdBRUFKLEVBQUFwQyxTQUNBOGpCLEVBQUEsdUJBR0EsT0FGQW5CLEVBQUF2Z0IsR0FBQSxFQUNBMGhCLEVBQUFsZixNQUFBLElBQUFvRCxRQUFBLFNBQUFzSyxHQUFvQzlQLEVBQUE4UCxPQUNqQixHQUFuQis0QyxFQUFBLEdBQW1CMW9DLEdBQUF2Z0IsSUFBQXpDLE9BQUFpSSxLQUFBeWpELEVBQUEsR0FBc0M3b0QsSUFBQXFDLEtBQUEsS0FBQWlmLElBQ3hELFNBQUFyaEIsRUFBQWQsR0FNRCxJQUxBLElBQUFzTCxFQUFBaUIsRUFBQXpMLEdBQ0E2b0QsRUFBQTdsRCxVQUFBb0IsT0FDQU4sRUFBQSxFQUNBZ2dELEVBQUFGLEVBQUF6aUQsRUFDQTRNLEVBQUF6QyxFQUFBbkssRUFDQTBuRCxFQUFBL2tELEdBTUEsSUFMQSxJQUlBL0YsRUFKQTRCLEVBQUFzSixFQUFBakcsVUFBQWMsTUFDQXFCLEVBQUEyK0MsRUFBQTF2QyxFQUFBelUsR0FBQWdLLE9BQUFtNkMsRUFBQW5rRCxJQUFBeVUsRUFBQXpVLEdBQ0F5RSxFQUFBZSxFQUFBZixPQUNBdUwsRUFBQSxFQUVBdkwsRUFBQXVMLEdBQ0E1UixFQUFBb0gsRUFBQXdLLEtBQ0FuRCxJQUFBdUIsRUFBQXBSLEtBQUFnRCxFQUFBNUIsS0FBQXlNLEVBQUF6TSxHQUFBNEIsRUFBQTVCLElBRUcsT0FBQXlNLEdBQ0ZvK0MsZ0NDcENELElBQUE1cEQsRUFBYzVDLEVBQVEsR0FDdEIwc0QsRUFBYzFzRCxFQUFRLEdBQVJBLENBQTBCLEdBRXhDNEMsSUFBQWEsRUFBQWIsRUFBQU8sR0FBaUNuRCxFQUFRLEdBQVJBLENBQTBCLEdBQUF3SyxRQUFBLFlBRTNEQSxPQUFBLFNBQUF5RixHQUNBLE9BQUF5OEMsRUFBQWprRCxLQUFBd0gsRUFBQXJKLFVBQUEsd0JDTEEsSUFBQXJDLEVBQWV2RSxFQUFRLEdBQ3ZCMkUsRUFBZTNFLEVBQVEsR0FDdkIyc0QsRUFBQSxTQUFBM25ELEVBQUFzQixHQUVBLEdBREEzQixFQUFBSyxJQUNBVCxFQUFBK0IsSUFBQSxPQUFBQSxFQUFBLE1BQUE3QixVQUFBNkIsRUFBQSw4QkFFQW5HLEVBQUFELFFBQUEsQ0FDQW1ULElBQUF2UyxPQUFBbVksaUJBQUEsZ0JBQ0EsU0FBQUQsRUFBQTR6QyxFQUFBdjVDLEdBQ0EsS0FDQUEsRUFBY3JULEVBQVEsR0FBUkEsQ0FBZ0IrRCxTQUFBeEQsS0FBaUJQLEVBQVEsSUFBZ0IrRSxFQUFBakUsT0FBQWtCLFVBQUEsYUFBQXFSLElBQUEsSUFDdkUyRixFQUFBLElBQ0E0ekMsSUFBQTV6QyxhQUFBaE8sT0FDTyxNQUFBOUYsR0FBWTBuRCxHQUFBLEVBQ25CLGdCQUFBNW5ELEVBQUFzQixHQUlBLE9BSEFxbUQsRUFBQTNuRCxFQUFBc0IsR0FDQXNtRCxFQUFBNW5ELEVBQUE2bkQsVUFBQXZtRCxFQUNBK00sRUFBQXJPLEVBQUFzQixHQUNBdEIsR0FWQSxDQVlLLElBQUcsUUFBQWxCLEdBQ1I2b0QsdUNDdEJBLElBQUEvcEQsRUFBYzVDLEVBQVEsR0FDdEI4c0QsRUFBYzlzRCxFQUFRLEtBRXRCNEMsSUFBQWEsRUFBQWIsRUFBQU8sR0FBaUNuRCxFQUFRLEdBQVJBLENBQTBCLEdBQUFrTCxRQUFBLFlBRTNEQSxPQUFBLFNBQUErRSxHQUNBLE9BQUE2OEMsRUFBQXJrRCxLQUFBd0gsRUFBQXJKLFVBQUFvQixPQUFBcEIsVUFBQSwyQkNQQSxJQUFBbUcsRUFBZ0IvTSxFQUFRLElBQ3hCcVAsRUFBZXJQLEVBQVEsSUFDdkI2TSxFQUFjN00sRUFBUSxJQUN0QnNQLEVBQWV0UCxFQUFRLElBRXZCRyxFQUFBRCxRQUFBLFNBQUErTSxFQUFBZ0QsRUFBQXc4QyxFQUFBMXVDLEVBQUFndkMsR0FDQWhnRCxFQUFBa0QsR0FDQSxJQUFBakwsRUFBQXFLLEVBQUFwQyxHQUNBNUksRUFBQXdJLEVBQUE3SCxHQUNBZ0QsRUFBQXNILEVBQUF0SyxFQUFBZ0QsUUFDQU4sRUFBQXFsRCxFQUFBL2tELEVBQUEsSUFDQTVILEVBQUEyc0QsR0FBQSxJQUNBLEdBQUFOLEVBQUEsU0FBdUIsQ0FDdkIsR0FBQS9rRCxLQUFBckQsRUFBQSxDQUNBMFosRUFBQTFaLEVBQUFxRCxHQUNBQSxHQUFBdEgsRUFDQSxNQUdBLEdBREFzSCxHQUFBdEgsRUFDQTJzRCxFQUFBcmxELEVBQUEsRUFBQU0sR0FBQU4sRUFDQSxNQUFBakQsVUFBQSwrQ0FHQSxLQUFRc29ELEVBQUFybEQsR0FBQSxFQUFBTSxFQUFBTixFQUFzQ0EsR0FBQXRILEVBQUFzSCxLQUFBckQsSUFDOUMwWixFQUFBOU4sRUFBQThOLEVBQUExWixFQUFBcUQsS0FBQTFDLElBRUEsT0FBQStZLGlDQ3pCQSxJQXdCQWl2QyxFQUFBQyxFQUFBQyxFQUFBQyxFQXhCQTkwQyxFQUFjclksRUFBUSxJQUN0QnVDLEVBQWF2QyxFQUFRLEdBQ3JCMkMsRUFBVTNDLEVBQVEsSUFDbEIrWSxFQUFjL1ksRUFBUSxJQUN0QjRDLEVBQWM1QyxFQUFRLEdBQ3RCdUUsRUFBZXZFLEVBQVEsR0FDdkIrTSxFQUFnQi9NLEVBQVEsSUFDeEJvdEQsRUFBaUJwdEQsRUFBUSxLQUN6QnF0RCxFQUFZcnRELEVBQVEsS0FDcEI2bkQsRUFBeUI3bkQsRUFBUSxLQUNqQ3N0RCxFQUFXdHRELEVBQVEsSUFBU3FULElBQzVCazZDLEVBQWdCdnRELEVBQVEsSUFBUkEsR0FDaEJ3dEQsRUFBaUN4dEQsRUFBUSxJQUN6Q3l0RCxFQUFjenRELEVBQVEsS0FDdEIwdEQsRUFBZ0IxdEQsRUFBUSxLQUN4QjJ0RCxFQUFxQjN0RCxFQUFRLEtBRTdCeUUsRUFBQWxDLEVBQUFrQyxVQUNBK1UsRUFBQWpYLEVBQUFpWCxRQUNBbzBDLEVBQUFwMEMsS0FBQW8wQyxTQUNBQyxFQUFBRCxLQUFBQyxJQUFBLEdBQ0FDLEVBQUF2ckQsRUFBQSxRQUNBd3JELEVBQUEsV0FBQWgxQyxFQUFBUyxHQUNBdzBDLEVBQUEsYUFFQUMsRUFBQWhCLEVBQUFPLEVBQUF6b0QsRUFFQWlOLElBQUEsV0FDQSxJQUVBLElBQUFvSixFQUFBMHlDLEVBQUE1eUMsUUFBQSxHQUNBZ3pDLEdBQUE5eUMsRUFBQXdKLFlBQUEsSUFBaUQ1a0IsRUFBUSxFQUFSQSxDQUFnQixxQkFBQWtNLEdBQ2pFQSxFQUFBOGhELE1BR0EsT0FBQUQsR0FBQSxtQkFBQUksd0JBQ0EveUMsRUFBQTI3QixLQUFBaVgsYUFBQUUsR0FJQSxJQUFBTCxFQUFBbG1ELFFBQUEsU0FDQSxJQUFBK2xELEVBQUEvbEQsUUFBQSxhQUNHLE1BQUF6QyxLQWZILEdBbUJBa3BELEVBQUEsU0FBQTVwRCxHQUNBLElBQUF1eUMsRUFDQSxTQUFBeHlDLEVBQUFDLElBQUEsbUJBQUF1eUMsRUFBQXZ5QyxFQUFBdXlDLFdBRUFzWCxFQUFBLFNBQUFqekMsRUFBQWt6QyxHQUNBLElBQUFsekMsRUFBQW16QyxHQUFBLENBQ0FuekMsRUFBQW16QyxJQUFBLEVBQ0EsSUFBQWhqRCxFQUFBNlAsRUFBQW96QyxHQUNBakIsRUFBQSxXQW9DQSxJQW5DQSxJQUFBbHNELEVBQUErWixFQUFBcXpDLEdBQ0FDLEVBQUEsR0FBQXR6QyxFQUFBdXpDLEdBQ0F2dUQsRUFBQSxFQUNBNlosRUFBQSxTQUFBMjBDLEdBQ0EsSUFJQXorQyxFQUFBNG1DLEVBQUE4WCxFQUpBQyxFQUFBSixFQUFBRSxFQUFBRixHQUFBRSxFQUFBRyxLQUNBN3pDLEVBQUEwekMsRUFBQTF6QyxRQUNBQyxFQUFBeXpDLEVBQUF6ekMsT0FDQTZ6QyxFQUFBSixFQUFBSSxPQUVBLElBQ0FGLEdBQ0FKLElBQ0EsR0FBQXR6QyxFQUFBNnpDLElBQUFDLEVBQUE5ekMsR0FDQUEsRUFBQTZ6QyxHQUFBLElBRUEsSUFBQUgsRUFBQTMrQyxFQUFBOU8sR0FFQTJ0RCxLQUFBRyxRQUNBaC9DLEVBQUEyK0MsRUFBQXp0RCxHQUNBMnRELElBQ0FBLEVBQUFJLE9BQ0FQLEdBQUEsSUFHQTErQyxJQUFBeStDLEVBQUF4ekMsUUFDQUQsRUFBQTFXLEVBQUEseUJBQ1dzeUMsRUFBQXFYLEVBQUFqK0MsSUFDWDRtQyxFQUFBeDJDLEtBQUE0UCxFQUFBK0ssRUFBQUMsR0FDV0QsRUFBQS9LLElBQ0ZnTCxFQUFBOVosR0FDRixNQUFBNkQsR0FDUDhwRCxJQUFBSCxHQUFBRyxFQUFBSSxPQUNBajBDLEVBQUFqVyxLQUdBcUcsRUFBQXZELE9BQUE1SCxHQUFBNlosRUFBQTFPLEVBQUFuTCxNQUNBZ2IsRUFBQW96QyxHQUFBLEdBQ0FwekMsRUFBQW16QyxJQUFBLEVBQ0FELElBQUFsekMsRUFBQTZ6QyxJQUFBSSxFQUFBajBDLE9BR0FpMEMsRUFBQSxTQUFBajBDLEdBQ0FreUMsRUFBQS9zRCxLQUFBZ0MsRUFBQSxXQUNBLElBRUE0TixFQUFBMitDLEVBQUFwZ0QsRUFGQXJOLEVBQUErWixFQUFBcXpDLEdBQ0FhLEVBQUFDLEVBQUFuMEMsR0FlQSxHQWJBazBDLElBQ0FuL0MsRUFBQXM5QyxFQUFBLFdBQ0FNLEVBQ0F2MEMsRUFBQWcyQyxLQUFBLHFCQUFBbnVELEVBQUErWixJQUNTMHpDLEVBQUF2c0QsRUFBQWt0RCxzQkFDVFgsRUFBQSxDQUFtQjF6QyxVQUFBczBDLE9BQUFydUQsS0FDVnFOLEVBQUFuTSxFQUFBbU0sWUFBQTlDLE9BQ1Q4QyxFQUFBOUMsTUFBQSw4QkFBQXZLLEtBSUErWixFQUFBNnpDLEdBQUFsQixHQUFBd0IsRUFBQW4wQyxHQUFBLEtBQ0tBLEVBQUF1MEMsUUFBQTdyRCxFQUNMd3JELEdBQUFuL0MsRUFBQWpMLEVBQUEsTUFBQWlMLEVBQUFvVCxLQUdBZ3NDLEVBQUEsU0FBQW4wQyxHQUNBLFdBQUFBLEVBQUE2ekMsSUFBQSxLQUFBN3pDLEVBQUF1MEMsSUFBQXYwQyxFQUFBb3pDLElBQUF4bUQsUUFFQWtuRCxFQUFBLFNBQUE5ekMsR0FDQWt5QyxFQUFBL3NELEtBQUFnQyxFQUFBLFdBQ0EsSUFBQXVzRCxFQUNBZixFQUNBdjBDLEVBQUFnMkMsS0FBQSxtQkFBQXAwQyxJQUNLMHpDLEVBQUF2c0QsRUFBQXF0RCxxQkFDTGQsRUFBQSxDQUFlMXpDLFVBQUFzMEMsT0FBQXQwQyxFQUFBcXpDLFFBSWZvQixFQUFBLFNBQUF4dUQsR0FDQSxJQUFBK1osRUFBQTNTLEtBQ0EyUyxFQUFBMDBDLEtBQ0ExMEMsRUFBQTAwQyxJQUFBLEdBQ0ExMEMsSUFBQTIwQyxJQUFBMzBDLEdBQ0FxekMsR0FBQXB0RCxFQUNBK1osRUFBQXV6QyxHQUFBLEVBQ0F2ekMsRUFBQXUwQyxLQUFBdjBDLEVBQUF1MEMsR0FBQXYwQyxFQUFBb3pDLEdBQUFwbkQsU0FDQWluRCxFQUFBanpDLEdBQUEsS0FFQTQwQyxFQUFBLFNBQUEzdUQsR0FDQSxJQUNBMDFDLEVBREEzN0IsRUFBQTNTLEtBRUEsSUFBQTJTLEVBQUEwMEMsR0FBQSxDQUNBMTBDLEVBQUEwMEMsSUFBQSxFQUNBMTBDLElBQUEyMEMsSUFBQTMwQyxFQUNBLElBQ0EsR0FBQUEsSUFBQS9aLEVBQUEsTUFBQW9ELEVBQUEscUNBQ0FzeUMsRUFBQXFYLEVBQUEvc0QsSUFDQWtzRCxFQUFBLFdBQ0EsSUFBQTBDLEVBQUEsQ0FBdUJGLEdBQUEzMEMsRUFBQTAwQyxJQUFBLEdBQ3ZCLElBQ0EvWSxFQUFBeDJDLEtBQUFjLEVBQUFzQixFQUFBcXRELEVBQUFDLEVBQUEsR0FBQXR0RCxFQUFBa3RELEVBQUFJLEVBQUEsSUFDUyxNQUFBL3FELEdBQ1QycUQsRUFBQXR2RCxLQUFBMHZELEVBQUEvcUQsT0FJQWtXLEVBQUFxekMsR0FBQXB0RCxFQUNBK1osRUFBQXV6QyxHQUFBLEVBQ0FOLEVBQUFqekMsR0FBQSxJQUVHLE1BQUFsVyxHQUNIMnFELEVBQUF0dkQsS0FBQSxDQUFrQnd2RCxHQUFBMzBDLEVBQUEwMEMsSUFBQSxHQUF5QjVxRCxNQUszQzhNLElBRUE4N0MsRUFBQSxTQUFBb0MsR0FDQTlDLEVBQUEza0QsS0FBQXFsRCxFQTNKQSxVQTJKQSxNQUNBL2dELEVBQUFtakQsR0FDQWxELEVBQUF6c0QsS0FBQWtJLE1BQ0EsSUFDQXluRCxFQUFBdnRELEVBQUFxdEQsRUFBQXZuRCxLQUFBLEdBQUE5RixFQUFBa3RELEVBQUFwbkQsS0FBQSxJQUNLLE1BQUFnRyxHQUNMb2hELEVBQUF0dkQsS0FBQWtJLEtBQUFnRyxNQUlBdStDLEVBQUEsU0FBQWtELEdBQ0F6bkQsS0FBQStsRCxHQUFBLEdBQ0EvbEQsS0FBQWtuRCxRQUFBN3JELEVBQ0EyRSxLQUFBa21ELEdBQUEsRUFDQWxtRCxLQUFBcW5ELElBQUEsRUFDQXJuRCxLQUFBZ21ELFFBQUEzcUQsRUFDQTJFLEtBQUF3bUQsR0FBQSxFQUNBeG1ELEtBQUE4bEQsSUFBQSxJQUVBdnNELFVBQXVCaEMsRUFBUSxJQUFSQSxDQUF5Qjh0RCxFQUFBOXJELFVBQUEsQ0FFaEQrMEMsS0FBQSxTQUFBb1osRUFBQUMsR0FDQSxJQUFBeEIsRUFBQVgsRUFBQXBHLEVBQUFwL0MsS0FBQXFsRCxJQU9BLE9BTkFjLEVBQUFGLEdBQUEsbUJBQUF5QixLQUNBdkIsRUFBQUcsS0FBQSxtQkFBQXFCLEtBQ0F4QixFQUFBSSxPQUFBakIsRUFBQXYwQyxFQUFBdzFDLFlBQUFsckQsRUFDQTJFLEtBQUErbEQsR0FBQS9tRCxLQUFBbW5ELEdBQ0FubUQsS0FBQWtuRCxJQUFBbG5ELEtBQUFrbkQsR0FBQWxvRCxLQUFBbW5ELEdBQ0FubUQsS0FBQWttRCxJQUFBTixFQUFBNWxELE1BQUEsR0FDQW1tRCxFQUFBeHpDLFNBR0FpMUMsTUFBQSxTQUFBRCxHQUNBLE9BQUEzbkQsS0FBQXN1QyxVQUFBanpDLEVBQUFzc0QsTUFHQWxELEVBQUEsV0FDQSxJQUFBOXhDLEVBQUEsSUFBQTR4QyxFQUNBdmtELEtBQUEyUyxVQUNBM1MsS0FBQXlTLFFBQUF2WSxFQUFBcXRELEVBQUE1MEMsRUFBQSxHQUNBM1MsS0FBQTBTLE9BQUF4WSxFQUFBa3RELEVBQUF6MEMsRUFBQSxJQUVBb3lDLEVBQUF6b0QsRUFBQWtwRCxFQUFBLFNBQUFoekMsR0FDQSxPQUFBQSxJQUFBNnlDLEdBQUE3eUMsSUFBQWt5QyxFQUNBLElBQUFELEVBQUFqeUMsR0FDQWd5QyxFQUFBaHlDLEtBSUFyWSxJQUFBUyxFQUFBVCxFQUFBcUIsRUFBQXJCLEVBQUFPLEdBQUE2TyxFQUFBLENBQTBEcytDLFFBQUF4QyxJQUMxRDl0RCxFQUFRLEdBQVJBLENBQThCOHRELEVBN005QixXQThNQTl0RCxFQUFRLElBQVJBLENBOU1BLFdBK01BbXRELEVBQVVudEQsRUFBUSxJQUFTLFFBRzNCNEMsSUFBQVcsRUFBQVgsRUFBQU8sR0FBQTZPLEVBbE5BLFVBa05BLENBRUFtSixPQUFBLFNBQUFqYSxHQUNBLElBQUFxdkQsRUFBQXRDLEVBQUF4bEQsTUFHQSxPQURBNlMsRUFEQWkxQyxFQUFBcDFDLFFBQ0FqYSxHQUNBcXZELEVBQUFuMUMsV0FHQXhZLElBQUFXLEVBQUFYLEVBQUFPLEdBQUFrVixJQUFBckcsR0EzTkEsVUEyTkEsQ0FFQWtKLFFBQUEsU0FBQXVJLEdBQ0EsT0FBQWtxQyxFQUFBdDFDLEdBQUE1UCxPQUFBMGtELEVBQUFXLEVBQUFybEQsS0FBQWdiLE1BR0E3Z0IsSUFBQVcsRUFBQVgsRUFBQU8sSUFBQTZPLEdBQWdEaFMsRUFBUSxJQUFSQSxDQUF3QixTQUFBd3dELEdBQ3hFMUMsRUFBQTV2QyxJQUFBc3lDLEdBQUEsTUFBQXhDLE1BbE9BLFVBbU9DLENBRUQ5dkMsSUFBQSxTQUFBdXlDLEdBQ0EsSUFBQXgxQyxFQUFBeFMsS0FDQThuRCxFQUFBdEMsRUFBQWh6QyxHQUNBQyxFQUFBcTFDLEVBQUFyMUMsUUFDQUMsRUFBQW8xQyxFQUFBcDFDLE9BQ0FoTCxFQUFBczlDLEVBQUEsV0FDQSxJQUFBbEIsRUFBQSxHQUNBN2tELEVBQUEsRUFDQWdwRCxFQUFBLEVBQ0FyRCxFQUFBb0QsR0FBQSxXQUFBcjFDLEdBQ0EsSUFBQXUxQyxFQUFBanBELElBQ0FrcEQsR0FBQSxFQUNBckUsRUFBQTlrRCxVQUFBM0QsR0FDQTRzRCxJQUNBejFDLEVBQUFDLFFBQUFFLEdBQUEyN0IsS0FBQSxTQUFBMTFDLEdBQ0F1dkQsSUFDQUEsR0FBQSxFQUNBckUsRUFBQW9FLEdBQUF0dkQsSUFDQXF2RCxHQUFBeDFDLEVBQUFxeEMsS0FDU3B4QyxPQUVUdTFDLEdBQUF4MUMsRUFBQXF4QyxLQUdBLE9BREFwOEMsRUFBQWpMLEdBQUFpVyxFQUFBaEwsRUFBQW9ULEdBQ0FndEMsRUFBQW4xQyxTQUdBeTFDLEtBQUEsU0FBQUosR0FDQSxJQUFBeDFDLEVBQUF4UyxLQUNBOG5ELEVBQUF0QyxFQUFBaHpDLEdBQ0FFLEVBQUFvMUMsRUFBQXAxQyxPQUNBaEwsRUFBQXM5QyxFQUFBLFdBQ0FKLEVBQUFvRCxHQUFBLFdBQUFyMUMsR0FDQUgsRUFBQUMsUUFBQUUsR0FBQTI3QixLQUFBd1osRUFBQXIxQyxRQUFBQyxPQUlBLE9BREFoTCxFQUFBakwsR0FBQWlXLEVBQUFoTCxFQUFBb1QsR0FDQWd0QyxFQUFBbjFDLDBCQzNSQWpiLEVBQUFELFFBQUEsU0FBQXNFLEVBQUFpbkQsRUFBQTlxRCxFQUFBbXdELEdBQ0EsS0FBQXRzRCxhQUFBaW5ELFNBQUEzbkQsSUFBQWd0RCxRQUFBdHNELEVBQ0EsTUFBQUMsVUFBQTlELEVBQUEsMkJBQ0csT0FBQTZELG9CQ0hILElBQUE3QixFQUFVM0MsRUFBUSxJQUNsQk8sRUFBV1AsRUFBUSxLQUNuQit3RCxFQUFrQi93RCxFQUFRLEtBQzFCMkUsRUFBZTNFLEVBQVEsR0FDdkJzUCxFQUFldFAsRUFBUSxJQUN2Qmd4RCxFQUFnQmh4RCxFQUFRLEtBQ3hCaXhELEVBQUEsR0FDQUMsRUFBQSxJQUNBaHhELEVBQUFDLEVBQUFELFFBQUEsU0FBQXV3RCxFQUFBbkUsRUFBQXQvQyxFQUFBQyxFQUFBMjdDLEdBQ0EsSUFHQTVnRCxFQUFBeVEsRUFBQS9GLEVBQUF2QyxFQUhBZ2hELEVBQUF2SSxFQUFBLFdBQXVDLE9BQUE2SCxHQUFtQk8sRUFBQVAsR0FDMUQxckQsRUFBQXBDLEVBQUFxSyxFQUFBQyxFQUFBcS9DLEVBQUEsS0FDQTVrRCxFQUFBLEVBRUEsc0JBQUF5cEQsRUFBQSxNQUFBMXNELFVBQUFnc0QsRUFBQSxxQkFFQSxHQUFBTSxFQUFBSSxJQUFBLElBQUFucEQsRUFBQXNILEVBQUFtaEQsRUFBQXpvRCxRQUFtRUEsRUFBQU4sRUFBZ0JBLElBRW5GLElBREF5SSxFQUFBbThDLEVBQUF2bkQsRUFBQUosRUFBQThULEVBQUFnNEMsRUFBQS9vRCxJQUFBLEdBQUErUSxFQUFBLElBQUExVCxFQUFBMHJELEVBQUEvb0QsT0FDQXVwRCxHQUFBOWdELElBQUErZ0QsRUFBQSxPQUFBL2dELE9BQ0csSUFBQXVDLEVBQUF5K0MsRUFBQTV3RCxLQUFBa3dELEtBQTRDaDRDLEVBQUEvRixFQUFBbkssUUFBQXVULE1BRS9DLElBREEzTCxFQUFBNVAsRUFBQW1TLEVBQUEzTixFQUFBMFQsRUFBQXBYLE1BQUFpckQsTUFDQTJFLEdBQUE5Z0QsSUFBQStnRCxFQUFBLE9BQUEvZ0QsSUFHQThnRCxRQUNBL3dELEVBQUFneEQsMEJDdkJBLElBQUF2c0QsRUFBZTNFLEVBQVEsR0FDdkJHLEVBQUFELFFBQUEsU0FBQXdTLEVBQUExRixFQUFBM0wsRUFBQWlyRCxHQUNBLElBQ0EsT0FBQUEsRUFBQXQvQyxFQUFBckksRUFBQXRELEdBQUEsR0FBQUEsRUFBQSxJQUFBMkwsRUFBQTNMLEdBRUcsTUFBQTZELEdBQ0gsSUFBQWtzRCxFQUFBMStDLEVBQUEsT0FFQSxXQURBNU8sSUFBQXN0RCxHQUFBenNELEVBQUF5c0QsRUFBQTd3RCxLQUFBbVMsSUFDQXhOLHFCQ1JBLElBQUF3VCxFQUFnQjFZLEVBQVEsSUFDeEI0b0QsRUFBZTVvRCxFQUFRLEVBQVJBLENBQWdCLFlBQy9Cb3JELEVBQUFwZ0QsTUFBQWhKLFVBRUE3QixFQUFBRCxRQUFBLFNBQUFzRSxHQUNBLFlBQUFWLElBQUFVLElBQUFrVSxFQUFBMU4sUUFBQXhHLEdBQUE0bUQsRUFBQXhDLEtBQUFwa0QscUJDTkEsSUFBQXVVLEVBQWMvWSxFQUFRLElBQ3RCNG9ELEVBQWU1b0QsRUFBUSxFQUFSQSxDQUFnQixZQUMvQjBZLEVBQWdCMVksRUFBUSxJQUN4QkcsRUFBQUQsUUFBaUJGLEVBQVEsSUFBU3F4RCxrQkFBQSxTQUFBN3NELEdBQ2xDLEdBQUFWLE1BQUFVLEVBQUEsT0FBQUEsRUFBQW9rRCxJQUNBcGtELEVBQUEsZUFDQWtVLEVBQUFLLEVBQUF2VSxzQkNMQSxJQUFBRyxFQUFlM0UsRUFBUSxHQUN2QitNLEVBQWdCL00sRUFBUSxJQUN4QituRCxFQUFjL25ELEVBQVEsRUFBUkEsQ0FBZ0IsV0FDOUJHLEVBQUFELFFBQUEsU0FBQThFLEVBQUFxTixHQUNBLElBQ0E5TyxFQURBMFgsRUFBQXRXLEVBQUFLLEdBQUE0ZixZQUVBLFlBQUE5Z0IsSUFBQW1YLEdBQUFuWCxPQUFBUCxFQUFBb0IsRUFBQXNXLEdBQUE4c0MsSUFBQTExQyxFQUFBdEYsRUFBQXhKLHFCQ1BBLElBQUFoQixFQUFhdkMsRUFBUSxHQUNyQnN4RCxFQUFnQnR4RCxFQUFRLElBQVNxVCxJQUNqQ2srQyxFQUFBaHZELEVBQUFpdkQsa0JBQUFqdkQsRUFBQWt2RCx1QkFDQWo0QyxFQUFBalgsRUFBQWlYLFFBQ0E4MkMsRUFBQS90RCxFQUFBK3RELFFBQ0F2QyxFQUE2QixXQUFoQi90RCxFQUFRLEdBQVJBLENBQWdCd1osR0FFN0JyWixFQUFBRCxRQUFBLFdBQ0EsSUFBQXdlLEVBQUEwMUIsRUFBQWlhLEVBRUFxRCxFQUFBLFdBQ0EsSUFBQXJ6QyxFQUFBclIsRUFFQSxJQURBK2dELElBQUExdkMsRUFBQTdFLEVBQUF3MUMsU0FBQTN3QyxFQUFBK3dDLE9BQ0Exd0MsR0FBQSxDQUNBMVIsRUFBQTBSLEVBQUExUixHQUNBMFIsSUFBQW5XLEtBQ0EsSUFDQXlFLElBQ08sTUFBQTlILEdBR1AsTUFGQXdaLEVBQUEydkMsSUFDQWphLE9BQUF0d0MsRUFDQW9CLEdBRUtrdkMsT0FBQXR3QyxFQUNMdWEsS0FBQTh3QyxTQUlBLEdBQUFwQixFQUNBTSxFQUFBLFdBQ0E3MEMsRUFBQVksU0FBQXMzQyxTQUdHLElBQUFILEdBQUFodkQsRUFBQW92RCxXQUFBcHZELEVBQUFvdkQsVUFBQUMsV0FRQSxHQUFBdEIsS0FBQXAxQyxRQUFBLENBRUgsSUFBQUUsRUFBQWsxQyxFQUFBcDFDLGFBQUFwWCxHQUNBdXFELEVBQUEsV0FDQWp6QyxFQUFBMjdCLEtBQUEyYSxTQVNBckQsRUFBQSxXQUVBaUQsRUFBQS93RCxLQUFBZ0MsRUFBQW12RCxRQXZCRyxDQUNILElBQUFHLEdBQUEsRUFDQWx2QixFQUFBaDBCLFNBQUF3VCxlQUFBLElBQ0EsSUFBQW92QyxFQUFBRyxHQUFBSSxRQUFBbnZCLEVBQUEsQ0FBdUNvdkIsZUFBQSxJQUN2QzFELEVBQUEsV0FDQTFyQixFQUFBeG9CLEtBQUEwM0MsTUFzQkEsZ0JBQUE3a0QsR0FDQSxJQUFBc2dELEVBQUEsQ0FBZ0J0Z0QsS0FBQXpFLFVBQUF6RSxHQUNoQnN3QyxNQUFBN3JDLEtBQUEra0QsR0FDQTV1QyxJQUNBQSxFQUFBNHVDLEVBQ0FlLEtBQ0tqYSxFQUFBa1osbUJDbEVMbnRELEVBQUFELFFBQUEsU0FBQWdNLEdBQ0EsSUFDQSxPQUFZaEgsR0FBQSxFQUFBcWUsRUFBQXJYLEtBQ1QsTUFBQWhILEdBQ0gsT0FBWUEsR0FBQSxFQUFBcWUsRUFBQXJlLHNCQ0paLElBQ0F5c0QsRUFEYTN4RCxFQUFRLEdBQ3JCMnhELFVBRUF4eEQsRUFBQUQsUUFBQXl4RCxLQUFBakUsV0FBQSxvQkNIQSxJQUFBL29ELEVBQWUzRSxFQUFRLEdBQ3ZCdUUsRUFBZXZFLEVBQVEsR0FDdkJpdUQsRUFBMkJqdUQsRUFBUSxJQUVuQ0csRUFBQUQsUUFBQSxTQUFBK2EsRUFBQXdJLEdBRUEsR0FEQTllLEVBQUFzVyxHQUNBMVcsRUFBQWtmLE1BQUFtQixjQUFBM0osRUFBQSxPQUFBd0ksRUFDQSxJQUFBdXVDLEVBQUEvRCxFQUFBbHBELEVBQUFrVyxHQUdBLE9BREFDLEVBREE4MkMsRUFBQTkyQyxTQUNBdUksR0FDQXV1QyxFQUFBNTJDLDBCQ1ZBLElBQUExWSxFQUFlMUMsRUFBUSxJQUN2QkcsRUFBQUQsUUFBQSxTQUFBMEQsRUFBQThRLEVBQUEvSCxHQUNBLFFBQUFoTCxLQUFBK1MsRUFBQWhTLEVBQUFrQixFQUFBakMsRUFBQStTLEVBQUEvUyxHQUFBZ0wsR0FDQSxPQUFBL0ksaUNDRkEsSUFBQXJCLEVBQWF2QyxFQUFRLEdBQ3JCOEUsRUFBUzlFLEVBQVEsR0FDakJvUSxFQUFrQnBRLEVBQVEsR0FDMUIrbkQsRUFBYy9uRCxFQUFRLEVBQVJBLENBQWdCLFdBRTlCRyxFQUFBRCxRQUFBLFNBQUFvUSxHQUNBLElBQUEySyxFQUFBMVksRUFBQStOLEdBQ0FGLEdBQUE2SyxNQUFBOHNDLElBQUFqakQsRUFBQUMsRUFBQWtXLEVBQUE4c0MsRUFBQSxDQUNBNTlDLGNBQUEsRUFDQWxKLElBQUEsV0FBc0IsT0FBQXdILDBCQ1Z0QixJQUFBbWdELEVBQWU1b0QsRUFBUSxFQUFSQSxDQUFnQixZQUMvQml5RCxHQUFBLEVBRUEsSUFDQSxJQUFBQyxFQUFBLElBQUF0SixLQUNBc0osRUFBQSxrQkFBaUNELEdBQUEsR0FFakNqbkQsTUFBQTRNLEtBQUFzNkMsRUFBQSxXQUFpQyxVQUNoQyxNQUFBaHRELElBRUQvRSxFQUFBRCxRQUFBLFNBQUFnTSxFQUFBaW1ELEdBQ0EsSUFBQUEsSUFBQUYsRUFBQSxTQUNBLElBQUF0bEQsR0FBQSxFQUNBLElBQ0EsSUFBQXlsRCxFQUFBLElBQ0E1QixFQUFBNEIsRUFBQXhKLEtBQ0E0SCxFQUFBam9ELEtBQUEsV0FBNkIsT0FBU3VULEtBQUFuUCxHQUFBLElBQ3RDeWxELEVBQUF4SixHQUFBLFdBQWlDLE9BQUE0SCxHQUNqQ3RrRCxFQUFBa21ELEdBQ0csTUFBQWx0RCxJQUNILE9BQUF5SCxvQkNiQSxJQUFBMGxELEVBQUEsU0FBQW55RCxHQUNBLGFBRUEsSUFFQTRELEVBRkF3dUQsRUFBQXh4RCxPQUFBa0IsVUFDQXV3RCxFQUFBRCxFQUFBcndELGVBRUFtUCxFQUFBLG1CQUFBalEsY0FBQSxHQUNBcXhELEVBQUFwaEQsRUFBQXNCLFVBQUEsYUFDQSsvQyxFQUFBcmhELEVBQUFzaEQsZUFBQSxrQkFDQUMsRUFBQXZoRCxFQUFBaFEsYUFBQSxnQkFFQSxTQUFBbVIsRUFBQXFnRCxFQUFBQyxFQUFBeHVELEVBQUF5dUQsR0FFQSxJQUFBQyxFQUFBRixLQUFBN3dELHFCQUFBZ3hELEVBQUFILEVBQUFHLEVBQ0FDLEVBQUFueUQsT0FBQVksT0FBQXF4RCxFQUFBL3dELFdBQ0FzaUIsRUFBQSxJQUFBNHVDLEVBQUFKLEdBQUEsSUFNQSxPQUZBRyxFQUFBRSxRQWtNQSxTQUFBUCxFQUFBdnVELEVBQUFpZ0IsR0FDQSxJQUFBamIsRUFBQStwRCxFQUVBLGdCQUFBdGxELEVBQUE3QyxHQUNBLEdBQUE1QixJQUFBZ3FELEVBQ0EsVUFBQXhzRCxNQUFBLGdDQUdBLEdBQUF3QyxJQUFBaXFELEVBQUEsQ0FDQSxhQUFBeGxELEVBQ0EsTUFBQTdDLEVBS0EsT0FBQXNvRCxJQU1BLElBSEFqdkMsRUFBQXhXLFNBQ0F3VyxFQUFBclosUUFFQSxDQUNBLElBQUF1b0QsRUFBQWx2QyxFQUFBa3ZDLFNBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQUFGLEVBQUFsdkMsR0FDQSxHQUFBbXZDLEVBQUEsQ0FDQSxHQUFBQSxJQUFBRSxFQUFBLFNBQ0EsT0FBQUYsR0FJQSxZQUFBbnZDLEVBQUF4VyxPQUdBd1csRUFBQXN2QyxLQUFBdHZDLEVBQUF1dkMsTUFBQXZ2QyxFQUFBclosU0FFUyxhQUFBcVosRUFBQXhXLE9BQUEsQ0FDVCxHQUFBekUsSUFBQStwRCxFQUVBLE1BREEvcEQsRUFBQWlxRCxFQUNBaHZDLEVBQUFyWixJQUdBcVosRUFBQXd2QyxrQkFBQXh2QyxFQUFBclosU0FFUyxXQUFBcVosRUFBQXhXLFFBQ1R3VyxFQUFBeXZDLE9BQUEsU0FBQXp2QyxFQUFBclosS0FHQTVCLEVBQUFncUQsRUFFQSxJQUFBVyxFQUFBQyxFQUFBckIsRUFBQXZ1RCxFQUFBaWdCLEdBQ0EsY0FBQTB2QyxFQUFBbnhELEtBQUEsQ0FPQSxHQUpBd0csRUFBQWliLEVBQUF4SSxLQUNBdzNDLEVBQ0FZLEVBRUFGLEVBQUEvb0QsTUFBQTBvRCxFQUNBLFNBR0EsT0FDQXR5RCxNQUFBMnlELEVBQUEvb0QsSUFDQTZRLEtBQUF3SSxFQUFBeEksTUFHUyxVQUFBazRDLEVBQUFueEQsT0FDVHdHLEVBQUFpcUQsRUFHQWh2QyxFQUFBeFcsT0FBQSxRQUNBd1csRUFBQXJaLElBQUErb0QsRUFBQS9vRCxPQTFRQWtwRCxDQUFBdkIsRUFBQXZ1RCxFQUFBaWdCLEdBRUEydUMsRUFjQSxTQUFBZ0IsRUFBQWpuRCxFQUFBM0csRUFBQTRFLEdBQ0EsSUFDQSxPQUFjcEksS0FBQSxTQUFBb0ksSUFBQStCLEVBQUF6TSxLQUFBOEYsRUFBQTRFLElBQ1QsTUFBQXdELEdBQ0wsT0FBYzVMLEtBQUEsUUFBQW9JLElBQUF3RCxJQWhCZHZPLEVBQUFxUyxPQW9CQSxJQUFBNmdELEVBQUEsaUJBQ0FjLEVBQUEsaUJBQ0FiLEVBQUEsWUFDQUMsRUFBQSxZQUlBSyxFQUFBLEdBTUEsU0FBQVgsS0FDQSxTQUFBb0IsS0FDQSxTQUFBQyxLQUlBLElBQUF2SSxFQUFBLEdBQ0FBLEVBQUEwRyxHQUFBLFdBQ0EsT0FBQS9wRCxNQUdBLElBQUE2ckQsRUFBQXh6RCxPQUFBeUYsZUFDQWd1RCxFQUFBRCxPQUFBL0gsRUFBQSxNQUNBZ0ksR0FDQUEsSUFBQWpDLEdBQ0FDLEVBQUFoeUQsS0FBQWcwRCxFQUFBL0IsS0FHQTFHLEVBQUF5SSxHQUdBLElBQUFDLEVBQUFILEVBQUFyeUQsVUFDQWd4RCxFQUFBaHhELFVBQUFsQixPQUFBWSxPQUFBb3FELEdBUUEsU0FBQTJJLEVBQUF6eUQsR0FDQSwwQkFBQW1ILFFBQUEsU0FBQTJFLEdBQ0E5TCxFQUFBOEwsR0FBQSxTQUFBN0MsR0FDQSxPQUFBeEMsS0FBQTBxRCxRQUFBcmxELEVBQUE3QyxNQW9DQSxTQUFBeXBELEVBQUF6QixHQWdDQSxJQUFBMEIsRUFnQ0Fsc0QsS0FBQTBxRCxRQTlCQSxTQUFBcmxELEVBQUE3QyxHQUNBLFNBQUEycEQsSUFDQSxXQUFBdEUsUUFBQSxTQUFBcDFDLEVBQUFDLElBbkNBLFNBQUE5QixFQUFBdkwsRUFBQTdDLEVBQUFpUSxFQUFBQyxHQUNBLElBQUE2NEMsRUFBQUMsRUFBQWhCLEVBQUFubEQsR0FBQW1sRCxFQUFBaG9ELEdBQ0EsYUFBQStvRCxFQUFBbnhELEtBRU8sQ0FDUCxJQUFBc04sRUFBQTZqRCxFQUFBL29ELElBQ0E1SixFQUFBOE8sRUFBQTlPLE1BQ0EsT0FBQUEsR0FDQSxpQkFBQUEsR0FDQWt4RCxFQUFBaHlELEtBQUFjLEVBQUEsV0FDQWl2RCxRQUFBcDFDLFFBQUE3WixFQUFBd3pELFNBQUE5ZCxLQUFBLFNBQUExMUMsR0FDQWdZLEVBQUEsT0FBQWhZLEVBQUE2WixFQUFBQyxJQUNXLFNBQUExTSxHQUNYNEssRUFBQSxRQUFBNUssRUFBQXlNLEVBQUFDLEtBSUFtMUMsUUFBQXAxQyxRQUFBN1osR0FBQTAxQyxLQUFBLFNBQUErZCxHQUlBM2tELEVBQUE5TyxNQUFBeXpELEVBQ0E1NUMsRUFBQS9LLElBQ1MsU0FBQXZFLEdBR1QsT0FBQXlOLEVBQUEsUUFBQXpOLEVBQUFzUCxFQUFBQyxLQXZCQUEsRUFBQTY0QyxFQUFBL29ELEtBaUNBb08sQ0FBQXZMLEVBQUE3QyxFQUFBaVEsRUFBQUMsS0FJQSxPQUFBdzVDLEVBYUFBLElBQUE1ZCxLQUNBNmQsRUFHQUEsR0FDQUEsS0ErR0EsU0FBQWxCLEVBQUFGLEVBQUFsdkMsR0FDQSxJQUFBeFcsRUFBQTBsRCxFQUFBOWdELFNBQUE0UixFQUFBeFcsUUFDQSxHQUFBQSxJQUFBaEssRUFBQSxDQUtBLEdBRkF3Z0IsRUFBQWt2QyxTQUFBLEtBRUEsVUFBQWx2QyxFQUFBeFcsT0FBQSxDQUVBLEdBQUEwbEQsRUFBQTlnRCxTQUFBLFNBR0E0UixFQUFBeFcsT0FBQSxTQUNBd1csRUFBQXJaLElBQUFuSCxFQUNBNHZELEVBQUFGLEVBQUFsdkMsR0FFQSxVQUFBQSxFQUFBeFcsUUFHQSxPQUFBNmxELEVBSUFydkMsRUFBQXhXLE9BQUEsUUFDQXdXLEVBQUFyWixJQUFBLElBQUF4RyxVQUNBLGtEQUdBLE9BQUFrdkQsRUFHQSxJQUFBSyxFQUFBQyxFQUFBbm1ELEVBQUEwbEQsRUFBQTlnRCxTQUFBNFIsRUFBQXJaLEtBRUEsYUFBQStvRCxFQUFBbnhELEtBSUEsT0FIQXloQixFQUFBeFcsT0FBQSxRQUNBd1csRUFBQXJaLElBQUErb0QsRUFBQS9vRCxJQUNBcVosRUFBQWt2QyxTQUFBLEtBQ0FHLEVBR0EsSUFBQW9CLEVBQUFmLEVBQUEvb0QsSUFFQSxPQUFBOHBELEVBT0FBLEVBQUFqNUMsTUFHQXdJLEVBQUFrdkMsRUFBQXdCLFlBQUFELEVBQUExekQsTUFHQWlqQixFQUFBL2IsS0FBQWlyRCxFQUFBeUIsUUFRQSxXQUFBM3dDLEVBQUF4VyxTQUNBd1csRUFBQXhXLE9BQUEsT0FDQXdXLEVBQUFyWixJQUFBbkgsR0FVQXdnQixFQUFBa3ZDLFNBQUEsS0FDQUcsR0FOQW9CLEdBM0JBendDLEVBQUF4VyxPQUFBLFFBQ0F3VyxFQUFBclosSUFBQSxJQUFBeEcsVUFBQSxvQ0FDQTZmLEVBQUFrdkMsU0FBQSxLQUNBRyxHQW9EQSxTQUFBdUIsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLENBQWlCQyxPQUFBRixFQUFBLElBRWpCLEtBQUFBLElBQ0FDLEVBQUFFLFNBQUFILEVBQUEsSUFHQSxLQUFBQSxJQUNBQyxFQUFBRyxXQUFBSixFQUFBLEdBQ0FDLEVBQUFJLFNBQUFMLEVBQUEsSUFHQTFzRCxLQUFBZ3RELFdBQUFodUQsS0FBQTJ0RCxHQUdBLFNBQUFNLEVBQUFOLEdBQ0EsSUFBQXBCLEVBQUFvQixFQUFBTyxZQUFBLEdBQ0EzQixFQUFBbnhELEtBQUEsZ0JBQ0FteEQsRUFBQS9vRCxJQUNBbXFELEVBQUFPLFdBQUEzQixFQUdBLFNBQUFkLEVBQUFKLEdBSUFycUQsS0FBQWd0RCxXQUFBLEVBQXdCSixPQUFBLFNBQ3hCdkMsRUFBQTNwRCxRQUFBK3JELEVBQUF6c0QsTUFDQUEsS0FBQW10RCxPQUFBLEdBOEJBLFNBQUFySixFQUFBa0UsR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQW9GLEVBQUFwRixFQUFBK0IsR0FDQSxHQUFBcUQsRUFDQSxPQUFBQSxFQUFBdDFELEtBQUFrd0QsR0FHQSxzQkFBQUEsRUFBQWxvRCxLQUNBLE9BQUFrb0QsRUFHQSxJQUFBcjRDLE1BQUFxNEMsRUFBQXpvRCxRQUFBLENBQ0EsSUFBQTVILEdBQUEsRUFBQW1JLEVBQUEsU0FBQUEsSUFDQSxPQUFBbkksRUFBQXF3RCxFQUFBem9ELFFBQ0EsR0FBQXVxRCxFQUFBaHlELEtBQUFrd0QsRUFBQXJ3RCxHQUdBLE9BRkFtSSxFQUFBbEgsTUFBQW92RCxFQUFBcndELEdBQ0FtSSxFQUFBdVQsTUFBQSxFQUNBdlQsRUFPQSxPQUhBQSxFQUFBbEgsTUFBQXlDLEVBQ0F5RSxFQUFBdVQsTUFBQSxFQUVBdlQsR0FHQSxPQUFBQSxVQUtBLE9BQVlBLEtBQUFnckQsR0FJWixTQUFBQSxJQUNBLE9BQVlseUQsTUFBQXlDLEVBQUFnWSxNQUFBLEdBK01aLE9BeG1CQXM0QyxFQUFBcHlELFVBQUF3eUQsRUFBQTV2QyxZQUFBeXZDLEVBQ0FBLEVBQUF6dkMsWUFBQXd2QyxFQUNBQyxFQUFBMUIsR0FDQXlCLEVBQUE3K0MsWUFBQSxvQkFZQXJWLEVBQUE0MUQsb0JBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBLG1CQUFBRCxLQUFBbnhDLFlBQ0EsUUFBQW94QyxJQUNBQSxJQUFBNUIsR0FHQSx1QkFBQTRCLEVBQUF6Z0QsYUFBQXlnRCxFQUFBcjFELFFBSUFULEVBQUErMUQsS0FBQSxTQUFBRixHQVVBLE9BVEFqMUQsT0FBQW1ZLGVBQ0FuWSxPQUFBbVksZUFBQTg4QyxFQUFBMUIsSUFFQTBCLEVBQUFsSixVQUFBd0gsRUFDQTFCLEtBQUFvRCxJQUNBQSxFQUFBcEQsR0FBQSxzQkFHQW9ELEVBQUEvekQsVUFBQWxCLE9BQUFZLE9BQUE4eUQsR0FDQXVCLEdBT0E3MUQsRUFBQWcyRCxNQUFBLFNBQUFqckQsR0FDQSxPQUFZNHBELFFBQUE1cEQsSUFzRVp3cEQsRUFBQUMsRUFBQTF5RCxXQUNBMHlELEVBQUExeUQsVUFBQXl3RCxHQUFBLFdBQ0EsT0FBQWhxRCxNQUVBdkksRUFBQXcwRCxnQkFLQXgwRCxFQUFBaTJELE1BQUEsU0FBQXZELEVBQUFDLEVBQUF4dUQsRUFBQXl1RCxHQUNBLElBQUF0QyxFQUFBLElBQUFrRSxFQUNBbmlELEVBQUFxZ0QsRUFBQUMsRUFBQXh1RCxFQUFBeXVELElBR0EsT0FBQTV5RCxFQUFBNDFELG9CQUFBakQsR0FDQXJDLEVBQ0FBLEVBQUFqb0QsT0FBQXd1QyxLQUFBLFNBQUE1bUMsR0FDQSxPQUFBQSxFQUFBMkwsS0FBQTNMLEVBQUE5TyxNQUFBbXZELEVBQUFqb0QsVUF1S0Frc0QsRUFBQUQsR0FFQUEsRUFBQTdCLEdBQUEsWUFPQTZCLEVBQUFoQyxHQUFBLFdBQ0EsT0FBQS9wRCxNQUdBK3JELEVBQUEzdUQsU0FBQSxXQUNBLDRCQWtDQTNGLEVBQUE2SSxLQUFBLFNBQUFqSCxHQUNBLElBQUFpSCxFQUFBLEdBQ0EsUUFBQXBILEtBQUFHLEVBQ0FpSCxFQUFBdEIsS0FBQTlGLEdBTUEsT0FKQW9ILEVBQUFxdEQsVUFJQSxTQUFBN3RELElBQ0EsS0FBQVEsRUFBQWYsUUFBQSxDQUNBLElBQUFyRyxFQUFBb0gsRUFBQTRjLE1BQ0EsR0FBQWhrQixLQUFBRyxFQUdBLE9BRkF5RyxFQUFBbEgsTUFBQU0sRUFDQTRHLEVBQUF1VCxNQUFBLEVBQ0F2VCxFQVFBLE9BREFBLEVBQUF1VCxNQUFBLEVBQ0F2VCxJQXNDQXJJLEVBQUFxc0QsU0FNQTJHLEVBQUFseEQsVUFBQSxDQUNBNGlCLFlBQUFzdUMsRUFFQTBDLE1BQUEsU0FBQVMsR0FjQSxHQWJBNXRELEtBQUE2dEQsS0FBQSxFQUNBN3RELEtBQUFGLEtBQUEsRUFHQUUsS0FBQW1yRCxLQUFBbnJELEtBQUFvckQsTUFBQS92RCxFQUNBMkUsS0FBQXFULE1BQUEsRUFDQXJULEtBQUErcUQsU0FBQSxLQUVBL3FELEtBQUFxRixPQUFBLE9BQ0FyRixLQUFBd0MsSUFBQW5ILEVBRUEyRSxLQUFBZ3RELFdBQUF0c0QsUUFBQXVzRCxJQUVBVyxFQUNBLFFBQUExMUQsS0FBQThILEtBRUEsTUFBQTlILEVBQUEyWCxPQUFBLElBQ0FpNkMsRUFBQWh5RCxLQUFBa0ksS0FBQTlILEtBQ0F5WCxPQUFBelgsRUFBQXlHLE1BQUEsTUFDQXFCLEtBQUE5SCxHQUFBbUQsSUFNQXl5RCxLQUFBLFdBQ0E5dEQsS0FBQXFULE1BQUEsRUFFQSxJQUNBMDZDLEVBREEvdEQsS0FBQWd0RCxXQUFBLEdBQ0FFLFdBQ0EsYUFBQWEsRUFBQTN6RCxLQUNBLE1BQUEyekQsRUFBQXZyRCxJQUdBLE9BQUF4QyxLQUFBZ3VELE1BR0EzQyxrQkFBQSxTQUFBNEMsR0FDQSxHQUFBanVELEtBQUFxVCxLQUNBLE1BQUE0NkMsRUFHQSxJQUFBcHlDLEVBQUE3YixLQUNBLFNBQUFrdUQsRUFBQUMsRUFBQUMsR0FZQSxPQVhBN0MsRUFBQW54RCxLQUFBLFFBQ0FteEQsRUFBQS9vRCxJQUFBeXJELEVBQ0FweUMsRUFBQS9iLEtBQUFxdUQsRUFFQUMsSUFHQXZ5QyxFQUFBeFcsT0FBQSxPQUNBd1csRUFBQXJaLElBQUFuSCxLQUdBK3lELEVBR0EsUUFBQXoyRCxFQUFBcUksS0FBQWd0RCxXQUFBenRELE9BQUEsRUFBOEM1SCxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQWcxRCxFQUFBM3NELEtBQUFndEQsV0FBQXIxRCxHQUNBNHpELEVBQUFvQixFQUFBTyxXQUVBLFlBQUFQLEVBQUFDLE9BSUEsT0FBQXNCLEVBQUEsT0FHQSxHQUFBdkIsRUFBQUMsUUFBQTVzRCxLQUFBNnRELEtBQUEsQ0FDQSxJQUFBUSxFQUFBdkUsRUFBQWh5RCxLQUFBNjBELEVBQUEsWUFDQTJCLEVBQUF4RSxFQUFBaHlELEtBQUE2MEQsRUFBQSxjQUVBLEdBQUEwQixHQUFBQyxFQUFBLENBQ0EsR0FBQXR1RCxLQUFBNnRELEtBQUFsQixFQUFBRSxTQUNBLE9BQUFxQixFQUFBdkIsRUFBQUUsVUFBQSxHQUNhLEdBQUE3c0QsS0FBQTZ0RCxLQUFBbEIsRUFBQUcsV0FDYixPQUFBb0IsRUFBQXZCLEVBQUFHLGlCQUdXLEdBQUF1QixHQUNYLEdBQUFydUQsS0FBQTZ0RCxLQUFBbEIsRUFBQUUsU0FDQSxPQUFBcUIsRUFBQXZCLEVBQUFFLFVBQUEsT0FHVyxLQUFBeUIsRUFNWCxVQUFBbHdELE1BQUEsMENBTEEsR0FBQTRCLEtBQUE2dEQsS0FBQWxCLEVBQUFHLFdBQ0EsT0FBQW9CLEVBQUF2QixFQUFBRyxnQkFVQXhCLE9BQUEsU0FBQWx4RCxFQUFBb0ksR0FDQSxRQUFBN0ssRUFBQXFJLEtBQUFndEQsV0FBQXp0RCxPQUFBLEVBQThDNUgsR0FBQSxJQUFRQSxFQUFBLENBQ3RELElBQUFnMUQsRUFBQTNzRCxLQUFBZ3RELFdBQUFyMUQsR0FDQSxHQUFBZzFELEVBQUFDLFFBQUE1c0QsS0FBQTZ0RCxNQUNBL0QsRUFBQWh5RCxLQUFBNjBELEVBQUEsZUFDQTNzRCxLQUFBNnRELEtBQUFsQixFQUFBRyxXQUFBLENBQ0EsSUFBQXlCLEVBQUE1QixFQUNBLE9BSUE0QixJQUNBLFVBQUFuMEQsR0FDQSxhQUFBQSxJQUNBbTBELEVBQUEzQixRQUFBcHFELEdBQ0FBLEdBQUErckQsRUFBQXpCLGFBR0F5QixFQUFBLE1BR0EsSUFBQWhELEVBQUFnRCxJQUFBckIsV0FBQSxHQUlBLE9BSEEzQixFQUFBbnhELE9BQ0FteEQsRUFBQS9vRCxNQUVBK3JELEdBQ0F2dUQsS0FBQXFGLE9BQUEsT0FDQXJGLEtBQUFGLEtBQUF5dUQsRUFBQXpCLFdBQ0E1QixHQUdBbHJELEtBQUF3dUQsU0FBQWpELElBR0FpRCxTQUFBLFNBQUFqRCxFQUFBd0IsR0FDQSxhQUFBeEIsRUFBQW54RCxLQUNBLE1BQUFteEQsRUFBQS9vRCxJQWNBLE1BWEEsVUFBQStvRCxFQUFBbnhELE1BQ0EsYUFBQW14RCxFQUFBbnhELEtBQ0E0RixLQUFBRixLQUFBeXJELEVBQUEvb0QsSUFDTyxXQUFBK29ELEVBQUFueEQsTUFDUDRGLEtBQUFndUQsS0FBQWh1RCxLQUFBd0MsSUFBQStvRCxFQUFBL29ELElBQ0F4QyxLQUFBcUYsT0FBQSxTQUNBckYsS0FBQUYsS0FBQSxPQUNPLFdBQUF5ckQsRUFBQW54RCxNQUFBMnlELElBQ1Avc0QsS0FBQUYsS0FBQWl0RCxHQUdBN0IsR0FHQXVELE9BQUEsU0FBQTNCLEdBQ0EsUUFBQW4xRCxFQUFBcUksS0FBQWd0RCxXQUFBenRELE9BQUEsRUFBOEM1SCxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQWcxRCxFQUFBM3NELEtBQUFndEQsV0FBQXIxRCxHQUNBLEdBQUFnMUQsRUFBQUcsZUFHQSxPQUZBOXNELEtBQUF3dUQsU0FBQTdCLEVBQUFPLFdBQUFQLEVBQUFJLFVBQ0FFLEVBQUFOLEdBQ0F6QixJQUtBdEQsTUFBQSxTQUFBZ0YsR0FDQSxRQUFBajFELEVBQUFxSSxLQUFBZ3RELFdBQUF6dEQsT0FBQSxFQUE4QzVILEdBQUEsSUFBUUEsRUFBQSxDQUN0RCxJQUFBZzFELEVBQUEzc0QsS0FBQWd0RCxXQUFBcjFELEdBQ0EsR0FBQWcxRCxFQUFBQyxXQUFBLENBQ0EsSUFBQXJCLEVBQUFvQixFQUFBTyxXQUNBLGFBQUEzQixFQUFBbnhELEtBQUEsQ0FDQSxJQUFBczBELEVBQUFuRCxFQUFBL29ELElBQ0F5cUQsRUFBQU4sR0FFQSxPQUFBK0IsR0FNQSxVQUFBdHdELE1BQUEsMEJBR0F1d0QsY0FBQSxTQUFBM0csRUFBQXVFLEVBQUFDLEdBYUEsT0FaQXhzRCxLQUFBK3FELFNBQUEsQ0FDQTlnRCxTQUFBNjVDLEVBQUFrRSxHQUNBdUUsYUFDQUMsV0FHQSxTQUFBeHNELEtBQUFxRixTQUdBckYsS0FBQXdDLElBQUFuSCxHQUdBNnZELElBUUF6ekQsRUF2ckJBLENBOHJCNEJDLEVBQUFELFNBRzVCLElBQ0FtM0QsbUJBQUFoRixFQUNDLE1BQUFpRixHQVVEdnpELFNBQUEsNkJBQUFBLENBQUFzdUQsbUJDbnRCQWx5RCxFQUFBRCxRQUFBWSxPQUFBOE4sSUFBQSxTQUFBNlUsRUFBQUMsR0FFQSxPQUFBRCxJQUFBQyxFQUFBLElBQUFELEdBQUEsRUFBQUEsR0FBQSxFQUFBQyxFQUFBRCxNQUFBQyxvQ0NEQSxJQUFBM0ssRUFBYy9ZLEVBQVEsSUFDdEJ1M0QsRUFBQTE3QyxPQUFBN1osVUFBQWtLLEtBSUEvTCxFQUFBRCxRQUFBLFNBQUFnRSxFQUFBWCxHQUNBLElBQUEySSxFQUFBaEksRUFBQWdJLEtBQ0Esc0JBQUFBLEVBQUEsQ0FDQSxJQUFBaUUsRUFBQWpFLEVBQUEzTCxLQUFBMkQsRUFBQVgsR0FDQSxvQkFBQTRNLEVBQ0EsVUFBQTFMLFVBQUEsc0VBRUEsT0FBQTBMLEVBRUEsY0FBQTRJLEVBQUE3VSxHQUNBLFVBQUFPLFVBQUEsK0NBRUEsT0FBQTh5RCxFQUFBaDNELEtBQUEyRCxFQUFBWCxrQ0NsQkF2RCxFQUFRLEtBQ1IsSUFBQTBDLEVBQWUxQyxFQUFRLElBQ3ZCeUMsRUFBV3pDLEVBQVEsSUFDbkI2TixFQUFZN04sRUFBUSxJQUNwQjhNLEVBQWM5TSxFQUFRLElBQ3RCeVEsRUFBVXpRLEVBQVEsR0FDbEJ3M0QsRUFBaUJ4M0QsRUFBUSxJQUV6QituRCxFQUFBdDNDLEVBQUEsV0FFQWduRCxHQUFBNXBELEVBQUEsV0FJQSxJQUFBZ1AsRUFBQSxJQU1BLE9BTEFBLEVBQUEzUSxLQUFBLFdBQ0EsSUFBQWlFLEVBQUEsR0FFQSxPQURBQSxFQUFBdW5ELE9BQUEsQ0FBcUJoekQsRUFBQSxLQUNyQnlMLEdBRUEsU0FBQXBFLFFBQUE4USxFQUFBLFVBR0E4NkMsRUFBQSxXQUVBLElBQUE5NkMsRUFBQSxPQUNBKzZDLEVBQUEvNkMsRUFBQTNRLEtBQ0EyUSxFQUFBM1EsS0FBQSxXQUF5QixPQUFBMHJELEVBQUE3dEQsTUFBQXRCLEtBQUE3QixZQUN6QixJQUFBdUosRUFBQSxLQUFBcEssTUFBQThXLEdBQ0EsV0FBQTFNLEVBQUFuSSxRQUFBLE1BQUFtSSxFQUFBLFVBQUFBLEVBQUEsR0FOQSxHQVNBaFEsRUFBQUQsUUFBQSxTQUFBb1EsRUFBQXRJLEVBQUFrRSxHQUNBLElBQUEyckQsRUFBQXBuRCxFQUFBSCxHQUVBd25ELEdBQUFqcUQsRUFBQSxXQUVBLElBQUE3SSxFQUFBLEdBRUEsT0FEQUEsRUFBQTZ5RCxHQUFBLFdBQTZCLFVBQzdCLE1BQUF2bkQsR0FBQXRMLEtBR0EreUQsRUFBQUQsR0FBQWpxRCxFQUFBLFdBRUEsSUFBQW1xRCxHQUFBLEVBQ0FuN0MsRUFBQSxJQVNBLE9BUkFBLEVBQUEzUSxLQUFBLFdBQThDLE9BQW5COHJELEdBQUEsRUFBbUIsTUFDOUMsVUFBQTFuRCxJQUdBdU0sRUFBQStILFlBQUEsR0FDQS9ILEVBQUErSCxZQUFBbWpDLEdBQUEsV0FBNkMsT0FBQWxyQyxJQUU3Q0EsRUFBQWc3QyxHQUFBLEtBQ0FHLFNBQ0dsMEQsRUFFSCxJQUNBZzBELElBQ0FDLEdBQ0EsWUFBQXpuRCxJQUFBbW5ELEdBQ0EsVUFBQW5uRCxJQUFBcW5ELEVBQ0EsQ0FDQSxJQUFBTSxFQUFBLElBQUFKLEdBQ0FLLEVBQUFoc0QsRUFDQVksRUFDQStxRCxFQUNBLEdBQUF2bkQsR0FDQSxTQUFBNm5ELEVBQUF2OEMsRUFBQWMsRUFBQTA3QyxFQUFBQyxHQUNBLE9BQUF6OEMsRUFBQTFQLE9BQUFzckQsRUFDQU0sSUFBQU8sRUFJQSxDQUFvQnY4QyxNQUFBLEVBQUF6YSxNQUFBNDJELEVBQUExM0QsS0FBQXFiLEVBQUFjLEVBQUEwN0MsSUFFcEIsQ0FBa0J0OEMsTUFBQSxFQUFBemEsTUFBQTgyRCxFQUFBNTNELEtBQUFtYyxFQUFBZCxFQUFBdzhDLElBRWxCLENBQWdCdDhDLE1BQUEsS0FHaEJ3OEMsRUFBQUosRUFBQSxHQUNBSyxFQUFBTCxFQUFBLEdBRUF4MUQsRUFBQWtHLE9BQUE1RyxVQUFBc08sRUFBQWdvRCxHQUNBNzFELEVBQUFvWixPQUFBN1osVUFBQTYxRCxFQUFBLEdBQUE3dkQsRUFHQSxTQUFBNDhDLEVBQUEzNUMsR0FBZ0MsT0FBQXN0RCxFQUFBaDRELEtBQUFxa0QsRUFBQW44QyxLQUFBd0MsSUFHaEMsU0FBQTI1QyxHQUEyQixPQUFBMlQsRUFBQWg0RCxLQUFBcWtELEVBQUFuOEMsd0NDM0YzQixJQUFBK3VELEVBQWlCeDNELEVBQVEsSUFDekJBLEVBQVEsRUFBUkEsQ0FBbUIsQ0FDbkI0RCxPQUFBLFNBQ0EwQyxPQUFBLEVBQ0FreUQsT0FBQWhCLElBQUEsSUFBQXRyRCxNQUNDLENBQ0RBLEtBQUFzckQsa0NDTEEsSUFBQTd5RCxFQUFlM0UsRUFBUSxHQUN2QkcsRUFBQUQsUUFBQSxXQUNBLElBQUErTSxFQUFBdEksRUFBQThELE1BQ0EwSCxFQUFBLEdBTUEsT0FMQWxELEVBQUExSyxTQUFBNE4sR0FBQSxLQUNBbEQsRUFBQXdyRCxhQUFBdG9ELEdBQUEsS0FDQWxELEVBQUF5ckQsWUFBQXZvRCxHQUFBLEtBQ0FsRCxFQUFBMHJELFVBQUF4b0QsR0FBQSxLQUNBbEQsRUFBQTJyRCxTQUFBem9ELEdBQUEsS0FDQUEsaUNDVkEsSUFBQXBELEVBQWdCL00sRUFBUSxJQUN4QnVFLEVBQWV2RSxFQUFRLEdBQ3ZCcVosRUFBYXJaLEVBQVEsSUFDckI2NEQsRUFBQSxHQUFBenhELE1BQ0EweEQsRUFBQSxHQUVBQyxFQUFBLFNBQUE1MUQsRUFBQTYxRCxFQUFBbnRELEdBQ0EsS0FBQW10RCxLQUFBRixHQUFBLENBQ0EsUUFBQWozRCxFQUFBLEdBQUF6QixFQUFBLEVBQTJCQSxFQUFBNDRELEVBQVM1NEQsSUFBQXlCLEVBQUF6QixHQUFBLEtBQUFBLEVBQUEsSUFFcEMwNEQsRUFBQUUsR0FBQWoxRCxTQUFBLHNCQUFBbEMsRUFBQW1FLEtBQUEsVUFDRyxPQUFBOHlELEVBQUFFLEdBQUE3MUQsRUFBQTBJLElBR0gxTCxFQUFBRCxRQUFBNkQsU0FBQW5DLE1BQUEsU0FBQXFMLEdBQ0EsSUFBQUQsRUFBQUQsRUFBQXRFLE1BQ0F3d0QsRUFBQUosRUFBQXQ0RCxLQUFBcUcsVUFBQSxHQUNBc3lELEVBQUEsV0FDQSxJQUFBcnRELEVBQUFvdEQsRUFBQTFyRCxPQUFBc3JELEVBQUF0NEQsS0FBQXFHLFlBQ0EsT0FBQTZCLGdCQUFBeXdELEVBQUFILEVBQUEvckQsRUFBQW5CLEVBQUE3RCxPQUFBNkQsR0FBQXdOLEVBQUFyTSxFQUFBbkIsRUFBQW9CLElBR0EsT0FEQTFJLEVBQUF5SSxFQUFBaEwsYUFBQWszRCxFQUFBbDNELFVBQUFnTCxFQUFBaEwsV0FDQWszRCxpQ0N0QkEsSUFBQXQyRCxFQUFjNUMsRUFBUSxHQUN0Qm01RCxFQUFXbjVELEVBQVEsR0FBUkEsQ0FBMEIsR0FFckM0QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ25ELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQXdMLEtBQUEsWUFFM0RBLElBQUEsU0FBQXlFLEdBQ0EsT0FBQWtwRCxFQUFBMXdELEtBQUF3SCxFQUFBckosVUFBQSx3QkNOQSxJQUFBcVcsRUFBY2pkLEVBQVEsS0FFdEIsaUJBQUFpZCxNQUFBLEVBQTRDOWMsRUFBQUMsRUFBUzZjLEVBQUEsTUFPckQsSUFBQWdDLEVBQUEsQ0FBZW02QyxLQUFBLEVBRWZuNEMsZUFQQUEsRUFRQXBCLGdCQUFBL2IsR0FFYTlELEVBQVEsR0FBUkEsQ0FBOERpZCxFQUFBZ0MsR0FFM0VoQyxFQUFBbzhDLFNBQUFsNUQsRUFBQUQsUUFBQStjLEVBQUFvOEMsMEJDakJBbDVELEVBQUFELFFBQTJCRixFQUFRLEdBQVJBLEVBQThELElBRXpGeUgsS0FBQSxDQUFjdEgsRUFBQUMsRUFBUyxrbEJBQWdsQixvQkNZdm1CRCxFQUFBRCxRQUFBLFNBQUF3ZixHQUVBLElBQUFzZ0IsRUFBQSxvQkFBQTc3QixlQUFBNjdCLFNBRUEsSUFBQUEsRUFDQSxVQUFBbjVCLE1BQUEsb0NBSUEsSUFBQTZZLEdBQUEsaUJBQUFBLEVBQ0EsT0FBQUEsRUFHQSxJQUFBNDVDLEVBQUF0NUIsRUFBQXU1QixTQUFBLEtBQUF2NUIsRUFBQXc1QixLQUNBQyxFQUFBSCxFQUFBdDVCLEVBQUEwNUIsU0FBQTN0RCxRQUFBLGlCQTJEQSxPQS9CQTJULEVBQUEzVCxRQUFBLCtEQUFBNHRELEVBQUFDLEdBRUEsSUFXQUMsRUFYQUMsRUFBQUYsRUFDQTd2QixPQUNBaCtCLFFBQUEsb0JBQUFsTCxFQUFBazVELEdBQXdDLE9BQUFBLElBQ3hDaHVELFFBQUEsb0JBQUFsTCxFQUFBazVELEdBQXdDLE9BQUFBLElBR3hDLDBEQUFBL2dELEtBQUE4Z0QsR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBbnlELFFBQUEsTUFFQW15RCxFQUNHLElBQUFBLEVBQUFueUQsUUFBQSxLQUVIMnhELEVBQUFRLEVBR0FMLEVBQUFLLEVBQUEvdEQsUUFBQSxZQUlBLE9BQUF1RixLQUFBRSxVQUFBcW9ELEdBQUEseUJDbEZBLElBQUE1OEMsRUFBY2pkLEVBQVEsS0FFdEIsaUJBQUFpZCxNQUFBLEVBQTRDOWMsRUFBQUMsRUFBUzZjLEVBQUEsTUFPckQsSUFBQWdDLEVBQUEsQ0FBZW02QyxLQUFBLEVBRWZuNEMsZUFQQUEsRUFRQXBCLGdCQUFBL2IsR0FFYTlELEVBQVEsR0FBUkEsQ0FBMkRpZCxFQUFBZ0MsR0FFeEVoQyxFQUFBbzhDLFNBQUFsNUQsRUFBQUQsUUFBQStjLEVBQUFvOEMsMEJDakJBbDVELEVBQUFELFFBQTJCRixFQUFRLEdBQVJBLEVBQTJELElBRXRGeUgsS0FBQSxDQUFjdEgsRUFBQUMsRUFBUyxrc0NBQWdzQyxtR0NEaHRDNDVELEVBQXdCQyxFQUFBdjFELEVBQUttaUIsY0FBQSxNQ0lwQyxJQUFJcXpDLEVBSkosU0FBQW5xQixHQUNBQSxLQVNPb3FCLEVBQUEsV0FDUCxPQUFTRCxHQ1JURSxFQUFBLEtBQ0FDLEVBQUEsQ0FDQWhNLE9BQUEsY0F1Q0EsSUFBQWlNLEVBRUEsV0FDQSxTQUFBQSxFQUFBbDRELEVBQUFtNEQsR0FDQTl4RCxLQUFBckcsUUFDQXFHLEtBQUE4eEQsWUFDQTl4RCxLQUFBRCxZQUFBLEtBQ0FDLEtBQUFWLFVBQUFzeUQsRUFDQTV4RCxLQUFBK3hELG9CQUFBL3hELEtBQUEreEQsb0JBQUE1NEQsS0FBQTZHLE1BR0EsSUFBQWd5RCxFQUFBSCxFQUFBdDRELFVBcUNBLE9BbkNBeTRELEVBQUFDLGFBQUEsU0FBQW56RCxHQUVBLE9BREFrQixLQUFBa3lELGVBQ0FseUQsS0FBQVYsVUFBQVQsVUFBQUMsSUFHQWt6RCxFQUFBRyxpQkFBQSxXQUNBbnlELEtBQUFWLFVBQUFzbUQsVUFHQW9NLEVBQUFELG9CQUFBLFdBQ0EveEQsS0FBQW95RCxlQUNBcHlELEtBQUFveUQsaUJBSUFKLEVBQUFqekQsYUFBQSxXQUNBLE9BQUFtYixRQUFBbGEsS0FBQUQsY0FHQWl5RCxFQUFBRSxhQUFBLFdBcEVBLElBQ0FHLEVBR0EvMUMsRUFDQXhjLEVBZ0VBRSxLQUFBRCxjQUNBQyxLQUFBRCxZQUFBQyxLQUFBOHhELFVBQUE5eEQsS0FBQTh4RCxVQUFBRyxhQUFBanlELEtBQUEreEQscUJBQUEveEQsS0FBQXJHLE1BQUFrRixVQUFBbUIsS0FBQSt4RCxxQkFDQS94RCxLQUFBVixXQXRFQSt5RCxFQUFjWCxJQUdkcDFDLEVBQUEsR0FDQXhjLEVBQUEsR0FDQSxDQUNBdVMsTUFBQSxXQUNBdlMsRUFBQTZ4RCxFQUNBcjFDLEVBQUFxMUMsR0FFQS9MLE9BQUEsV0FDQSxJQUFBdG1ELEVBQUFnZCxFQUFBeGMsRUFDQXV5RCxFQUFBLFdBQ0EsUUFBQTE2RCxFQUFBLEVBQXVCQSxFQUFBMkgsRUFBQUMsT0FBc0I1SCxJQUM3QzJILEVBQUEzSCxRQUlBYSxJQUFBLFdBQ0EsT0FBQXNILEdBRUFqQixVQUFBLFNBQUFDLEdBQ0EsSUFBQUMsR0FBQSxFQUdBLE9BRkFlLElBQUF3YyxJQUFBeGMsRUFBQXdjLEVBQUEzZCxTQUNBbUIsRUFBQWQsS0FBQUYsR0FDQSxXQUNBQyxHQUFBdWQsSUFBQXExQyxJQUNBNXlELEdBQUEsRUFDQWUsSUFBQXdjLElBQUF4YyxFQUFBd2MsRUFBQTNkLFNBQ0FtQixFQUFBWCxPQUFBVyxFQUFBWixRQUFBSixHQUFBLFVBNkNBa3pELEVBQUFNLGVBQUEsV0FDQXR5RCxLQUFBRCxjQUNBQyxLQUFBRCxjQUNBQyxLQUFBRCxZQUFBLEtBQ0FDLEtBQUFWLFVBQUErUyxRQUNBclMsS0FBQVYsVUFBQXN5RCxJQUlBQyxFQTlDQSxHQ3hDSVUsRUFFSixTQUFBQyxHQ1RlLElBQUFDLEVBQUFDLEVEWWYsU0FBQWowQyxFQUFBN0MsR0FDQSxJQUFBKzJDLEVBRUFBLEVBQUFILEVBQUExNkQsS0FBQWtJLEtBQUE0YixJQUFBNWIsS0FDQSxJQUFBckcsRUFBQWlpQixFQUFBamlCLE1BQ0FnNUQsRUFBQUMsa0JBQUFELEVBQUFDLGtCQUFBejVELEtFakJlLFNBQUF5QyxHQUNmLFlBQUFBLEVBQ0EsVUFBQWkzRCxlQUFBLDZEQUdBLE9BQUFqM0QsRUZZMkRrM0QsQ0FBc0JILElBQ2pGLElBQUFJLEVBQUEsSUFBMkJsQixFQUFZbDRELEdBT3ZDLE9BTkFvNUQsRUFBQVgsY0FBQU8sRUFBQUMsa0JBQ0FELEVBQUEveEQsTUFBQSxDQUNBakgsUUFDQW81RCxnQkFFQUosRUFBQUssY0FBQXI1RCxFQUFBaUYsV0FDQSt6RCxFQ3pCZUQsRURVQ0YsR0NWREMsRURVQ2gwQyxHQ1RoQmxsQixVQUFBbEIsT0FBQVksT0FBQXk1RCxFQUFBbjVELFdBQ0FrNUQsRUFBQWw1RCxVQUFBNGlCLFlBQUFzMkMsRUFDQUEsRUFBQXJPLFVBQUFzTyxFRHlCQSxJQUFBVixFQUFBdnpDLEVBQUFsbEIsVUF3Q0EsT0F0Q0F5NEQsRUFBQXpwQixrQkFBQSxXQUNBdm9DLEtBQUFpekQsWUFBQSxFQUNBanpELEtBQUFZLE1BQUFteUQsYUFBQWIsZUFFQWx5RCxLQUFBZ3pELGdCQUFBaHpELEtBQUE0YixNQUFBamlCLE1BQUFpRixZQUNBb0IsS0FBQVksTUFBQW15RCxhQUFBWixvQkFJQUgsRUFBQTdnQixxQkFBQSxXQUNBbnhDLEtBQUFELGFBQUFDLEtBQUFELGNBQ0FDLEtBQUFZLE1BQUFteUQsYUFBQVQsaUJBQ0F0eUQsS0FBQWl6RCxZQUFBLEdBR0FqQixFQUFBbmtCLG1CQUFBLFNBQUFxbEIsR0FDQSxHQUFBbHpELEtBQUE0YixNQUFBamlCLFFBQUF1NUQsRUFBQXY1RCxNQUFBLENBQ0FxRyxLQUFBWSxNQUFBbXlELGFBQUFULGlCQUNBLElBQUFTLEVBQUEsSUFBNkJsQixFQUFZN3hELEtBQUE0YixNQUFBamlCLE9BQ3pDbzVELEVBQUFYLGNBQUFweUQsS0FBQTR5RCxrQkFDQTV5RCxLQUFBZ2MsU0FBQSxDQUNBcmlCLE1BQUFxRyxLQUFBNGIsTUFBQWppQixNQUNBbzVELG1CQUtBZixFQUFBWSxrQkFBQSxXQUNBNXlELEtBQUFZLE1BQUFteUQsYUFBQVosb0JBR0FILEVBQUFqa0QsT0FBQSxXQUNBLElBQUEwOEMsRUFBQXpxRCxLQUFBNGIsTUFBQUMsU0FBd0MwMUMsRUFDeEMsT0FBV0MsRUFBQXYxRCxFQUFLbUssY0FBQXFrRCxFQUFBaHNDLFNBQUEsQ0FDaEI3bEIsTUFBQW9ILEtBQUFZLE9BQ0taLEtBQUE0YixNQUFBa0IsV0FHTDJCLEVBM0RBLENBNERFMDBDLEVBQUEsV0FFRlosRUFBUXBsRCxVQUFBLENBQ1J4VCxNQUFTeTVELEVBQUFuM0QsRUFBUzBnRCxNQUFBLENBQ2xCOTlDLFVBQWV1MEQsRUFBQW4zRCxFQUFTbWhCLEtBQUEyK0IsV0FDeEIzOEMsU0FBY2cwRCxFQUFBbjNELEVBQVNtaEIsS0FBQTIrQixXQUN2Qm45QyxTQUFjdzBELEVBQUFuM0QsRUFBU21oQixLQUFBMitCLGFBRXZCbGdDLFFBQVd1M0MsRUFBQW4zRCxFQUFTNUMsT0FDcEJ5akIsU0FBWXMyQyxFQUFBbjNELEVBQVNvZ0QsS0FFTixJQUFBZ1gsRUFBQSxFR2hGQSxTQUFBQyxJQWVmLE9BZEFBLEVBQUFqN0QsT0FBQXVXLFFBQUEsU0FBQXpULEdBQ0EsUUFBQXhELEVBQUEsRUFBbUJBLEVBQUF3RyxVQUFBb0IsT0FBc0I1SCxJQUFBLENBQ3pDLElBQUEwQyxFQUFBOEQsVUFBQXhHLEdBRUEsUUFBQXVCLEtBQUFtQixFQUNBaEMsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUMsRUFBQW5CLEtBQ0FpQyxFQUFBakMsR0FBQW1CLEVBQUFuQixJQUtBLE9BQUFpQyxJQUdBbUcsTUFBQXRCLEtBQUE3QixXQ2ZlLFNBQUFvMUQsRUFBQWw1RCxFQUFBbTVELEdBQ2YsU0FBQW41RCxFQUFBLFNBQ0EsSUFFQW5CLEVBQUF2QixFQUZBd0QsRUFBQSxHQUNBczRELEVBQUFwN0QsT0FBQWlJLEtBQUFqRyxHQUdBLElBQUExQyxFQUFBLEVBQWFBLEVBQUE4N0QsRUFBQWwwRCxPQUF1QjVILElBQ3BDdUIsRUFBQXU2RCxFQUFBOTdELEdBQ0E2N0QsRUFBQXQwRCxRQUFBaEcsSUFBQSxJQUNBaUMsRUFBQWpDLEdBQUFtQixFQUFBbkIsSUFHQSxPQUFBaUMsZ0RDSEF1NEQsRUFBQSxHQUNBQyxFQUFBLFlBVUEsU0FBQUMsRUFBQWh6RCxFQUFBdkIsR0FDQSxJQUFBdzBELEVBQUFqekQsRUFBQSxHQUNBLE9BQUF2QixFQUFBZ29DLFFBQUF3c0IsRUFBQSxHQUdBLElBQUFDLEVBQUEsV0FDQSxnQkFRQUMsRUFBQSxvQkFBQXI0RCxhQUFBLElBQUFBLE9BQUF3SyxlQUFBLElBQUF4SyxPQUFBd0ssU0FBQUUsY0FBa0src0QsRUFBQSxnQkFBa0JBLEVBQUEsVUFDckssU0FBQWEsRUFlZkMsRUFDQXYwRCxRQUNBLElBQUFBLElBQ0FBLEVBQUEsSUFHQSxJQUFBeEIsRUFBQXdCLEVBQ0F3MEQsRUFBQWgyRCxFQUFBaTJELGVBQ0FBLE9BQUEsSUFBQUQsRUFBQSxTQUFBaDhELEdBQ0EseUJBQUFBLEVBQUEsS0FDR2c4RCxFQUNIRSxFQUFBbDJELEVBQUFtMkQsV0FDQUEsT0FBQSxJQUFBRCxFQUFBLGtCQUFBQSxFQUNBRSxFQUFBcDJELEVBQUFxMkQsZ0JBQ0FBLE9BQUEsSUFBQUQsT0FBQWo1RCxFQUFBaTVELEVBQ0FFLEVBQUF0MkQsRUFBQXUyRCx5QkFDQUEsT0FBQSxJQUFBRCxLQUNBRSxFQUFBeDJELEVBQUF5MkQsU0FDQUEsT0FBQSxJQUFBRCxFQUFBLFFBQUFBLEVBQ0FFLEVBQUExMkQsRUFBQTIyRCxRQUNBQSxPQUFBLElBQUFELEtBQ0FFLEVBQUE1MkQsRUFBQTBnQixXQUNBQSxPQUFBLElBQUFrMkMsS0FDQUMsRUFBQTcyRCxFQUFBMmQsUUFDQUEsT0FBQSxJQUFBazVDLEVBQTJDeEQsRUFBaUJ3RCxFQUM1REMsRUFBdUJ6QixFQUE2QnIxRCxFQUFBLDBIQUVsRCsyRCxTQUFTNTVELElBQUFrNUQsRUFBQSw0R0FDVFUsS0FBU0osRUFBQSw0RkFFVEksSUFBUyxVQUFBTixFQUFBLDJZQUNYLElBQUFsSyxFQUFBNXVDLEVBQ0EsZ0JBQUFxNUMsR0FLQSxJQUFBQyxFQUFBRCxFQUFBcG9ELGFBQUFvb0QsRUFBQWg5RCxNQUFBLFlBQ0E0VSxFQUFBcW5ELEVBQUFnQixHQUVBQyxFQUFpQzlCLEVBQVEsR0FBRzBCLEVBQUEsQ0FDNUNiLGlCQUNBRSxhQUNBRSxrQkFDQUUsMkJBQ0FFLFdBQ0E3bkQsY0FDQXFvRCx1QkFDQUQscUJBR0FHLEVBQUFMLEVBQUFLLEtBU0EsSUFBQUMsRUFBQUQsRUFBaUNsQyxFQUFBLFFBQU8sU0FBQTdyQixHQUN4QyxPQUFBQSxLQUdBLFNBQUFpdUIsRUFBQTM1QyxHQUNBLElBQUE0NUMsRUFBcUJuOUQsT0FBQTg2RCxFQUFBLFFBQUE5NkQsQ0FBTyxXQUk1QixJQUFBbzlELEVBQUE3NUMsRUFBQTY1QyxhQUNBQyxFQUEyQm5DLEVBQTZCMzNDLEVBQUEsa0JBRXhELE9BQUFBLEVBQUFDLFFBQUE0NUMsRUFBQUMsSUFDTyxDQUFBOTVDLElBQ1ArNUMsRUFBQUgsRUFBQSxHQUNBQyxFQUFBRCxFQUFBLEdBQ0FFLEVBQUFGLEVBQUEsR0FFQUksRUFBeUJ2OUQsT0FBQTg2RCxFQUFBLFFBQUE5NkQsQ0FBTyxXQUdoQyxPQUFBczlELEtBQUFqM0MsVUFBd0RybUIsT0FBQXc5RCxFQUFBLGtCQUFBeDlELENBQWtCbTVELEVBQUF2MUQsRUFBS21LLGNBQUF1dkQsRUFBQWozQyxTQUFBLE9BQUFpM0MsRUFBQWxMLEdBQ3hFLENBQUFrTCxFQUFBbEwsSUFFUHFMLEVBQXlCejlELE9BQUE4NkQsRUFBQSxXQUFBOTZELENBQVV1OUQsR0FFbkNHLEVBQUE3N0MsUUFBQTBCLEVBQUFqaUIsT0FDQXE4RCxFQUFBOTdDLFFBQUE0N0MsSUFBQTU3QyxRQUFBNDdDLEVBQUFuOEQsT0FDTXM3RCxJQUFTYyxHQUFBQyxFQUFBLDZDQUFBbHBELEVBQUEsNEpBQUFBLEVBQUEsd0JBQ2YsSUFBQW5ULEVBQUFpaUIsRUFBQWppQixPQUFBbThELEVBQUFuOEQsTUFDQXM4RCxFQUErQjU5RCxPQUFBODZELEVBQUEsUUFBQTk2RCxDQUFPLFdBR3RDLE9BeENBLFNBQUFzQixHQUNBLE9BQUFzNkQsRUFBQXQ2RCxFQUFBeUYsU0FBQWcyRCxHQXVDQWMsQ0FBQXY4RCxJQUNPLENBQUFBLElBRVB3OEQsRUFBc0I5OUQsT0FBQTg2RCxFQUFBLFFBQUE5NkQsQ0FBTyxXQUM3QixJQUFBbzhELEVBQUEsT0FBQWQsRUFHQSxJQUFBWixFQUFBLElBQStCbEIsRUFBWWw0RCxFQUFBbzhELEVBQUEsS0FBQUQsRUFBQS9DLGNBSzNDWixFQUFBWSxFQUFBWixpQkFBQWg1RCxLQUFBNDVELEdBQ0EsT0FBQUEsRUFBQVosSUFDTyxDQUFBeDRELEVBQUFvOEQsRUFBQUQsSUFDUC9DLEVBQUFvRCxFQUFBLEdBQ0FoRSxFQUFBZ0UsRUFBQSxHQUlBQyxFQUFtQy85RCxPQUFBODZELEVBQUEsUUFBQTk2RCxDQUFPLFdBQzFDLE9BQUEwOUQsRUFJQUQsRUFLZXhDLEVBQVEsR0FBR3dDLEVBQUEsQ0FDMUIvQyxrQkFFTyxDQUFBZ0QsRUFBQUQsRUFBQS9DLElBR1BzRCxFQUF3QmgrRCxPQUFBODZELEVBQUEsV0FBQTk2RCxDQUFVdTdELEVBQUFGLEVBQUFJLEdBRWxDd0MsRUFEQUQsRUFBQSxHQUNBLEdBQ0FFLEVBQUFGLEVBQUEsR0FHQSxHQUFBQyxLQUFBbnpELE1BQ0EsTUFBQW16RCxFQUFBbnpELE1BSUEsSUFBQXF6RCxFQUEyQm4rRCxPQUFBODZELEVBQUEsT0FBQTk2RCxHQUMzQm8rRCxFQUE2QnArRCxPQUFBODZELEVBQUEsT0FBQTk2RCxDQUFNcTlELEdBQ25DZ0IsRUFBc0NyK0QsT0FBQTg2RCxFQUFBLE9BQUE5NkQsR0FDdENzK0QsRUFBOEJ0K0QsT0FBQTg2RCxFQUFBLE9BQUE5NkQsRUFBTSxHQUNwQ3UrRCxFQUFBdEIsRUFBQSxXQU9BLE9BQUFvQixFQUFBcDZDLFNBQUFvNUMsSUFBQWUsRUFBQW42QyxRQUNBbzZDLEVBQUFwNkMsUUFPQTI1QyxFQUFBdDhELEVBQUFpRixXQUFBODJELElBQ08sQ0FBQS83RCxFQUFBMjhELEVBQUFaLElBSVAzQixFQUFBLFdBRUEwQyxFQUFBbjZDLFFBQUFvNUMsRUFDQWMsRUFBQWw2QyxRQUFBczZDLEVBQ0FELEVBQUFyNkMsU0FBQSxFQUVBbzZDLEVBQUFwNkMsVUFDQW82QyxFQUFBcDZDLFFBQUEsS0FDQTYxQyxPQUlBNEIsRUFBQSxXQUVBLEdBQUFVLEVBQUEsQ0FFQSxJQUFBb0MsR0FBQSxFQUNBQyxFQUFBLEtBRUFDLEVBQUEsV0FDQSxJQUFBRixFQUFBLENBTUEsSUFDQUcsRUFBQTd6RCxFQURBOHpELEVBQUF0OUQsRUFBQWlGLFdBR0EsSUFHQW80RCxFQUFBZixFQUFBZ0IsRUFBQVIsRUFBQW42QyxTQUNXLE1BQUE3ZixHQUNYMEcsRUFBQTFHLEVBQ0FxNkQsRUFBQXI2RCxFQUdBMEcsSUFDQTJ6RCxFQUFBLE1BSUFFLElBQUFSLEVBQUFsNkMsUUFDQXE2QyxFQUFBcjZDLFNBQ0E2MUMsS0FPQXFFLEVBQUFsNkMsUUFBQTA2QyxFQUNBTixFQUFBcDZDLFFBQUEwNkMsRUFDQUwsRUFBQXI2QyxTQUFBLEVBRUFpNkMsRUFBQSxDQUNBbjhELEtBQUEsZ0JBQ0FpdEMsUUFBQSxDQUNBNHZCLG1CQUNBOXpELGNBT0E0dkQsRUFBQVgsY0FBQTJFLEVBQ0FoRSxFQUFBYixlQUdBNkUsSUFnQkEsT0FkQSxXQUlBLEdBSEFGLEdBQUEsRUFDQTlELEVBQUFULGlCQUVBd0UsRUFNQSxNQUFBQSxLQUtPLENBQUFuOUQsRUFBQW81RCxFQUFBa0QsSUFHUCxJQUFBaUIsRUFBcUM3K0QsT0FBQTg2RCxFQUFBLFFBQUE5NkQsQ0FBTyxXQUM1QyxPQUFlbTVELEVBQUF2MUQsRUFBS21LLGNBQUE4dUQsRUFBaUM1QixFQUFRLEdBQUdzRCxFQUFBLENBQ2hFbDZDLElBQUErNEMsTUFFTyxDQUFBQSxFQUFBUCxFQUFBMEIsSUFlUCxPQVowQnYrRCxPQUFBODZELEVBQUEsUUFBQTk2RCxDQUFPLFdBQ2pDLE9BQUFvOEQsRUFJaUJqRCxFQUFBdjFELEVBQUttSyxjQUFBd3ZELEVBQUFuM0MsU0FBQSxDQUN0QjdsQixNQUFBdzlELEdBQ1djLEdBR1hBLEdBQ08sQ0FBQXRCLEVBQUFzQixFQUFBZCxJQUtQLElBQUFlLEVBQUE5QixFQUF5QjdELEVBQUF2MUQsRUFBS3FaLEtBQUFpZ0QsS0FJOUIsR0FIQTRCLEVBQUFqQyxtQkFDQWlDLEVBQUFycUQsY0FFQThSLEVBQUEsQ0FDQSxJQUFBdzRDLEVBQXNCNUYsRUFBQXYxRCxFQUFLMmlCLFdBQUEsU0FBQWhELEVBQUFjLEdBQzNCLE9BQWU4MEMsRUFBQXYxRCxFQUFLbUssY0FBQSt3RCxFQUF3QjdELEVBQVEsR0FBRzEzQyxFQUFBLENBQ3ZENjVDLGFBQUEvNEMsT0FLQSxPQUZBMDZDLEVBQUF0cUQsY0FDQXNxRCxFQUFBbEMsbUJBQ2FtQyxJQUFZRCxFQUFBbEMsR0FHekIsT0FBV21DLElBQVlGLEVBQUFqQyxJQ3ZWdkIsSUFBQXBMLEVBQUF6eEQsT0FBQWtCLFVBQUFDLGVBRUEsU0FBQTJNLEVBQUE2VSxFQUFBQyxHQUNBLE9BQUFELElBQUFDLEVBQ0EsSUFBQUQsR0FBQSxJQUFBQyxHQUFBLEVBQUFELEdBQUEsRUFBQUMsRUFFQUQsTUFBQUMsS0FJZSxTQUFBcThDLEVBQUFDLEVBQUFDLEdBQ2YsR0FBQXJ4RCxFQUFBb3hELEVBQUFDLEdBQUEsU0FFQSxvQkFBQUQsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQyxHQUFBLE9BQUFBLEVBQ0EsU0FHQSxJQUFBQyxFQUFBcC9ELE9BQUFpSSxLQUFBaTNELEdBQ0FHLEVBQUFyL0QsT0FBQWlJLEtBQUFrM0QsR0FDQSxHQUFBQyxFQUFBbDRELFNBQUFtNEQsRUFBQW40RCxPQUFBLFNBRUEsUUFBQTVILEVBQUEsRUFBaUJBLEVBQUE4L0QsRUFBQWw0RCxPQUFrQjVILElBQ25DLElBQUFteUQsRUFBQWh5RCxLQUFBMC9ELEVBQUFDLEVBQUE5L0QsTUFBQXdPLEVBQUFveEQsRUFBQUUsRUFBQTkvRCxJQUFBNi9ELEVBQUFDLEVBQUE5L0QsS0FDQSxTQUlBLG9CQzFCTyxTQUFBZ2dFLEVBQUFDLEdBQ1AsZ0JBQUF4NEQsRUFBQW9YLEdBQ0EsSUFBQXFoRCxFQUFBRCxFQUFBeDRELEVBQUFvWCxHQUVBLFNBQUFzaEQsSUFDQSxPQUFBRCxFQUlBLE9BREFDLEVBQUFDLG1CQUFBLEVBQ0FELEdBVU8sU0FBQUUsRUFBQUMsR0FDUCxjQUFBQSxFQUFBRix3QkFBQTE4RCxJQUFBNDhELEVBQUFGLGtCQUFBNzlDLFFBQUErOUMsRUFBQUYsbUJBQUEsSUFBQUUsRUFBQTE0RCxPQWNPLFNBQUEyNEQsRUFBQUQsRUFBQTVELEdBQ1AsZ0JBQUFqMUQsRUFBQU0sR0FDQUEsRUFBQW9OLFlBQUEsSUFFQXFyRCxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUYsRUFBQUosa0JBQUFJLEVBQUFGLFdBQUFHLEVBQUFDLEdBQUFGLEVBQUFGLFdBQUFHLElBcUJBLE9BakJBRCxFQUFBSixtQkFBQSxFQUVBSSxFQUFBRixXQUFBLFNBQUFHLEVBQUFDLEdBQ0FGLEVBQUFGLGFBQ0FFLEVBQUFKLGtCQUFBQyxFQUFBQyxHQUNBLElBQUFyOEMsRUFBQXU4QyxFQUFBQyxFQUFBQyxHQVNBLE1BUEEsbUJBQUF6OEMsSUFDQXU4QyxFQUFBRixXQUFBcjhDLEVBQ0F1OEMsRUFBQUosa0JBQUFDLEVBQUFwOEMsR0FDQUEsRUFBQXU4QyxFQUFBQyxFQUFBQyxJQUlBejhDLEdBR0F1OEMsR0M1Q2UsSUFBQUcsRUFBQSxDQWZSLFNBQUFDLEdBQ1AseUJBQUFBLEVBQW9ETCxFQUFrQkssUUFBQWw5RCxHQUUvRCxTQUFBazlELEdBQ1AsT0FBQUEsT0FJR2w5RCxFQUo0QnM4RCxFQUFzQixTQUFBdjRELEdBQ3JELE9BQ0FBLGVBSU8sU0FBQW01RCxHQUNQLE9BQUFBLEdBQUEsaUJBQUFBLEVBQXdFWixFQUFzQixTQUFBdjRELEdBQzlGLE9BQVcvRyxPQUFBbWdFLEVBQUEsbUJBQUFuZ0UsQ0FBa0JrZ0UsRUFBQW41RCxVQUMxQi9ELElDTlksSUFBQW85RCxFQUFBLENBUlIsU0FBQUMsR0FDUCx5QkFBQUEsRUFBaURSLEVBQWtCUSxRQUFBcjlELEdBRTVELFNBQUFxOUQsR0FDUCxPQUFBQSxPQUVHcjlELEVBRnlCczhELEVBQXNCLFdBQ2xELGFDSk8sU0FBQWdCLEVBQUFDLEVBQUFDLEVBQUFSLEdBQ1AsT0FBUy9FLEVBQVEsR0FBRytFLEVBQUFPLEVBQUFDLEdBZ0NMLElBQUFDLEVBQUEsQ0FSUixTQUFBQyxHQUNQLHlCQUFBQSxFQXZCTyxTQUFBQSxHQUNQLGdCQUFBMzVELEVBQUFNLEdBQ0FBLEVBQUFvTixZQUFBLElBSUFrc0QsRUFIQTNELEVBQUEzMUQsRUFBQTIxRCxLQUNBNEQsRUFBQXY1RCxFQUFBdTVELG9CQUNBQyxHQUFBLEVBRUEsZ0JBQUFOLEVBQUFDLEVBQUFSLEdBQ0EsSUFBQWMsRUFBQUosRUFBQUgsRUFBQUMsRUFBQVIsR0FVQSxPQVJBYSxFQUNBN0QsR0FBQTRELEVBQUFFLEVBQUFILE9BQUFHLElBRUFELEdBQUEsRUFDQUYsRUFBQUcsR0FJQUgsSUFLQUksQ0FBQUwsUUFBQTE5RCxHQUVPLFNBQUEwOUQsR0FDUCxPQUFBQSxPQUVHMTlELEVBRkgsV0FDQSxPQUFBczlELEtDOUJPLFNBQUFVLEVBQUFYLEVBQUFILEVBQUFRLEVBQUEzNUQsR0FDUCxnQkFBQXdCLEVBQUF5M0QsR0FDQSxPQUFBVSxFQUFBTCxFQUFBOTNELEVBQUF5M0QsR0FBQUUsRUFBQW41RCxFQUFBaTVELE9BR08sU0FBQWlCLEVBQUFaLEVBQUFILEVBQUFRLEVBQUEzNUQsRUFBQU0sR0FDUCxJQUlBa0IsRUFDQXkzRCxFQUNBTyxFQUNBQyxFQUNBRyxFQVJBTyxFQUFBNzVELEVBQUE2NUQsZUFDQUMsRUFBQTk1RCxFQUFBODVELGlCQUNBQyxFQUFBLzVELEVBQUErNUQsbUJBQ0FDLEdBQUEsRUF1Q0EsU0FBQUMsRUFBQTc0RCxFQUFBODRELEdBQ0EsSUFSQUMsRUFDQUMsRUFPQUMsR0FBQVAsRUFBQUksRUFBQXZCLEdBQ0EyQixHQUFBVCxFQUFBejRELEVBQUFGLEdBR0EsT0FGQUEsRUFBQUUsRUFDQXUzRCxFQUFBdUIsRUFDQUcsR0FBQUMsR0ExQkFwQixFQUFBRixFQUFBOTNELEVBQUF5M0QsR0FDQUUsRUFBQVIsb0JBQUFjLEVBQUFOLEVBQUFuNUQsRUFBQWk1RCxJQUNBVyxFQUFBRCxFQUFBSCxFQUFBQyxFQUFBUixJQXlCQTBCLEdBcEJBckIsRUFBQVgsb0JBQUFhLEVBQUFGLEVBQUE5M0QsRUFBQXkzRCxJQUNBRSxFQUFBUixvQkFBQWMsRUFBQU4sRUFBQW41RCxFQUFBaTVELElBQ0FXLEVBQUFELEVBQUFILEVBQUFDLEVBQUFSLElBbUJBMkIsR0FkQUgsRUFBQW5CLEVBQUE5M0QsRUFBQXkzRCxHQUNBeUIsR0FBQUwsRUFBQUksRUFBQWpCLEdBQ0FBLEVBQUFpQixFQUNBQyxJQUFBZCxFQUFBRCxFQUFBSCxFQUFBQyxFQUFBUixJQUNBVyxHQVdBQSxFQUdBLGdCQUFBbDRELEVBQUE4NEQsR0FDQSxPQUFBRixFQUFBQyxFQUFBNzRELEVBQUE4NEQsSUF6Q0FoQixFQUFBRixFQUZBOTNELEVBMkNBRSxFQTFDQXUzRCxFQTBDQXVCLEdBeENBZixFQUFBTixFQUFBbjVELEVBQUFpNUQsR0FDQVcsRUFBQUQsRUFBQUgsRUFBQUMsRUFBQVIsR0FDQXFCLEdBQUEsRUFDQVYsSUE2Q2UsU0FBQWlCLEVBQUE3NkQsRUFBQWxCLEdBQ2YsSUFBQWc4RCxFQUFBaDhELEVBQUFnOEQsb0JBQ0FDLEVBQUFqOEQsRUFBQWk4RCx1QkFDQUMsRUFBQWw4RCxFQUFBazhELGVBQ0E1akQsRUFBZ0IrOEMsRUFBNkJyMUQsRUFBQSxtRUFFN0N3NkQsRUFBQXdCLEVBQUE5NkQsRUFBQW9YLEdBQ0EraEQsRUFBQTRCLEVBQUEvNkQsRUFBQW9YLEdBQ0F1aUQsRUFBQXFCLEVBQUFoN0QsRUFBQW9YLEdBT0EsT0FEQUEsRUFBQTYrQyxLQUFBaUUsRUFBQUQsR0FDQVgsRUFBQUgsRUFBQVEsRUFBQTM1RCxFQUFBb1gsR0M1REEsU0FBQXJDLEVBQUEzUixFQUFBNnRELEVBQUFuNEQsR0FDQSxRQUFBUCxFQUFBMDRELEVBQUE5d0QsT0FBQSxFQUFvQzVILEdBQUEsRUFBUUEsSUFBQSxDQUM1QyxJQUFBK1AsRUFBQTJvRCxFQUFBMTRELEdBQUE2SyxHQUNBLEdBQUFrRixFQUFBLE9BQUFBLEVBR0EsZ0JBQUF0SSxFQUFBb1gsR0FDQSxVQUFBcFksTUFBQSxnQ0FBQW9FLEVBQUEsUUFBQXRLLEVBQUEsdUNBQUFzZSxFQUFBMitDLHFCQUFBLE1BSUEsU0FBQWtGLEVBQUFwK0QsRUFBQXlHLEdBQ0EsT0FBQXpHLElBQUF5RyxFQTREZSxJQXZEUjQzRCxFQUNQNTZELEVBQ0E2NkQsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsR0FDQUMsR0FDQUMsR0FDQTlHLEdBNENlK0csSUFyRGZULEdBREE3NkQsT0FBQSxJQUFBNDZELEVBQUEsR0FBa0NBLEdBQ2xDRSxXQUNBQSxPQUFBLElBQUFELEVBQWdEdkcsRUFBZXVHLEVBQy9ERSxFQUFBLzZELEVBQUFnN0QseUJBQ0FBLE9BQUEsSUFBQUQsRUFBb0VoQyxFQUErQmdDLEVBQ25HRSxFQUFBajdELEVBQUFrN0QsNEJBQ0FBLE9BQUEsSUFBQUQsRUFBdUVyQyxFQUFrQ3FDLEVBQ3pHRSxHQUFBbjdELEVBQUFvN0Qsb0JBQ0FBLFFBQUEsSUFBQUQsR0FBK0QvQixFQUEwQitCLEdBQ3pGRSxHQUFBcjdELEVBQUF1MEQsZ0JBQ0FBLFFBQUEsSUFBQThHLEdBQTBEZCxFQUFzQmMsR0FFaEYsU0FBQXJDLEVBQUFILEVBQUFRLEVBQUE3NkQsUUFDQSxJQUFBQSxJQUNBQSxFQUFBLElBR0EsSUFBQSs4RCxFQUFBLzhELEVBQ0FnOUQsRUFBQUQsRUFBQTVGLEtBQ0FBLE9BQUEsSUFBQTZGLEtBQ0FDLEVBQUFGLEVBQUExQixlQUNBQSxPQUFBLElBQUE0QixFQUFBZCxFQUFBYyxFQUNBQyxFQUFBSCxFQUFBekIsaUJBQ0FBLE9BQUEsSUFBQTRCLEVBQThEOUQsRUFBWThELEVBQzFFQyxFQUFBSixFQUFBeEIsbUJBQ0FBLE9BQUEsSUFBQTRCLEVBQWdFL0QsRUFBWStELEVBQzVFQyxFQUFBTCxFQUFBaEMsb0JBQ0FBLE9BQUEsSUFBQXFDLEVBQWlFaEUsRUFBWWdFLEVBQzdFQyxFQUF1QmhJLEVBQTZCMEgsRUFBQSx5RkFFcERmLEVBQUEvbEQsRUFBQXVrRCxFQUFBZ0MsRUFBQSxtQkFDQVAsRUFBQWhtRCxFQUFBb2tELEVBQUFxQyxFQUFBLHNCQUNBUixFQUFBam1ELEVBQUE0a0QsRUFBQStCLEdBQUEsY0FDQSxPQUFBTixFQUFBdkcsR0FBdUNYLEVBQVEsQ0FFL0NlLFdBQUEsVUFFQUYsZUFBQSxTQUFBajhELEdBQ0EsaUJBQUFBLEVBQUEsS0FHQXU4RCx5QkFBQXY2QyxRQUFBdytDLEdBRUF3QixzQkFDQUMseUJBQ0FDLGlCQUNBL0UsT0FDQWtFLGlCQUNBQyxtQkFDQUMscUJBQ0FSLHVCQUNLc0MsTUNsRkwsSWZMT0MsR2VLc0Isb0JBQUE5L0QsT0FBbUN5M0QsRUFBQSxnQkFBa0JBLEVBQUEsVUNabEYsU0FBQXNJLEdBQUFDLEdBQ0EsZ0JBQUFoOEQsR0FDQSxJQUFBTixFQUFBTSxFQUFBTixTQUNBUixFQUFBYyxFQUFBZCxTQUNBLGdCQUFBa0IsR0FDQSxnQkFBQVQsR0FDQSx5QkFBQUEsRUFDQUEsRUFBQUQsRUFBQVIsRUFBQTg4RCxHQUdBNTdELEVBQUFULE1oQkhPbThELEdpQkdFRyxFQUFBLHdCakJGQWxLLEVBQUsrSixHZ0JRZCxJQUFBSSxHQUFBSCxLQUNBRyxHQUFBQyxrQkFBQUosR0FFZSxJQUFBSyxHQUFBLHdxQ0UyQ0E1eEMsR0FBQSxnQkEzRGIsU0FBQTZ4QyxJQUFjLElBQUFwSixFQUFBLG1HQUFBcUosQ0FBQWg4RCxLQUFBKzdELElBQ1pwSix5RUFBQXNKLENBQUFqOEQsS0FBQWs4RCxHQUFBSCxHQUFBamtFLEtBQUFrSSxRQUNLbThELFdBQWEsdUNBQ2xCeEosRUFBSzVCLEtBQU8saUNBQ1o0QixFQUFLeUosR0FBRyxvQ0FDUnpKLEVBQUt6NUQsSUFBSywwQ0FFVnk1RCxFQUFLMEosV0FBYTFKLEVBQUswSixXQUFXbGpFLEtBQWhCbWpFLEdBQUEzSixJQUNsQkEsRUFBSzRKLGFBQWU1SixFQUFLNEosYUFBYXBqRSxLQUFsQm1qRSxHQUFBM0osSUFDcEJBLEVBQUt6b0MsT0FBU3lvQyxFQUFLem9DLE9BQU8vd0IsS0FBWm1qRSxHQUFBM0osSUFDZEEsRUFBSzZKLFVBQVk3SixFQUFLNkosVUFBVXJqRSxLQUFmbWpFLEdBQUEzSixJQVZMQSw2UEFEWThKLElBQU12K0Msc0RBZTlCLE9BQU8sSUFBSXcrQyxRQUFRLENBQ2YsQ0FBQyxZQUFhMThELEtBQUsrd0QsNkNBSVo0TCxFQUFPQyxHQUNsQixTQUFBOTNELE9BQVU5RSxLQUFLbThELFlBQWZyM0QsT0FBNEI5RSxLQUFLK3dELEtBQWpDLHVCQUFBanNELE9BQTJENjNELEVBQTNELFFBQUE3M0QsT0FBdUU5RSxLQUFLbzhELEdBQTVFLFNBQUF0M0QsT0FBc0Y5RSxLQUFLOUcsSUFBM0YsV0FBQTRMLE9BQXdHODNELGtFQUc3RkQsRUFBT0MsaUdBQ1p0eUMsRUFBTXRxQixLQUFLdThELGFBQWFJLEVBQU9DLFlBQ1ZDLE1BQU12eUMsRUFBSyxDQUNsQ2psQixPQUFRLE1BQ1J5M0QsUUFBUzk4RCxLQUFLcThELGVBRWIvdEIsS0FBSyxTQUFBN21DLEdBQUcsT0FBSUEsRUFBSXMxRCxTQUpNLE1BTWhCLFNBQUE1NUQsR0FBSyxPQUFJMGtELFFBQVFuMUMsT0FBT3ZQLG1CQU43QjY1RCwyQkFPQ0EsaUtBR09MLDZHQUFPQyxpQ0FBTyxXQUVDNThELEtBQUtrcUIsT0FBT3l5QyxFQUFPQyxjQUF4Q0ksVUFLVUMsK0NBQ1Qsb0NBR0ZELEVBQWFDLE1BQU14NkQsT0FBTyxTQUFDaUYsRUFBUTZNLEdBUXhDLE9BUElBLEVBQUsyb0QsU0FBVzNvRCxFQUFLMm9ELFFBQVFDLFdBQzdCejFELEVBQU8xSSxLQUFLLENBQ1Y0RixHQUFJMlAsRUFBSzZvRCxRQUNUQyxVQUFXVixFQUNYVyxTQUFVL29ELEVBQUsyb0QsUUFBUUMsVUFBVSxHQUFHbHhELE1BR25DdkUsR0FDTix1SUNKTTYxRCxHQUFnQixTQUFDQyxFQUFRWixHQUNwQyxNQUFPLENBQ0x4aUUsS0FOMEIsaUJBTzFCaXRDLFFBQVMsQ0FDUG8yQixTQUFTLEVBQ1RELE9BQVFBLEVBQ1JFLFlBQWFkLEtBS05lLEdBQWdCLFNBQUNDLEVBQVNoQixHQUNyQyxNQUFPLENBQ0x4aUUsS0FoQjBCLGlCQWlCMUJpdEMsUUFBUyxDQUNQbzJCLFNBQVMsRUFDVEMsWUFBYWQsRUFDYmdCLFFBQVNBLEtBS0ZDLEdBQWdCLFNBQUMxNkQsR0FDNUIsTUFBTyxDQUNML0ksS0ExQjBCLGlCQTJCMUJpdEMsUUFBUyxDQUNQbzJCLFNBQVMsRUFDVHQ2RCxNQUFPQSxpcUJDN0ViLElBQU0yNkQsR0FBZSxDQUNqQjV6QyxPQUFRLENBQ051ekMsU0FBUyxFQUNURCxPQUFRLEdBQ1JFLFlBQWEsRUFDYkUsUUFBUyxHQUNUejZELE1BQU8sQ0FDTDQ2RCxTQUFTLEVBQ1RDLFFBQVMsS0FHYkMsU0FBVSxJQTBFQ0MsR0FMS3BoRSwwQkFBZ0IsQ0FDbENtaEUsU0FwRHNCLFdBQTJDLElBQTFDcjlELEVBQTBDekMsVUFBQW9CLE9BQUEsUUFBQWxFLElBQUE4QyxVQUFBLEdBQUFBLFVBQUEsR0FBbEMyL0QsR0FBYUcsU0FBVTUrRCxFQUFXbEIsVUFBQW9CLE9BQUEsRUFBQXBCLFVBQUEsUUFBQTlDLEVBQ2pFLE9BQVFnRSxFQUFPakYsTUFDYixJRDdCcUIsWUM4Qm5CLE9BQU93RyxFQUFNa0UsT0FBTyxDQUNsQkYsR0FBSXZGLEVBQU9nb0MsUUFBUXppQyxHQUNuQnk0RCxVQUFXaCtELEVBQU9nb0MsUUFBUWcyQixVQUMxQkMsU0FBVWorRCxFQUFPZ29DLFFBQVFpMkIsV0FFN0IsSURsQ3dCLGVDbUN0QixPQUFPMThELEVBQU1tQixPQUFPLFNBQUFvOEQsR0FBSyxPQUFJQSxFQUFNdjVELEtBQU92RixFQUFPZ29DLFFBQVF6aUMsS0FDM0QsSURuQzBCLGlCQ29DeEIsT0FBT2s1RCxHQUFhRyxTQUN0QixRQUNFLE9BQU9yOUQsSUF3Q1hzcEIsT0FwQ29CLFdBQXlDLElBQXhDdHBCLEVBQXdDekMsVUFBQW9CLE9BQUEsUUFBQWxFLElBQUE4QyxVQUFBLEdBQUFBLFVBQUEsR0FBaEMyL0QsR0FBYTV6QyxPQUFRN3FCLEVBQVdsQixVQUFBb0IsT0FBQSxFQUFBcEIsVUFBQSxRQUFBOUMsRUFDN0QsT0FBUWdFLEVBQU9qRixNQUNiLElERjBCLGlCQ0d4QixPQUFPL0IsT0FBT3VXLE9BQU8sR0FBSWhPLEVBQWxCdzlELEdBQUEsR0FDRng5RCxFQURFLENBRUw2OEQsUUFBU3ArRCxFQUFPZ29DLFFBQVFvMkIsUUFDeEJELE9BQVFuK0QsRUFBT2dvQyxRQUFRbTJCLE9BQ3ZCRSxZQUFhcitELEVBQU9nb0MsUUFBUXEyQixlQUVoQyxJRFIwQixpQkNTeEIsT0FBT3JsRSxPQUFPdVcsT0FBTyxHQUFJaE8sRUFBbEJ3OUQsR0FBQSxHQUNGeDlELEVBREUsQ0FFTDY4RCxRQUFTcCtELEVBQU9nb0MsUUFBUW8yQixRQUN4QnQ2RCxNQUFPLENBQ0w0NkQsU0FBUyxFQUNUQyxRQUFTLElBRVhOLFlBQWFyK0QsRUFBT2dvQyxRQUFRcTJCLFlBQzVCRSxRQUFTditELEVBQU9nb0MsUUFBUXUyQixXQUU1QixJRGxCMEIsaUJDbUJ4QixPQUFPdmxFLE9BQU91VyxPQUFPLEdBQUloTyxFQUFsQnc5RCxHQUFBLEdBQ0Z4OUQsRUFERSxDQUVMNjhELFFBQVNwK0QsRUFBT2dvQyxRQUFRbzJCLFFBQ3hCdDZELE1BQU8sQ0FDTDQ2RCxTQUFTLEVBQ1RDLFFBQVMzK0QsRUFBT2dvQyxRQUFRbGtDLFVBRzlCLFFBQ0UsT0FBT3ZDLGVDL0RFeTlELEdBWlEsV0FTckIsT0FSY3JoRSxzQkFDWmtoRSxHQUNBbmhFLGtCQUNFSCwwQkFBZ0IwaEUsSUFDaEI3akQsaUNDUEE4akQsV0FBZSxTQUFBNytELEdBQUEsSUFBRzgrRCxFQUFIOStELEVBQUc4K0QsT0FBUTl0QixFQUFYaHhDLEVBQVdneEMsUUFBUyt0QixFQUFwQi8rRCxFQUFvQisrRCxRQUFwQixPQUNuQmpOLEVBQUF2MUQsRUFBQW1LLGNBQUEsV0FDRW9yRCxFQUFBdjFELEVBQUFtSyxjQUFBLE9BQUs2RixJQUFLdXlELEVBQVFFLFVBQVUsZ0JBQzVCbE4sRUFBQXYxRCxFQUFBbUssY0FBQSxPQUFLczRELFVBQVUseUJBQ2JsTixFQUFBdjFELEVBQUFtSyxjQUFBLFVBQVFzNEQsVUFBVSxxQkFBcUJodUIsUUFBU0EsR0FBVSt0QixPQUtoRUYsR0FBYXB4RCxVQUFZLENBQ3ZCcXhELE9BQVExaEIsSUFBVVgsT0FBT0osV0FDekJyTCxRQUFTb00sSUFBVTEvQixLQUFLMitCLFdBQ3hCMGlCLFFBQVUzaEIsSUFBVVgsT0FBT0osWUFHZHdpQixVQ2RUSSxHQUFhLFNBQUFqL0QsR0FBQSxJQUFHay9ELEVBQUhsL0QsRUFBR2svRCxPQUFRQyxFQUFYbi9ELEVBQVdtL0QsWUFBYUosRUFBeEIvK0QsRUFBd0IrK0QsUUFBU0ssRUFBakNwL0QsRUFBaUNvL0QsVUFBakMsT0FDakJGLEVBQU9yL0QsT0FBUyxHQUNoQml5RCxFQUFBdjFELEVBQUFtSyxjQUFBLE9BQUtzNEQsVUFBVSxnQkFDWkUsRUFBTzc3RCxJQUFJLFNBQUNvN0QsRUFBT2wvRCxHQUFSLE9BQ1Z1eUQsRUFBQXYxRCxFQUFBbUssY0FBQSxPQUFLczRELFVBQVUseUJBQXlCeGxFLElBQUtpbEUsRUFBTXY1RCxJQUNqRDRzRCxFQUFBdjFELEVBQUFtSyxjQUFBLFNBQUkrM0QsRUFBTXY1RCxJQUNSazZELEdBQWF0TixFQUFBdjFELEVBQUFtSyxjQUFBLFNBQUkrM0QsRUFBTWQsV0FDekI3TCxFQUFBdjFELEVBQUFtSyxjQUFDMjRELEdBQUQsQ0FDRVAsT0FBUUwsRUFBTWIsU0FDZDVzQixRQUFXLGtCQUFNbXVCLEVBQVlWLElBQzdCTSxRQUFXQSxTQU9yQkUsR0FBV3h4RCxVQUFZLENBQ3JCeXhELE9BQVE5aEIsSUFBVWIsTUFBTUYsWUFHWDRpQixVQ3RCVEssR0FBYSxTQUFBdC9ELEdBQTZDLElBQTFDdS9ELEVBQTBDdi9ELEVBQTFDdS9ELGFBQWNDLEVBQTRCeC9ELEVBQTVCdy9ELFdBQVlDLEVBQWdCei9ELEVBQWhCeS9ELFVBRzFDQyxFQUFtQnpqRSxLQUFLK1QsTUFBTXd2RCxFQURQLEdBQ3VDLEdBRTVERyxFQUFlLFNBQUNDLEdBQ3BCRixFQUFtQnpqRSxLQUFLK1QsTUFBTXd2RCxFQUpMLEdBSXFDLEdBRzlEQyxFQUFVRixFQVBlLElBTUFHLEVBQW1CRSxHQUF1QyxFQU4xRCxLQVUzQixPQUNFOU4sRUFBQXYxRCxFQUFBbUssY0FBQSxXQUNFb3JELEVBQUF2MUQsRUFBQW1LLGNBQUEsVUFBUXNxQyxRQUFTLGtCQUFNMnVCLEdBQWMsS0FBckMsWUFDQTdOLEVBQUF2MUQsRUFBQW1LLGNBQUEsU0FBSWc1RCxHQUNKNU4sRUFBQXYxRCxFQUFBbUssY0FBQSxVQUFRc3FDLFFBQVMsa0JBQU0ydUIsRUFBYSxLQUFwQyxVQUtOTCxHQUFXN3hELFVBQVksQ0FDbkIreEQsV0FBWXBpQixJQUFVL3lCLE9BQU9neUIsV0FDN0JvakIsVUFBV3JpQixJQUFVMS9CLEtBQUsyK0IsWUFHZmlqQiw4QkNuQkFPLFdBTlUsa0JBQ3ZCcE0sRUFBQSxxQkFBS3VMLFVBQVUsZ0NBQ2J2TCxFQUFBLHFCQUFLbG5ELElBQUt1ekQsZ3dCQ0dSQyxlQUNGLFNBQUFBLEVBQVk3akQsR0FBTyxJQUFBKzJDLEVBQUEsbUdBQUErTSxDQUFBMS9ELEtBQUF5L0QsSUFDZjlNLHlFQUFBZ04sQ0FBQTMvRCxLQUFBNC9ELEdBQUFILEdBQUEzbkUsS0FBQWtJLEtBQU00YixLQUNEaWtELGVBQWlCbE4sRUFBS2tOLGVBQWUxbUUsS0FBcEIybUUsR0FBQW5OLElBQ3RCQSxFQUFLb04sY0FBZ0JwTixFQUFLb04sY0FBYzVtRSxLQUFuQjJtRSxHQUFBbk4sSUFDckJBLEVBQUtxTixpQkFBbUJyTixFQUFLcU4saUJBQWlCN21FLEtBQXRCMm1FLEdBQUFuTixJQUN4QkEsRUFBS2g1RCxNQUFRZzVELEVBQUs5MkMsUUFDbEI4MkMsRUFBSy94RCxNQUFRLENBQ1hzcEIsT0FBUSxJQVBLeW9DLHlQQURHejBDLDZEQVlQek0sR0FDYkEsRUFBTTBVLGlCQUVObm1CLEtBQUs0YixNQUFNcWtELG1CQUFtQmpnRSxLQUFLWSxNQUFNc3BCLDhDQUc3QnpZLEdBQ1p6UixLQUFLZ2MsU0FBUyxDQUFFa08sT0FBUXpZLEVBQU10VyxPQUFPdkMsaURBR3JCdWxFLEdBQ2hCbitELEtBQUs0YixNQUFNc2tELFNBQVMsQ0FDbEJ0N0QsR0FBSXU1RCxFQUFNdjVELEdBQ1Z5NEQsVUFBV2MsRUFBTWQsVUFDakJDLFNBQVVhLEVBQU1iLDRDQUtoQixPQUNFOUwsRUFBQXYxRCxFQUFBbUssY0FBQSxPQUFLczRELFVBQVUsVUFDYmxOLEVBQUF2MUQsRUFBQW1LLGNBQUEsUUFBTXM0RCxVQUFVLHNCQUFzQnlCLFNBQVVuZ0UsS0FBSzYvRCxnQkFDbkRyTyxFQUFBdjFELEVBQUFtSyxjQUFBLFNBQ0VnNkQsWUFBYSxlQUNiMUIsVUFBVSx1QkFDVjJCLFNBQVVyZ0UsS0FBSysvRCxpQkFJakIvL0QsS0FBSzRiLE1BQU02aEQsUUFDVGpNLEVBQUF2MUQsRUFBQW1LLGNBQUNrNkQsR0FBRCxNQUNBdGdFLEtBQUs0YixNQUFNelksTUFBTTQ2RCxRQUNkdk0sRUFBQXYxRCxFQUFBbUssY0FBQSxXQUFNcEcsS0FBSzRiLE1BQU16WSxNQUFNNjZELFNBQ3hCeE0sRUFBQXYxRCxFQUFBbUssY0FBQW9yRCxFQUFBdjFELEVBQUEwakIsU0FBQSxLQUNFNnhDLEVBQUF2MUQsRUFBQW1LLGNBQUNtNkQsR0FBRCxDQUNFM0IsT0FBUTUrRCxLQUFLNGIsTUFBTWdpRCxRQUNuQmlCLFlBQWE3K0QsS0FBS2dnRSxpQkFDbEJ2QixRQUFRLGNBQ1JLLFdBQVcsSUFHWDkrRCxLQUFLNGIsTUFBTWdpRCxRQUFRcitELE9BQVMsR0FDNUJpeUQsRUFBQXYxRCxFQUFBbUssY0FBQ282RCxHQUFELENBQ0V0QixXQUFZbC9ELEtBQUs0YixNQUFNOGhELFlBQ3ZCdUIsYUFBY2ovRCxLQUFLWSxNQUFNc3BCLE9BQ3pCaTFDLFVBQVduL0QsS0FBSzRiLE1BQU1xa0QsOERBMEIvQlEsTUFiUyxTQUFDNy9ELEdBQVUsSUFBQTgvRCxFQUc3QjkvRCxFQURGc3BCLE9BQVV1ekMsRUFGcUJpRCxFQUVyQmpELFFBQVN0NkQsRUFGWXU5RCxFQUVadjlELE1BQU95NkQsRUFGSzhDLEVBRUw5QyxRQUc1QixNQUFPLENBQ0xILFVBQ0F0NkQsUUFDQXU2RCxZQVIrQmdELEVBRUloRCxZQU9uQ0UsWUFNRixDQUNFc0MsU1ByRW9CLFNBQUEvQixHQUN0QixNQUFPLENBQ0gvakUsS0F0Qm1CLFlBdUJuQml0QyxRQUFTLENBQ0x6aUMsR0FBSXU1RCxFQUFNdjVELEdBQ1Z5NEQsVUFBV2MsRUFBTWQsVUFDakJDLFNBQVVhLEVBQU1iLFlPZ0V0QjJDLG1CUFY4QixTQUFDekMsR0FBcUIsSUFBYlosRUFBYXorRCxVQUFBb0IsT0FBQSxRQUFBbEUsSUFBQThDLFVBQUEsR0FBQUEsVUFBQSxHQUFOLEVBQ2hELE9BQU8sU0FBQWlCLEdBRUwsT0FEQUEsRUFBU20rRCxHQUFjQyxFQUFRWixJQUN4QmIsR0FBY1MsVUFBVWdCLEVBQVFaLEdBQ3BDdHVCLEtBQUssU0FBQXN2QixHQUFPLE9BQUl4K0QsRUFBU3UrRCxHQUFjQyxFQUFTaEIsTUFENUMsTUFFRSxTQUFBejVELEdBQUssT0FBSS9ELEVBQVN5K0QsR0FBYzE2RCxRT016Q282RCxpQkFDQUksa0JBTlc4QyxDQVFiaEIsSUM5RklrQixHQUFlLFNBQUFqaEUsR0FBMkMsSUFBekN1K0QsRUFBeUN2K0QsRUFBekN1K0QsU0FBVTJDLEVBQStCbGhFLEVBQS9Ca2hFLFlBQVlDLEVBQW1CbmhFLEVBQW5CbWhFLGNBQzNDLE9BQ0VyUCxFQUFBdjFELEVBQUFtSyxjQUFBLE9BQUtzNEQsVUFBVSxpQkFDYmxOLEVBQUF2MUQsRUFBQW1LLGNBQUEseUJBRUU2M0QsR0FBWUEsRUFBUzErRCxPQUNqQml5RCxFQUFBdjFELEVBQUFtSyxjQUFBLFdBQ0VvckQsRUFBQXYxRCxFQUFBbUssY0FBQ202RCxHQUFELENBQ0UzQixPQUFRWCxFQUNSWSxZQUFhK0IsRUFDYm5DLFFBQVUsdUJBQ1ZLLFdBQVcsSUFFYnROLEVBQUF2MUQsRUFBQW1LLGNBQUEsVUFBUXNxQyxRQUFTbXdCLEdBQWpCLG1CQUVGLG9CQVlaRixHQUFheHpELFVBQVksQ0FDdkI4d0QsU0FBV25oQixJQUFVYixNQUFNRixXQUMzQjZrQixZQUFhOWpCLElBQVUxL0IsS0FBSzIrQixZQUdmMGtCLFVBVFMsU0FBQTcvRCxHQUNwQixNQUFPLENBQUVxOUQsU0FBVXI5RCxFQUFNcTlELFdBVTNCLENBQ0UyQyxZUkp1QixTQUFBekMsR0FDekIsTUFBTyxDQUNIL2pFLEtBaENzQixlQWlDdEJpdEMsUUFBUyxDQUFDemlDLEdBQUl1NUQsRUFBTXY1RCxNUUV0Qmk4RCxjUkV5QixXQUMzQixNQUFPLENBQ0h6bUUsS0F0Q3dCLG9CUThCZnFtRSxDQU1YRSxJQ25DRWhuRSxHQUFRMGtFLEtBV2R5QyxJQUFTL3lELE9BQU95akQsRUFBQXYxRCxFQUFBbUssY0FURixXQUNaLE9BQ0dvckQsRUFBQXYxRCxFQUFBbUssY0FBQ2l0RCxFQUFELENBQVUxNUQsTUFBT0EsSUFDaEI2M0QsRUFBQXYxRCxFQUFBbUssY0FBQzI2RCxHQUFELE1BQ0F2UCxFQUFBdjFELEVBQUFtSyxjQUFDNDZELEdBQUQsUUFLVSxNQUFXOTZELFNBQVMrNkQsZUFBZSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzNyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY29tcG9zZSA9IHJlcXVpcmUoJ3JlZHV4JykuY29tcG9zZTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY29tcG9zZVdpdGhEZXZUb29scyA9IChcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/XG4gICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6XG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0JykgcmV0dXJuIGNvbXBvc2U7XG4gICAgICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbik7XG5cbmV4cG9ydHMuZGV2VG9vbHNFbmhhbmNlciA9IChcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gP1xuICAgIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIDpcbiAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZ1bmN0aW9uKG5vb3ApIHsgcmV0dXJuIG5vb3A7IH0gfVxuKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjJhYjI0YzY4ZTIzMTc0YjA0MjA5Y2Q2MjBlNWI4MmU1LnBuZ1wiOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsYmE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBjYShhLGIsZCxjLGUsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtkLGMsZSxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztrKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gZWEoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZmEoYSxiLGQpe3ZhciBjPWEucmVzdWx0LGU9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1kYShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxmYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7bnVsbD09PWE/QihcIjMyMVwiKTp2b2lkIDA7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YmEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YWEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1cbmIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjguNlwiLFxudW5zdGFibGVfQ29uY3VycmVudE1vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50T3duZXI6Sixhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2MsZCxlLGYsZyxoXSxrPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFtrKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24geChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOngoXCIyMjdcIik7ZnVuY3Rpb24gY2EoYSxiLGMsZCxlLGYsZyxoLGwpe3ZhciBrPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGspfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsbCl7ZGE9ITE7ZWE9bnVsbDtjYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxsKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgaz1lYTtkYT0hMTtlYT1udWxsfWVsc2UgeChcIjE5OFwiKSxrPXZvaWQgMDtmYXx8KGZhPSEwLGhhPWspfX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6eChcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOngoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/eChcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGw9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihsKXtmb3IoZSBpbiBsKWwuaGFzT3duUHJvcGVydHkoZSkmJnFhKGxbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOngoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/eChcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9LHRhPW51bGwsdWE9bnVsbCx2YT1udWxsO2Z1bmN0aW9uIHdhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD12YShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHhhKGEsYil7bnVsbD09Yj94KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgQmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bGE/eChcIjEwMVwiKTp2b2lkIDA7bGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7bmEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT94KFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX19O1xuZnVuY3Rpb24gQ2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD10YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRGEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEmJih5YShhLEFhKSx6YT94KFwiOTVcIik6dm9pZCAwLGZhKSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9dmFyIEVhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEZhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRWEsR2E9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitFYTtmdW5jdGlvbiBIYShhKXtpZihhW0ZhXSlyZXR1cm4gYVtGYV07Zm9yKDshYVtGYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBJYShhKXthPWFbRmFdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBKYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7eChcIjMzXCIpfWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE1hKGEsYixjKXtpZihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIE9hKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZPYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBTYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYT17YW5pbWF0aW9uZW5kOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2EoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYT17fSxWYT17fTtcblJhJiYoVmE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYShhKXtpZihVYVthXSlyZXR1cm4gVWFbYV07aWYoIVRhW2FdKXJldHVybiBhO3ZhciBiPVRhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZhKXJldHVybiBVYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFhhPVdhKFwiYW5pbWF0aW9uZW5kXCIpLFlhPVdhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFphPVdhKFwiYW5pbWF0aW9uc3RhcnRcIiksJGE9V2EoXCJ0cmFuc2l0aW9uZW5kXCIpLGFiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYj1udWxsLGNiPW51bGwsZGI9bnVsbDtcbmZ1bmN0aW9uIGViKCl7aWYoZGIpcmV0dXJuIGRiO3ZhciBhLGI9Y2IsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZGI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBmYigpe3JldHVybiEwfWZ1bmN0aW9uIGdiKCl7cmV0dXJuITF9XG5mdW5jdGlvbiB5KGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9mYjpnYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWdiO3JldHVybiB0aGlzfVxubih5LnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWZiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWZiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWZifSxpc1BlcnNpc3RlbnQ6Z2IsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Z2I7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTt5LkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbnkuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7aGIoYyk7cmV0dXJuIGN9O2hiKHkpO2Z1bmN0aW9uIGliKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGpiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp4KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGhiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWliO2EucmVsZWFzZT1qYn12YXIga2I9eS5leHRlbmQoe2RhdGE6bnVsbH0pLGxiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxtYj1bOSwxMywyNywzMl0sbmI9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LG9iPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKG9iPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcGI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFvYixxYj1SYSYmKCFuYnx8b2ImJjg8b2ImJjExPj1vYikscmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksc2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdGI9ITE7XG5mdW5jdGlvbiB1YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW1iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gdmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgd2I9ITE7ZnVuY3Rpb24geGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHZiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt0Yj0hMDtyZXR1cm4gcmI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09cmImJnRiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHliKGEsYil7aWYod2IpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW5iJiZ1YihhLGIpPyhhPWViKCksZGI9Y2I9YmI9bnVsbCx3Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcWImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHpiPXtldmVudFR5cGVzOnNiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihuYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXNiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXNiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1zYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2Ugd2I/dWIoYSxjKSYmKGU9c2IuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1zYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhxYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih3Ynx8ZSE9PXNiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXNiLmNvbXBvc2l0aW9uRW5kJiZ3YiYmKGY9ZWIoKSk6KGJiPWQsY2I9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsd2I9XG4hMCkpLGU9a2IuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9dmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXBiP3hiKGEsYyk6eWIoYSxjKSk/KGI9bGIuZ2V0UG9vbGVkKHNiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxBYj1udWxsLEJiPW51bGwsQ2I9bnVsbDtmdW5jdGlvbiBEYihhKXtpZihhPXVhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQWI/eChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dGEoYS5zdGF0ZU5vZGUpO0FiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gRWIoYSl7QmI/Q2I/Q2IucHVzaChhKTpDYj1bYV06QmI9YX1mdW5jdGlvbiBGYigpe2lmKEJiKXt2YXIgYT1CYixiPUNiO0NiPUJiPW51bGw7RGIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKURiKGJbYV0pfX1cbmZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPSExO2Z1bmN0aW9uIEtiKGEsYil7aWYoSmIpcmV0dXJuIGEoYik7SmI9ITA7dHJ5e3JldHVybiBHYihhLGIpfWZpbmFsbHl7aWYoSmI9ITEsbnVsbCE9PUJifHxudWxsIT09Q2IpSWIoKSxGYigpfX12YXIgTGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gTWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFMYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBOYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gT2IoYSl7aWYoIVJhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFBiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBRYihhKXt2YXIgYj1QYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gUmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVFiKGEpKX1mdW5jdGlvbiBTYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9UGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgVGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7VGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoVGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7XG52YXIgVWI9L14oLiopW1xcXFxcXC9dLyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsVmI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxXYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsWGI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsWWI9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsWmI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsJGI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksYWM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxiYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsY2M9ej9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsZGM9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsZWM9ej9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGZjPXo/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsZ2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGhjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1nYyYmYVtnY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGljKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgWGI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgV2I6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIFpiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIFliOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgZGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBhYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlICRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgY2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGVjOnJldHVybiBpYyhhLnR5cGUpO2Nhc2UgZmM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBpYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBqYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9aWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9aWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShVYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIGtjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG1jPXt9LG5jPXt9O1xuZnVuY3Rpb24gb2MoYSl7aWYobGMuY2FsbChuYyxhKSlyZXR1cm4hMDtpZihsYy5jYWxsKG1jLGEpKXJldHVybiExO2lmKGtjLnRlc3QoYSkpcmV0dXJuIG5jW2FdPSEwO21jW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBDKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBDKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgcmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxcbnNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuZnVuY3Rpb24gdGMoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29jKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB1YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gdmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gd2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiB4YyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiB5YyhhLGIpe3hjKGEsYik7dmFyIGM9dWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/emMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmemMoYSxiLnR5cGUsdWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBBYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiB6YyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEJjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIENjKGEsYixjKXthPXkuZ2V0UG9vbGVkKEJjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RWIoYyk7UWEoYSk7cmV0dXJuIGF9dmFyIERjPW51bGwsRWM9bnVsbDtmdW5jdGlvbiBGYyhhKXtEYShhKX1cbmZ1bmN0aW9uIEdjKGEpe3ZhciBiPUphKGEpO2lmKFNiKGIpKXJldHVybiBhfWZ1bmN0aW9uIEhjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEljPSExO1JhJiYoSWM9T2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gSmMoKXtEYyYmKERjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSxFYz1EYz1udWxsKX1mdW5jdGlvbiBLYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmR2MoRWMpJiYoYT1DYyhFYyxhLE5iKGEpKSxLYihGYyxhKSl9ZnVuY3Rpb24gTGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEpjKCksRGM9YixFYz1jLERjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSk6XCJibHVyXCI9PT1hJiZKYygpfWZ1bmN0aW9uIE1jKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIEdjKEVjKX1cbmZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gR2MoYil9ZnVuY3Rpb24gT2MoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gR2MoYil9XG52YXIgUGM9e2V2ZW50VHlwZXM6QmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpJYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/SmEoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPUhjOk1iKGUpP0ljP2Y9T2M6KGY9TWMsZz1MYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9TmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIENjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmemMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sUWM9eS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFJjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFNjKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9UmNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBUYygpe3JldHVybiBTY31cbnZhciBVYz0wLFZjPTAsV2M9ITEsWGM9ITEsWWM9UWMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVVjO1VjPWEuc2NyZWVuWDtyZXR1cm4gV2M/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihXYz0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVZjO1ZjPWEuc2NyZWVuWTtyZXR1cm4gWGM/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihYYz0hMCwwKX19KSxaYz1ZYy5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksJGM9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGFkPXtldmVudFR5cGVzOiRjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0hhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsbD12b2lkIDAsaz12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1ZYyxoPSRjLm1vdXNlTGVhdmUsbD0kYy5tb3VzZUVudGVyLGs9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1aYyxoPSRjLnBvaW50ZXJMZWF2ZSxsPSRjLnBvaW50ZXJFbnRlcixrPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpKYShmKTtlPW51bGw9PWI/ZTpKYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1rK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQobCxiLGMsZCk7Yy50eXBlPWsrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtrPTA7Zm9yKGc9YjtnO2c9TGEoZykpaysrO2c9MDtmb3IobD1lO2w7bD1MYShsKSlnKys7Zm9yKDswPGstZzspYj1MYShiKSxrLS07Zm9yKDswPGctazspZT1MYShlKSxnLS07Zm9yKDtrLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1MYShiKTtlPUxhKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtrPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2IucHVzaChmKTtmPUxhKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7az1kLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TGEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylPYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylPYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGJkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgY2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGRkKGEsYil7aWYoYmQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFjZC5jYWxsKGIsY1tkXSl8fCFiZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGVkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGZkKGEpezIhPT1lZChhKT94KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWVkKGEpLDM9PT1iP3goXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGZkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGZkKGUpLGI7Zz1nLnNpYmxpbmd9eChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOngoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD94KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/eChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoZChhKXthPWdkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIGlkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxqZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLGtkPVFjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gbGQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgbWQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LG5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxvZD1RYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9bWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9bGQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP25kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9sZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9sZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHBkPVljLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD1RYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUY30pLHJkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHNkPVljLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWGEsXCJhbmltYXRpb25FbmRcIl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtaYSxcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sWyRhLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sdWQ9e30sdmQ9e307ZnVuY3Rpb24gd2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt1ZFthXT1iO3ZkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMCl9KTt0ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITEpfSk7XG52YXIgeGQ9e2V2ZW50VHlwZXM6dWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bGQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPW9kO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1rZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVljO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG5wZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXFkO2JyZWFrO2Nhc2UgWGE6Y2FzZSBZYTpjYXNlIFphOmE9aWQ7YnJlYWs7Y2FzZSAkYTphPXJkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVFjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9c2Q7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1qZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVpjO2JyZWFrO2RlZmF1bHQ6YT15fWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7UWEoYik7cmV0dXJuIGJ9fSx5ZD14ZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG56ZD1bXTtmdW5jdGlvbiBBZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1IYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1OYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxvYS5sZW5ndGg7aCsrKXt2YXIgbD1vYVtoXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz14YShnLGwpKX1EYShnKX19dmFyIEJkPSEwO1xuZnVuY3Rpb24gRShhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEVkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gQ2QoYSxiKXtIYihEZCxhLGIpfVxuZnVuY3Rpb24gRGQoYSxiKXtpZihCZCl7dmFyIGM9TmIoYik7Yz1IYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWVkKGMpfHwoYz1udWxsKTtpZih6ZC5sZW5ndGgpe3ZhciBkPXpkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e0tiKEFkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+emQubGVuZ3RoJiZ6ZC5wdXNoKGEpfX19dmFyIEZkPXt9LEdkPTAsSGQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gSWQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsSGQpfHwoYVtIZF09R2QrKyxGZFthW0hkXV09e30pO3JldHVybiBGZFthW0hkXV19ZnVuY3Rpb24gSmQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIEtkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExkKGEsYil7dmFyIGM9S2QoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2QoYyl9fWZ1bmN0aW9uIE1kKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWQoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmQoKXtmb3IodmFyIGE9d2luZG93LGI9SmQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9SmQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIFBkKCl7dmFyIGE9TmQoKTtpZihPZChhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yj0oYj1hLm93bmVyRG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGM9Yi5nZXRTZWxlY3Rpb24mJmIuZ2V0U2VsZWN0aW9uKCk7aWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChBKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaD0tMSxsPTAsaz0wLG09YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdDs7KXttIT09Ynx8MCE9PWQmJjMhPT1tLm5vZGVUeXBlfHwoZz1mK2QpO20hPT1lfHwwIT09YyYmMyE9PW0ubm9kZVR5cGV8fChoPWYrYyk7Mz09PW0ubm9kZVR5cGUmJihmKz1tLm5vZGVWYWx1ZS5sZW5ndGgpO1xuaWYobnVsbD09PSh0PW0uZmlyc3RDaGlsZCkpYnJlYWs7cD1tO209dH1mb3IoOzspe2lmKG09PT1hKWJyZWFrIGI7cD09PWImJisrbD09PWQmJihnPWYpO3A9PT1lJiYrK2s9PT1jJiYoaD1mKTtpZihudWxsIT09KHQ9bS5uZXh0U2libGluZykpYnJlYWs7bT1wO3A9bS5wYXJlbnROb2RlfW09dH1iPS0xPT09Z3x8LTE9PT1oP251bGw6e3N0YXJ0OmcsZW5kOmh9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3JldHVybntmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9fVxuZnVuY3Rpb24gUWQoYSl7dmFyIGI9TmQoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJk1kKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZPZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1MZChjLGYpO3ZhciBnPUxkKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUmQ9UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxTZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sVGQ9bnVsbCxVZD1udWxsLFZkPW51bGwsV2Q9ITE7XG5mdW5jdGlvbiBYZChhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKFdkfHxudWxsPT1UZHx8VGQhPT1KZChjKSlyZXR1cm4gbnVsbDtjPVRkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJk9kKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFZkJiZkZChWZCxjKT9udWxsOihWZD1jLGE9eS5nZXRQb29sZWQoU2Quc2VsZWN0LFVkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9VGQsUWEoYSksYSl9XG52YXIgWWQ9e2V2ZW50VHlwZXM6U2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9SWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoTWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpVGQ9ZSxVZD1iLFZkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpWZD1VZD1UZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpXZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIFdkPSExLFhkKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFJkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gWGQoYyxkKX1yZXR1cm4gbnVsbH19O0JhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dGE9S2E7dWE9SWE7dmE9SmE7QmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjp4ZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46YWQsQ2hhbmdlRXZlbnRQbHVnaW46UGMsU2VsZWN0RXZlbnRQbHVnaW46WWQsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp6Yn0pO2Z1bmN0aW9uIFpkKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gJGQoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1aZChiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gYWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3VjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBiZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBjZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3goXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp4KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp1YyhjKX19XG5mdW5jdGlvbiBkZShhLGIpe3ZhciBjPXVjKGIudmFsdWUpLGQ9dWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBlZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgZmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gZ2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBoZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/Z2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgaWU9dm9pZCAwLGplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle2llPWllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPWllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIGtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgbGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sbWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGxlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe21lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7bGVbYl09bGVbYV19KX0pO2Z1bmN0aW9uIG5lKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxsZS5oYXNPd25Qcm9wZXJ0eShhKSYmbGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gb2UoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bmUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgcGU9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHFlKGEsYil7YiYmKHBlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3goXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6eChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/eChcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIHJlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIHNlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPUlkKGEpO2I9c2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOkVkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpFZChcImZvY3VzXCIsYSk7RWQoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOk9iKGUpJiZFZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYi5pbmRleE9mKGUpJiZFKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIHRlKCl7fXZhciB1ZT1udWxsLHZlPW51bGw7XG5mdW5jdGlvbiB3ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24geGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIHllPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHplPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBZT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssQmU9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaztcbmZ1bmN0aW9uIENlKGEsYixjLGQsZSl7YVtHYV09ZTtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmeGMoYSxlKTtyZShjLGQpO2Q9cmUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9vZShhLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/amUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP2tlKGEsaCk6dGMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9hZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/YWUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsXG4hMCk6YWUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fWZ1bmN0aW9uIERlKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIEZlPVtdLEdlPS0xO2Z1bmN0aW9uIEYoYSl7MD5HZXx8KGEuY3VycmVudD1GZVtHZV0sRmVbR2VdPW51bGwsR2UtLSl9ZnVuY3Rpb24gRyhhLGIpe0dlKys7RmVbR2VdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgSGU9e30sSD17Y3VycmVudDpIZX0sST17Y3VycmVudDohMX0sSWU9SGU7XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEhlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEooYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBLZShhKXtGKEksYSk7RihILGEpfWZ1bmN0aW9uIExlKGEpe0YoSSxhKTtGKEgsYSl9XG5mdW5jdGlvbiBNZShhLGIsYyl7SC5jdXJyZW50IT09SGU/eChcIjE2OFwiKTp2b2lkIDA7RyhILGIsYSk7RyhJLGMsYSl9ZnVuY3Rpb24gTmUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6eChcIjEwOFwiLGljKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8SGU7SWU9SC5jdXJyZW50O0coSCxiLGEpO0coSSxJLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBQZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6eChcIjE2OVwiKTtjPyhiPU5lKGEsYixJZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEYoSSxhKSxGKEgsYSksRyhILGIsYSkpOkYoSSxhKTtHKEksYyxhKX12YXIgUWU9bnVsbCxSZT1udWxsO2Z1bmN0aW9uIFNlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBUZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtRZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UmU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFVlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5jb250ZXh0RGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEsoYSxiLGMsZCl7cmV0dXJuIG5ldyBVZShhLGIsYyxkKX1cbmZ1bmN0aW9uIFZlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gV2UoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIFZlKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1jYylyZXR1cm4gMTE7aWYoYT09PWVjKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFhlKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9SyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yy5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcztjLnNpYmxpbmc9YS5zaWJsaW5nO1xuYy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKVZlKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIFhiOnJldHVybiBaZShjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGJjOnJldHVybiAkZShjLGV8MyxmLGIpO2Nhc2UgWWI6cmV0dXJuICRlKGMsZXwyLGYsYik7Y2FzZSBaYjpyZXR1cm4gYT1LKDEyLGMsYixlfDQpLGEuZWxlbWVudFR5cGU9WmIsYS50eXBlPVpiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgZGM6cmV0dXJuIGE9SygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1kYyxhLnR5cGU9ZGMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlICRiOmc9MTA7YnJlYWsgYTtjYXNlIGFjOmc9OTticmVhayBhO2Nhc2UgY2M6Zz0xMTticmVhayBhO2Nhc2UgZWM6Zz1cbjE0O2JyZWFrIGE7Y2FzZSBmYzpnPTE2O2Q9bnVsbDticmVhayBhfXgoXCIxMzBcIixudWxsPT1hP2E6dHlwZW9mIGEsXCJcIil9Yj1LKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWmUoYSxiLGMsZCl7YT1LKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiAkZShhLGIsYyxkKXthPUsoOCxhLGQsYik7Yj0wPT09KGImMSk/WWI6YmM7YS5lbGVtZW50VHlwZT1iO2EudHlwZT1iO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBhZihhLGIsYyl7YT1LKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGJmKGEsYixjKXtiPUsoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9ZnVuY3Rpb24gY2YoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTswPT09Yz9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT1iOmM8Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YjphLmxhdGVzdFBlbmRpbmdUaW1lPmImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBlZihhLGIpe2EuZGlkRXJyb3I9ITE7aWYoMD09PWIpYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTA7ZWxzZXtiPGEubGF0ZXN0UGluZ2VkVGltZSYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmxhdGVzdFBlbmRpbmdUaW1lOzAhPT1jJiYoYz5iP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPmImJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7MD09PWM/Y2YoYSxiKTpiPGEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxjZihhLGIpKTpcbmI+YyYmY2YoYSxiKX1kZigwLGEpfWZ1bmN0aW9uIGZmKGEsYil7YS5kaWRFcnJvcj0hMTthLmxhdGVzdFBpbmdlZFRpbWU+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lLGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1mdW5jdGlvbiBkZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIEwoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9XG5mdW5jdGlvbiBoZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6YS5fc3RhdHVzPTA7Yj1hLl9jdG9yO2I9YigpO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSk7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3Jlc3VsdDt9YS5fcmVzdWx0PWI7dGhyb3cgYjt9fXZhciBqZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIGtmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIHRmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09ZWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnRhZz1yZjtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPWxmKCk7Yz1tZihjLGEpO3ZhciBkPW5mKGMpO2QudGFnPVxuc2Y7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO29mKCk7cGYoYSxkKTtxZihhLGMpfX07ZnVuY3Rpb24gdWYoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZGQoYyxkKXx8IWRkKGUsZik6ITB9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9ITEsZT1IZTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1NKGYpOihlPUooYik/SWU6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/SmUoYSxlKTpIZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPXRmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHdmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHhmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1NKGYpOihmPUooYik/SWU6SC5jdXJyZW50LGUuY29udGV4dD1KZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2YoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciB6Zj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gQWYoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3goXCIzMDlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOngoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWpmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3goXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp4KFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBCZihhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmeChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gQ2YoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1YZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWFmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1BZihhLGIsYyksZC5yZXR1cm49YSxkO2Q9WWUoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9QWYoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1iZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1aZShjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9YWYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGM9WWUoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9QWYoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIFdiOnJldHVybiBiPWJmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZih6ZihiKXx8XG5oYyhiKSlyZXR1cm4gYj1aZShiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtCZihhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHQoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1YYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6bChhLGIsYyxkKTpudWxsO2Nhc2UgV2I6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGx9aWYoemYoYyl8fGhjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtCZihhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEEoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09WGI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTpsKGIsYSxkLGUpO2Nhc2UgV2I6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSl9aWYoemYoZCl8fGhjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtCZihiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHE9Zyx1PWc9MCxCPW51bGw7bnVsbCE9PXEmJnU8aC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB3PXQoZSxxLGhbdV0sayk7aWYobnVsbD09PXcpe251bGw9PT1xJiYocT1CKTticmVha31hJiZcbnEmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih3LGcsdSk7bnVsbD09PW0/bD13Om0uc2libGluZz13O209dztxPUJ9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihxPXAoZSxoW3VdLGspKWc9ZihxLGcsdSksbnVsbD09PW0/bD1xOm0uc2libGluZz1xLG09cTtyZXR1cm4gbH1mb3IocT1kKGUscSk7dTxoLmxlbmd0aDt1KyspaWYoQj1BKHEsZSx1LGhbdV0saykpYSYmbnVsbCE9PUIuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09Qi5rZXk/dTpCLmtleSksZz1mKEIsZyx1KSxudWxsPT09bT9sPUI6bS5zaWJsaW5nPUIsbT1CO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gUihlLGcsaCxrKXt2YXIgbD1oYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD94KFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3goXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxxPWcsdT1nPTAsQj1udWxsLHc9aC5uZXh0KCk7bnVsbCE9PXEmJiF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHY9dChlLHEsdy52YWx1ZSxrKTtpZihudWxsPT09dil7cXx8KHE9Qik7YnJlYWt9YSYmcSYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHYsZyx1KTtudWxsPT09bT9sPXY6bS5zaWJsaW5nPXY7bT12O3E9Qn1pZih3LmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1wKGUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1BKHEsZSx1LHcudmFsdWUsayksbnVsbCE9PXcmJihhJiZudWxsIT09dy5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT13LmtleT91Olxudy5rZXkpLGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09WGImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgVmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1YYjprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1YYj9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9QWYoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1YYj8oZD1aZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9WWUoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9QWYoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFdiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9YmYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWFmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKHpmKGYpKXJldHVybiB2KGEsZCxmLGgpO2lmKGhjKGYpKXJldHVybiBSKGEsZCxmLGgpO2wmJkJmKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUseChcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIERmPUNmKCEwKSxFZj1DZighMSksRmY9e30sTj17Y3VycmVudDpGZn0sR2Y9e2N1cnJlbnQ6RmZ9LEhmPXtjdXJyZW50OkZmfTtmdW5jdGlvbiBJZihhKXthPT09RmY/eChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZihhLGIpe0coSGYsYixhKTtHKEdmLGEsYSk7RyhOLEZmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmhlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1oZShiLGMpfUYoTixhKTtHKE4sYixhKX1mdW5jdGlvbiBLZihhKXtGKE4sYSk7RihHZixhKTtGKEhmLGEpfWZ1bmN0aW9uIExmKGEpe0lmKEhmLmN1cnJlbnQpO3ZhciBiPUlmKE4uY3VycmVudCk7dmFyIGM9aGUoYixhLnR5cGUpO2IhPT1jJiYoRyhHZixhLGEpLEcoTixjLGEpKX1mdW5jdGlvbiBNZihhKXtHZi5jdXJyZW50PT09YSYmKEYoTixhKSxGKEdmLGEpKX1cbnZhciBOZj0wLE9mPTIsUGY9NCxRZj04LFJmPTE2LFNmPTMyLFRmPTY0LFVmPTEyOCxWZj1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFdmPTAsWGY9bnVsbCxPPW51bGwsUD1udWxsLFlmPW51bGwsUT1udWxsLFpmPW51bGwsJGY9MCxhZz1udWxsLGJnPTAsY2c9ITEsZGc9bnVsbCxlZz0wO2Z1bmN0aW9uIGZnKCl7eChcIjMyMVwiKX1mdW5jdGlvbiBnZyhhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFiZChhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMsZCxlLGYpe1dmPWY7WGY9YjtQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO1ZmLmN1cnJlbnQ9bnVsbD09PVA/aWc6amc7Yj1jKGQsZSk7aWYoY2cpe2RvIGNnPSExLGVnKz0xLFA9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwsWmY9WWYsYWc9UT1PPW51bGwsVmYuY3VycmVudD1qZyxiPWMoZCxlKTt3aGlsZShjZyk7ZGc9bnVsbDtlZz0wfVZmLmN1cnJlbnQ9a2c7YT1YZjthLm1lbW9pemVkU3RhdGU9WWY7YS5leHBpcmF0aW9uVGltZT0kZjthLnVwZGF0ZVF1ZXVlPWFnO2EuZWZmZWN0VGFnfD1iZzthPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDthP3goXCIzMDBcIik6dm9pZCAwO3JldHVybiBifWZ1bmN0aW9uIGxnKCl7VmYuY3VycmVudD1rZztXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7Y2c9ITE7ZGc9bnVsbDtlZz0wfVxuZnVuY3Rpb24gbWcoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVE/WWY9UT1hOlE9US5uZXh0PWE7cmV0dXJuIFF9ZnVuY3Rpb24gbmcoKXtpZihudWxsIT09WmYpUT1aZixaZj1RLm5leHQsTz1QLFA9bnVsbCE9PU8/Ty5uZXh0Om51bGw7ZWxzZXtudWxsPT09UD94KFwiMzEwXCIpOnZvaWQgMDtPPVA7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UT1udWxsPT09UT9ZZj1hOlEubmV4dD1hO1A9Ty5uZXh0fXJldHVybiBRfWZ1bmN0aW9uIG9nKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gcGcoYSl7dmFyIGI9bmcoKSxjPWIucXVldWU7bnVsbD09PWM/eChcIjMxMVwiKTp2b2lkIDA7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDxlZyl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09ZGcpe3ZhciBlPWRnLmdldChjKTtpZih2b2lkIDAhPT1lKXtkZy5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGg9ZT1udWxsLGw9ZCxrPSExO2Rve3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxXZj8oa3x8KGs9ITAsaD1nLGU9ZiksbT4kZiYmKCRmPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiByZyhhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PWFnPyhhZz17bGFzdEVmZmVjdDpudWxsfSxhZy5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj1hZy5sYXN0RWZmZWN0LG51bGw9PT1iP2FnLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLGFnLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNnKGEsYixjLGQpe3ZhciBlPW1nKCk7Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdGcoYSxiLGMsZCl7dmFyIGU9bmcoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZnZyhkLGcuZGVwcykpe3JnKE5mLGMsZixkKTtyZXR1cm59fWJnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsZixkKX1mdW5jdGlvbiB1ZyhhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHZnKCl7fVxuZnVuY3Rpb24gd2coYSxiLGMpezI1PmVnP3ZvaWQgMDp4KFwiMzAxXCIpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1YZnx8bnVsbCE9PWQmJmQ9PT1YZilpZihjZz0hMCxhPXtleHBpcmF0aW9uVGltZTpXZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09ZGcmJihkZz1uZXcgTWFwKSxjPWRnLmdldChiKSx2b2lkIDA9PT1jKWRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle29mKCk7dmFyIGU9bGYoKTtlPW1mKGUsYSk7dmFyIGY9e2V4cGlyYXRpb25UaW1lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJihmLm5leHQ9aCk7Zy5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09XG5kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1kKGwsYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9aztpZihiZChrLGwpKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9cWYoYSxlKX19XG52YXIga2c9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZmcsdXNlQ29udGV4dDpmZyx1c2VFZmZlY3Q6ZmcsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmZyx1c2VMYXlvdXRFZmZlY3Q6ZmcsdXNlTWVtbzpmZyx1c2VSZWR1Y2VyOmZnLHVzZVJlZjpmZyx1c2VTdGF0ZTpmZyx1c2VEZWJ1Z1ZhbHVlOmZnfSxpZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe21nKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBzZyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNCxQZnxTZixhLGIpfSxcbnVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1tZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1tZygpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLFxubGFzdFJlbmRlcmVkUmVkdWNlcjpvZyxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6dmd9LGpnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGcoNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gdGcoNCxQZnxTZixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOnBnLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBuZygpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBwZyhvZyxhKX0sdXNlRGVidWdWYWx1ZTp2Z30seGc9bnVsbCx5Zz1udWxsLHpnPSExO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1LKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gQmcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIENnKGEpe2lmKHpnKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFCZyhhLGIpKXtiPURlKGMpO2lmKCFifHwhQmcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7emc9ITE7eGc9YTtyZXR1cm59QWcoeGcsYyl9eGc9YTt5Zz1FZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHpnPSExLHhnPWF9fWZ1bmN0aW9uIERnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfWZ1bmN0aW9uIEVnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighemcpcmV0dXJuIERnKGEpLHpnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXlnO2I7KUFnKGEsYiksYj1EZShiKTtEZyhhKTt5Zz14Zz9EZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBGZygpe3lnPXhnPW51bGw7emc9ITF9XG52YXIgR2c9VGIuUmVhY3RDdXJyZW50T3duZXIscWc9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0VmKGIsbnVsbCxjLGQpOkRmKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtJZyhiLGUpO2Q9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEtnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhVmUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsTGcoYSxiLGcsZCxlLGYpO2E9WWUoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpkZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBKZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1YZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZGQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocWc9ITEsZTxmKT9KZyhhLGIsZik6TWcoYSxiLGMsZCxmKX1mdW5jdGlvbiBOZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIE1nKGEsYixjLGQsZSl7dmFyIGY9SihjKT9JZTpILmN1cnJlbnQ7Zj1KZShiLGYpO0lnKGIsZSk7Yz1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gT2coYSxiLGMsZCxlKXtpZihKKGMpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7SWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLHZmKGIsYyxkLGUpLHhmKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayk7UGc9ITE7dmFyIHQ9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT10O3ZhciBBPWIudXBkYXRlUXVldWU7bnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dCE9PWx8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVBnfHx1ZihiLGMsaCxkLHQsbCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKSxQZz0hMSxsPWIubWVtb2l6ZWRTdGF0ZSx0PWcuc3RhdGU9bCxBPWIudXBkYXRlUXVldWUsbnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLHQ9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8bCE9PXR8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksdD1iLm1lbW9pemVkU3RhdGUpLChtPVBnfHx1ZihiLGMsaCxkLGwsdCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9XG50KSxnLnByb3BzPWQsZy5zdGF0ZT10LGcuY29udGV4dD1rLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBRZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBRZyhhLGIsYyxkLGUsZil7TmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlBlKGIsYywhMSksSmcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7R2cuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9RGYoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1EZihiLG51bGwsaCxmKSk6UyhhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZQZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/TWUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmTWUoYSxiLmNvbnRleHQsITEpO0pmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIFNnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O2lmKG51bGw9PT1hKWlmKGcpe3ZhciBoPWUuZmFsbGJhY2s7YT1aZShudWxsLGQsMCxudWxsKTswPT09KGIubW9kZSYxKSYmKGEuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpO2Q9WmUoaCxkLGMsbnVsbCk7YS5zaWJsaW5nPWQ7Yz1hO2MucmV0dXJuPWQucmV0dXJuPWJ9ZWxzZSBjPWQ9RWYoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZSBudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsaD1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9WGUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPVhlKGgsYyxoLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPURmKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooaD1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPVplKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9aCwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPVplKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9RGYoYixoLGUuY2hpbGRyZW4sYykpLGIuc3RhdGVOb2RlPWEuc3RhdGVOb2RlO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIEpnKGEsYixjKXtudWxsIT09YSYmKGIuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXMpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD94KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gVGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fEkuY3VycmVudClxZz0hMDtlbHNle2lmKGQ8Yyl7cWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6UmcoYik7RmcoKTticmVhaztjYXNlIDU6TGYoYik7YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmT2UoYik7YnJlYWs7Y2FzZSA0OkpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpVZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gU2coYSxiLGMpO2I9SmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIEpnKGEsYixjKX19ZWxzZSBxZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1cbmIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9SmUoYixILmN1cnJlbnQpO0lnKGIsYyk7ZT1oZyhudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2xnKCk7aWYoSihkKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJmtmKGIsZCxnLGEpO2UudXBkYXRlcj10ZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO3hmKGIsZCxhLGMpO2I9UWcobnVsbCxiLGQsITAsZixcbmMpfWVsc2UgYi50YWc9MCxTKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPWhmKGUpO2IudHlwZT1hO2U9Yi50YWc9V2UoYSk7Zj1MKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPU1nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9T2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9SGcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9S2cobnVsbCxiLGEsTChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OngoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE1nKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLFxuZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxPZyhhLGIsZCxlLGMpO2Nhc2UgMzpSZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/eChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKUZnKCksYj1KZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSl5Zz1FZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx4Zz1iLGU9emc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1FZihiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksRmcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJkNnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxcbmc9ZS5jaGlsZHJlbix4ZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmeGUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksTmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFMoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gU2coYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9RGYoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxIZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7VWcoYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWJkKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFJLmN1cnJlbnQpe2I9SmcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGw9aC5jb250ZXh0RGVwZW5kZW5jaWVzO2lmKG51bGwhPT1sKXtnPWguY2hpbGQ7Zm9yKHZhciBrPWwuZmlyc3Q7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kJiYwIT09XG4oay5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGs9bmYoYyksay50YWc9c2YscGYoaCxrKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtrPWguYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2s9Yztmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXt2YXIgcD1tLmFsdGVybmF0ZTtpZihtLmNoaWxkRXhwaXJhdGlvblRpbWU8ayltLmNoaWxkRXhwaXJhdGlvblRpbWU9ayxudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGsmJihwLmNoaWxkRXhwaXJhdGlvblRpbWU9ayk7ZWxzZSBpZihudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGspcC5jaGlsZEV4cGlyYXRpb25UaW1lPWs7ZWxzZSBicmVhazttPW0ucmV0dXJufWwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9az1rLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9cbm51bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLElnKGIsYyksZT1NKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1MKGUsYi5wZW5kaW5nUHJvcHMpLGY9TChlLnR5cGUsZiksS2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIExnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOkwoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxKKGQpPyhhPSEwLE9lKGIpKTphPSExLElnKGIsYyksdmYoYixkLGUsYykseGYoYixkLGUsYyksUWcobnVsbCxiLGQsITAsYSxjKX14KFwiMTU2XCIpfXZhciBWZz17Y3VycmVudDpudWxsfSxXZz1udWxsLFhnPW51bGwsWWc9bnVsbDtmdW5jdGlvbiBVZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtHKFZnLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBaZyhhKXt2YXIgYj1WZy5jdXJyZW50O0YoVmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBJZyhhLGIpe1dnPWE7WWc9WGc9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJihxZz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBNKGEsYil7aWYoWWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKVlnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O251bGw9PT1YZz8obnVsbD09PVdnP3goXCIzMDhcIik6dm9pZCAwLFhnPWIsV2cuY29udGV4dERlcGVuZGVuY2llcz17Zmlyc3Q6YixleHBpcmF0aW9uVGltZTowfSk6WGc9WGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyICRnPTAscmY9MSxzZj0yLGFoPTMsUGc9ITE7ZnVuY3Rpb24gYmgoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gY2goYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIG5mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzokZyxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBkaChhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmgoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNoKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNoKGQpKTtudWxsPT09ZXx8ZD09PWU/ZGgoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhkaChkLGIpLGRoKGUsYikpOihkaChkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGVoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKTpmaChhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNoKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgcmY6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIGFoOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgJGc6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIHNmOlBnPSEwfXJldHVybiBkfVxuZnVuY3Rpb24geWYoYSxiLGMsZCxlKXtQZz0hMTtiPWZoKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsbD1iLmZpcnN0VXBkYXRlLGs9ZjtudWxsIT09bDspe3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9bCxmPWspLGg8bSYmKGg9bSkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWw6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0RWZmZWN0PWwpKSk7bD1sLm5leHR9bT1udWxsO2ZvcihsPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09bDspe3ZhciBwPWwuZXhwaXJhdGlvblRpbWU7cDxlPyhudWxsPT09bSYmKG09bCxudWxsPT09ZyYmKGY9aykpLGg8cCYmKGg9cCkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdENhcHR1cmVkRWZmZWN0PWwpKSk7bD1sLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1rKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWt9XG5mdW5jdGlvbiBoaChhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7aWgoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2loKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBpaChhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBqaChhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmpjKGIpfX1mdW5jdGlvbiBraChhKXthLmVmZmVjdFRhZ3w9NH12YXIgbGg9dm9pZCAwLG1oPXZvaWQgMCxuaD12b2lkIDAsb2g9dm9pZCAwO2xoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTttaD1mdW5jdGlvbigpe307XG5uaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7SWYoTi5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9dmMoZyxmKTtkPXZjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj0kZChnLGYpO2Q9JGQoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1iZShnLGYpO2Q9YmUoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz10ZSl9cWUoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBsPWZbY107Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGs9ZFtjXTtsPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmayE9PWwmJihudWxsIT1rfHxudWxsIT1sKSlpZihcInN0eWxlXCI9PT1jKWlmKGwpe2ZvcihnIGluIGwpIWwuaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmxbZ10hPT1rW2ddJiYoaHx8XG4oaD17fSksaFtnXT1rW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8oaz1rP2suX19odG1sOnZvaWQgMCxsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmwhPT1rJiYoYT1hfHxbXSkucHVzaChjLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWM/bD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWsmJnNlKGUsYyksYXx8bD09PWt8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxrKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYma2goYil9fTtvaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYma2goYil9O1xudmFyIHBoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIHFoKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9amMoYykpO251bGwhPT1jJiZpYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZpYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiByaChhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtzaChhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiB0aChhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PU5mKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09TmYmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiB1aChhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9bmUoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1jLnRhZyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZSl7ZD1jLmNoaWxkLnNpYmxpbmc7ZC5yZXR1cm49YztjPWQ7Y29udGludWV9ZWxzZSBpZihudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxcbmMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIHZoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBSZSYmUmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5sYXN0RWZmZWN0LG51bGwhPT1iKSl7dmFyIGM9Yj1iLm5leHQ7ZG97dmFyIGQ9Yy5kZXN0cm95O2lmKHZvaWQgMCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtzaChlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOnJoKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtzaChhLGYpfWJyZWFrO2Nhc2UgNTpyaChhKTticmVhaztjYXNlIDQ6d2goYSl9fVxuZnVuY3Rpb24geGgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiB5aChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZih4aChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59eChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OngoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihrZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8eGgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmXG4yKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXRlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gd2goYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/eChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHZoKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZyl7aWYobnVsbCE9PWIuY2hpbGQpe2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKHZoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIHpoKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dGgoUGYsUWYsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQ2UoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PWxmKCkpKTtudWxsIT09YSYmdWgoYSxkKTtjPVxuYi51cGRhdGVRdWV1ZTtpZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgcGgpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1BaC5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX12YXIgQmg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gQ2goYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RoKGQpO3FoKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRWgoYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PUZoP0ZoPW5ldyBTZXQoW3RoaXNdKTpGaC5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO3FoKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gR2goYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6SihhLnR5cGUpJiZLZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBLZihhKSxMZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/eChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTWYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBLZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFpnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGg9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixJaD1UYi5SZWFjdEN1cnJlbnRPd25lcixKaD0xMDczNzQxODIyLEtoPSExLFQ9bnVsbCxMaD1udWxsLFU9MCxNaD0tMSxOaD0hMSxWPW51bGwsT2g9ITEsUGg9bnVsbCxRaD1udWxsLFJoPW51bGwsRmg9bnVsbDtmdW5jdGlvbiBTaCgpe2lmKG51bGwhPT1UKWZvcih2YXIgYT1ULnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO2JyZWFrO2Nhc2UgNDpLZihiKTticmVhaztjYXNlIDEwOlpnKGIpfWE9YS5yZXR1cm59TGg9bnVsbDtVPTA7TWg9LTE7Tmg9ITE7VD1udWxsfVxuZnVuY3Rpb24gVGgoKXtmb3IoO251bGwhPT1WOyl7dmFyIGE9Vi5lZmZlY3RUYWc7YSYxNiYma2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoYSYxMjgpe3ZhciBiPVYuYWx0ZXJuYXRlO251bGwhPT1iJiYoYj1iLnJlZixudWxsIT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IobnVsbCk6Yi5jdXJyZW50PW51bGwpKX1zd2l0Y2goYSYxNCl7Y2FzZSAyOnloKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO3poKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgNDp6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDg6YT1WLHdoKGEpLGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCxhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBVaCgpe2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIGE9Vi5hbHRlcm5hdGUsYj1WO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChPZixOZixiKTticmVhayBhO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOkwoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp4KFwiMTYzXCIpfX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBWaChhLGIpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYz1WLmVmZmVjdFRhZztpZihjJjM2KXt2YXIgZD1WLmFsdGVybmF0ZSxlPVYsZj1iO3N3aXRjaChlLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChSZixTZixlKTticmVhaztjYXNlIDE6dmFyIGc9ZS5zdGF0ZU5vZGU7aWYoZS5lZmZlY3RUYWcmNClpZihudWxsPT09ZClnLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaD1lLmVsZW1lbnRUeXBlPT09ZS50eXBlP2QubWVtb2l6ZWRQcm9wczpMKGUudHlwZSxkLm1lbW9pemVkUHJvcHMpO2cuY29tcG9uZW50RGlkVXBkYXRlKGgsZC5tZW1vaXplZFN0YXRlLGcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWQ9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmaGgoZSxkLGcsZik7YnJlYWs7Y2FzZSAzOmQ9ZS51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCl7Zz1udWxsO2lmKG51bGwhPT1lLmNoaWxkKXN3aXRjaChlLmNoaWxkLnRhZyl7Y2FzZSA1Omc9XG5lLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz1lLmNoaWxkLnN0YXRlTm9kZX1oaChlLGQsZyxmKX1icmVhaztjYXNlIDU6Zj1lLnN0YXRlTm9kZTtudWxsPT09ZCYmZS5lZmZlY3RUYWcmNCYmd2UoZS50eXBlLGUubWVtb2l6ZWRQcm9wcykmJmYuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19YyYxMjgmJihlPVYucmVmLG51bGwhPT1lJiYoZj1WLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9lKGYpOmUuY3VycmVudD1mKSk7YyY1MTImJihQaD1hKTtWPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBXaChhLGIpe1JoPVFoPVBoPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7dGgoVWYsTmYsZik7dGgoTmYsVGYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmc2goYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKTtYfHxXfHxZaCgxMDczNzQxODIzLCExKX1mdW5jdGlvbiBvZigpe251bGwhPT1RaCYmQmUoUWgpO251bGwhPT1SaCYmUmgoKX1cbmZ1bmN0aW9uIFpoKGEsYil7T2g9S2g9ITA7YS5jdXJyZW50PT09Yj94KFwiMTc3XCIpOnZvaWQgMDt2YXIgYz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz94KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPWIuZXhwaXJhdGlvblRpbWUsZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZWYoYSxlPmQ/ZTpkKTtJaC5jdXJyZW50PW51bGw7ZD12b2lkIDA7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt1ZT1CZDt2ZT1QZCgpO0JkPSExO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO3ZhciBmPXZvaWQgMDt0cnl7VWgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7XG5mPXZvaWQgMDt0cnl7VGgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9UWQodmUpO3ZlPW51bGw7QmQ9ISF1ZTt1ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO2Y9dm9pZCAwO3RyeXtWaChhLGMpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1pZihudWxsIT09ZCYmbnVsbCE9PVBoKXt2YXIgZz1XaC5iaW5kKG51bGwsYSxkKTtRaD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGcpfSk7Umg9Z31LaD1PaD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUWUmJlFlKGIuc3RhdGVOb2RlKTtjPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1cbmI+Yz9iOmM7MD09PWImJihGaD1udWxsKTskaChhLGIpfVxuZnVuY3Rpb24gYWkoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1Q9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKUVnKGIpLGIuZWZmZWN0VGFnJj0tMzttaChiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKW5oKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgbD1JZihOLmN1cnJlbnQpO2lmKEVnKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgaz1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscD1oO2VbRmFdPWc7ZVtHYV09bTtmPXZvaWQgMDtoPWs7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3Ioaz0wO2s8YWIubGVuZ3RoO2srKylFKGFiW2tdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixlKTtFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIsZSk7RShcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKGUsbSk7RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKGUsbSksRShcImludmFsaWRcIixlKSxzZShwLFwib25DaGFuZ2VcIil9cWUoaCxtKTtrPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYobD1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsP2UudGV4dENvbnRlbnQhPT1sJiYoaz1bXCJjaGlsZHJlblwiLGxdKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJmUudGV4dENvbnRlbnQhPT1cIlwiK2wmJihrPVtcImNoaWxkcmVuXCIsXCJcIitsXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWwmJnNlKHAsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpSYihlKTtBYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKGUpO2VlKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz10ZSl9Zj1rO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJmtoKGIpfWVsc2V7bT1iO3A9ZjtlPWc7az05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtsPT09ZmUuaHRtbCYmKGw9Z2UocCkpO2w9PT1mZS5odG1sP1wic2NyaXB0XCI9PT1wPyhlPWsuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGs9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGUuaXM/az1rLmNyZWF0ZUVsZW1lbnQocCx7aXM6ZS5pc30pOihrPWsuY3JlYXRlRWxlbWVudChwKSxcInNlbGVjdFwiPT09cCYmKHA9ayxlLm11bHRpcGxlP3AubXVsdGlwbGU9ITA6ZS5zaXplJiYocC5zaXplPWUuc2l6ZSkpKTprPWsuY3JlYXRlRWxlbWVudE5TKGwscCk7ZT1rO2VbRmFdPW07ZVtHYV09ZztsaChlLGIsITEsITEpO3A9ZTtrPWY7bT1nO3ZhciB0PWgsQT1yZShrLG0pO3N3aXRjaChrKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsXG5wKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFiLmxlbmd0aDtoKyspRShhYltoXSxwKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLHApO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixwKTtFKFwibG9hZFwiLHApO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLHApO0UoXCJzdWJtaXRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKHAsbSk7aD12YyhwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPSRkKHAsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnAuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UocCxcbm0pO2g9YmUocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX1xZShrLGgpO2w9dm9pZCAwO3ZhciB2PWssUj1wLHU9aDtmb3IobCBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkobCkpe3ZhciBxPXVbbF07XCJzdHlsZVwiPT09bD9vZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmamUoUixxKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PXZ8fFwiXCIhPT1xKSYma2UoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJmtlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYocmEuaGFzT3duUHJvcGVydHkobCk/bnVsbCE9cSYmc2UodCxsKTpudWxsIT1xJiZ0YyhSLGwscSxBKSl9c3dpdGNoKGspe2Nhc2UgXCJpbnB1dFwiOlJiKHApO1xuQWMocCxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihwKTtlZShwLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZwLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cDtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtwPW0udmFsdWU7bnVsbCE9cD9hZShoLCEhbS5tdWx0aXBsZSxwLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmYWUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHAub25jbGljaz10ZSl9KGc9d2UoZixnKSkmJmtoKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP29oKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE4uY3VycmVudCksRWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbRmFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYma2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbRmFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OktmKGIpO21oKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMTg6YnJlYWs7ZGVmYXVsdDp4KFwiMTU2XCIpfVQ9bnVsbH1iPWE7aWYoMT09PVV8fDEhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2c9MDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOyllPWYuZXhwaXJhdGlvblRpbWUsaD1mLmNoaWxkRXhwaXJhdGlvblRpbWUsZT5nJiYoZz1lKSxoPmcmJihnPWgpLGY9Zi5zaWJsaW5nO2IuY2hpbGRFeHBpcmF0aW9uVGltZT1nfWlmKG51bGwhPT1UKXJldHVybiBUO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJlxuKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1HaChhLFUpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MTAyMyxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9MTAyNCl9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBiaShhKXt2YXIgYj1UZyhhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9YWkoYSkpO0loLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGNpKGEsYil7S2g/eChcIjI0M1wiKTp2b2lkIDA7b2YoKTtLaD0hMDt2YXIgYz1IaC5jdXJyZW50O0hoLmN1cnJlbnQ9a2c7dmFyIGQ9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihkIT09VXx8YSE9PUxofHxudWxsPT09VClTaCgpLExoPWEsVT1kLFQ9WGUoTGguY3VycmVudCxudWxsLFUpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09VCYmIWRpKCk7KVQ9YmkoVCk7ZWxzZSBmb3IoO251bGwhPT1UOylUPWJpKFQpfWNhdGNoKHUpe2lmKFlnPVhnPVdnPW51bGwsbGcoKSxudWxsPT09VCllPSEwLERoKHUpO2Vsc2V7bnVsbD09PVQ/eChcIjI3MVwiKTp2b2lkIDA7dmFyIGY9VCxnPWYucmV0dXJuO2lmKG51bGw9PT1nKWU9ITAsRGgodSk7ZWxzZXthOnt2YXIgaD1hLGw9ZyxrPWYsbT11O2c9VTtrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1cbm0mJlwib2JqZWN0XCI9PT10eXBlb2YgbSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0udGhlbil7dmFyIHA9bTttPWw7dmFyIHQ9LTEsQT0tMTtkb3tpZigxMz09PW0udGFnKXt2YXIgdj1tLmFsdGVybmF0ZTtpZihudWxsIT09diYmKHY9di5tZW1vaXplZFN0YXRlLG51bGwhPT12KSl7QT0xMCooMTA3Mzc0MTgyMi12LnRpbWVkT3V0QXQpO2JyZWFrfXY9bS5wZW5kaW5nUHJvcHMubWF4RHVyYXRpb247aWYoXCJudW1iZXJcIj09PXR5cGVvZiB2KWlmKDA+PXYpdD0wO2Vsc2UgaWYoLTE9PT10fHx2PHQpdD12fW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209bDtkb3tpZih2PTEzPT09bS50YWcpdj12b2lkIDA9PT1tLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/ITE6bnVsbD09PW0ubWVtb2l6ZWRTdGF0ZTtpZih2KXtsPW0udXBkYXRlUXVldWU7bnVsbD09PWw/KGw9bmV3IFNldCxsLmFkZChwKSxtLnVwZGF0ZVF1ZXVlPWwpOmwuYWRkKHApO2lmKDA9PT0obS5tb2RlJjEpKXttLmVmZmVjdFRhZ3w9XG42NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihnPW5mKDEwNzM3NDE4MjMpLGcudGFnPXNmLHBmKGssZykpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWg7bD1nO3ZhciBSPWsucGluZ0NhY2hlO251bGw9PT1SPyhSPWsucGluZ0NhY2hlPW5ldyBCaCx2PW5ldyBTZXQsUi5zZXQocCx2KSk6KHY9Ui5nZXQocCksdm9pZCAwPT09diYmKHY9bmV3IFNldCxSLnNldChwLHYpKSk7di5oYXMobCl8fCh2LmFkZChsKSxrPWVpLmJpbmQobnVsbCxrLHAsbCkscC50aGVuKGssaykpOy0xPT09dD9oPTEwNzM3NDE4MjM6KC0xPT09QSYmKEE9MTAqKDEwNzM3NDE4MjItZ2YoaCxnKSktNUUzKSxoPUErdCk7MDw9aCYmTWg8aCYmKE1oPWgpO20uZWZmZWN0VGFnfD0yMDQ4O20uZXhwaXJhdGlvblRpbWU9ZzticmVhayBhfW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209RXJyb3IoKGljKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXG5cIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK2pjKGspKX1OaD0hMDttPWpoKG0sayk7aD1sO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZWZmZWN0VGFnfD0yMDQ4O2guZXhwaXJhdGlvblRpbWU9ZztnPUNoKGgsbSxnKTtlaChoLGcpO2JyZWFrIGE7Y2FzZSAxOmlmKHQ9bSxBPWgudHlwZSxrPWguc3RhdGVOb2RlLDA9PT0oaC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoaykpKSl7aC5lZmZlY3RUYWd8PTIwNDg7XG5oLmV4cGlyYXRpb25UaW1lPWc7Zz1FaChoLHQsZyk7ZWgoaCxnKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1UPWFpKGYpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7S2g9ITE7SGguY3VycmVudD1jO1lnPVhnPVdnPW51bGw7bGcoKTtpZihlKUxoPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1UKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtjPWEuY3VycmVudC5hbHRlcm5hdGU7bnVsbD09PWM/eChcIjI4MVwiKTp2b2lkIDA7TGg9bnVsbDtpZihOaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGR8fDAhPT1mJiZmPGR8fDAhPT1nJiZnPGQpe2ZmKGEsZCk7ZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2Q9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO1xuYj1hLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7ZmkoYSxjLGQsYiwtMSk7cmV0dXJufX1iJiYtMSE9PU1oPyhmZihhLGQpLGI9MTAqKDEwNzM3NDE4MjItZ2YoYSxkKSksYjxNaCYmKE1oPWIpLGI9MTAqKDEwNzM3NDE4MjItbGYoKSksYj1NaC1iLGZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsMD5iPzA6YikpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kLGEuZmluaXNoZWRXb3JrPWMpfX1cbmZ1bmN0aW9uIHNoKGEsYil7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDE6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGQpKSl7YT1qaChiLGEpO2E9RWgoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59YnJlYWs7Y2FzZSAzOmE9amgoYixhKTthPUNoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1qaChiLGEpLGM9Q2goYSxjLDEwNzM3NDE4MjMpLHBmKGEsYykscWYoYSwxMDczNzQxODIzKSl9XG5mdW5jdGlvbiBtZihhLGIpe3ZhciBjPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSxkPXZvaWQgMDtpZigwPT09KGIubW9kZSYxKSlkPTEwNzM3NDE4MjM7ZWxzZSBpZihLaCYmIU9oKWQ9VTtlbHNle3N3aXRjaChjKXtjYXNlIHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk6ZD0xMDczNzQxODIzO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eTpkPTEwNzM3NDE4MjItMTAqKCgoMTA3Mzc0MTgyMi1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk6ZD0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Mb3dQcmlvcml0eTpjYXNlIHIudW5zdGFibGVfSWRsZVByaW9yaXR5OmQ9MTticmVhaztkZWZhdWx0OngoXCIzMTNcIil9bnVsbCE9PUxoJiZkPT09VSYmLS1kfWM9PT1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5JiZcbigwPT09Z2l8fGQ8Z2kpJiYoZ2k9ZCk7cmV0dXJuIGR9ZnVuY3Rpb24gZWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtpZihudWxsIT09TGgmJlU9PT1jKUxoPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7ZGYoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyl9fWZ1bmN0aW9uIEFoKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9bGYoKTtiPW1mKGIsYSk7YT1oaShhLGIpO251bGwhPT1hJiYoY2YoYSxiKSxiPWEuZXhwaXJhdGlvblRpbWUsMCE9PWImJlhoKGEsYikpfVxuZnVuY3Rpb24gaGkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gZX1cbmZ1bmN0aW9uIHFmKGEsYil7YT1oaShhLGIpO251bGwhPT1hJiYoIUtoJiYwIT09VSYmYj5VJiZTaCgpLGNmKGEsYiksS2gmJiFPaCYmTGg9PT1hfHxYaChhLGEuZXhwaXJhdGlvblRpbWUpLGlpPmppJiYoaWk9MCx4KFwiMTg1XCIpKSl9ZnVuY3Rpb24ga2koYSxiLGMsZCxlKXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9dmFyIGxpPW51bGwsWT1udWxsLG1pPTAsbmk9dm9pZCAwLFc9ITEsb2k9bnVsbCxaPTAsZ2k9MCxwaT0hMSxxaT1udWxsLFg9ITEscmk9ITEsc2k9bnVsbCx0aT1yLnVuc3RhYmxlX25vdygpLHVpPTEwNzM3NDE4MjItKHRpLzEwfDApLHZpPXVpLGppPTUwLGlpPTAsd2k9bnVsbDtmdW5jdGlvbiB4aSgpe3VpPTEwNzM3NDE4MjItKChyLnVuc3RhYmxlX25vdygpLXRpKS8xMHwwKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoMCE9PW1pKXtpZihiPG1pKXJldHVybjtudWxsIT09bmkmJnIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sobmkpfW1pPWI7YT1yLnVuc3RhYmxlX25vdygpLXRpO25pPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayh6aSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGRpKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPXllKEFpLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIEFpKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7eGkoKTt2aT11aTtCaShhLGMpfWZ1bmN0aW9uICRoKGEsYil7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9XG5mdW5jdGlvbiBsZigpe2lmKFcpcmV0dXJuIHZpO0NpKCk7aWYoMD09PVp8fDE9PT1aKXhpKCksdmk9dWk7cmV0dXJuIHZpfWZ1bmN0aW9uIFhoKGEsYil7bnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3Q/KGEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09WT8obGk9WT1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFk9WS5uZXh0U2NoZWR1bGVkUm9vdD1hLFkubmV4dFNjaGVkdWxlZFJvb3Q9bGkpKTpiPmEuZXhwaXJhdGlvblRpbWUmJihhLmV4cGlyYXRpb25UaW1lPWIpO1d8fChYP3JpJiYob2k9YSxaPTEwNzM3NDE4MjMsRGkoYSwxMDczNzQxODIzLCExKSk6MTA3Mzc0MTgyMz09PWI/WWgoMTA3Mzc0MTgyMywhMSk6eWkoYSxiKSl9XG5mdW5jdGlvbiBDaSgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1ZKWZvcih2YXIgYz1ZLGQ9bGk7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVk/eChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xpPVk9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxpKWxpPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxZLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVkpe1k9YztZLm5leHRTY2hlZHVsZWRSb290PWxpO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7ZT5hJiYoYT1lLGI9ZCk7aWYoZD09PVkpYnJlYWs7aWYoMTA3Mzc0MTgyMz09PVxuYSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1vaT1iO1o9YX12YXIgRWk9ITE7ZnVuY3Rpb24gZGkoKXtyZXR1cm4gRWk/ITA6ci51bnN0YWJsZV9zaG91bGRZaWVsZCgpP0VpPSEwOiExfWZ1bmN0aW9uIHppKCl7dHJ5e2lmKCFkaSgpJiZudWxsIT09bGkpe3hpKCk7dmFyIGE9bGk7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmdWk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPXVpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PWxpKX1ZaCgwLCEwKX1maW5hbGx5e0VpPSExfX1cbmZ1bmN0aW9uIFloKGEsYil7Q2koKTtpZihiKWZvcih4aSgpLHZpPXVpO251bGwhPT1vaSYmMCE9PVomJmE8PVomJiEoRWkmJnVpPlopOylEaShvaSxaLHVpPlopLENpKCkseGkoKSx2aT11aTtlbHNlIGZvcig7bnVsbCE9PW9pJiYwIT09WiYmYTw9WjspRGkob2ksWiwhMSksQ2koKTtiJiYobWk9MCxuaT1udWxsKTswIT09WiYmeWkob2ksWik7aWk9MDt3aT1udWxsO2lmKG51bGwhPT1zaSlmb3IoYT1zaSxzaT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3BpfHwocGk9ITAscWk9ZCl9fWlmKHBpKXRocm93IGE9cWkscWk9bnVsbCxwaT0hMSxhO31mdW5jdGlvbiBCaShhLGIpe1c/eChcIjI1M1wiKTp2b2lkIDA7b2k9YTtaPWI7RGkoYSxiLCExKTtZaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIERpKGEsYixjKXtXP3goXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoZGkoKT9hLmZpbmlzaGVkV29yaz1kOkZpKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJkZpKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIEZpKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXNpP3NpPVtkXTpzaS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PXdpP2lpKys6KHdpPWEsaWk9MCk7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe1poKGEsYil9KX1mdW5jdGlvbiBEaChhKXtudWxsPT09b2k/eChcIjI0NlwiKTp2b2lkIDA7b2kuZXhwaXJhdGlvblRpbWU9MDtwaXx8KHBpPSEwLHFpPWEpfWZ1bmN0aW9uIEdpKGEsYil7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhYPWMpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBIaShhLGIpe2lmKFgmJiFyaSl7cmk9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7cmk9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIElpKGEsYixjKXtYfHxXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCk7dmFyIGQ9WDtYPSEwO3RyeXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyl9KX1maW5hbGx5eyhYPWQpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBKaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1lZChjKSYmMT09PWMudGFnP3ZvaWQgMDp4KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEooZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt4KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKEooaCkpe2M9TmUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9SGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xub2YoKTtwZihmLGUpO3FmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gS2koYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9bGYoKTtlPW1mKGYsZSk7cmV0dXJuIEppKGEsYixjLGUsZCl9ZnVuY3Rpb24gTGkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBNaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOldiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9S2EoZCk7ZT92b2lkIDA6eChcIjkwXCIpO1NiKGQpO3ljKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmYWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1sZigpKzUwMCkvMjV8MCkrMSk7Yj49SmgmJihiPUpoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPUpoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1OaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp4KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgT2k7SmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuTmkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuTmkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOngoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/eChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtCaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtOaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gT2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1PaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuT2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBQaShhLGIsYyl7Yj1LKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblBpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgT2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO0tpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07UGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IE9pO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtLaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1BpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBPaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7S2koYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblBpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBOaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFFpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1HYj1HaTtIYj1JaTtJYj1mdW5jdGlvbigpe1d8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKX07XG5mdW5jdGlvbiBSaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFBpKGEsITEsYil9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1SaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19SGkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIExpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBUaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBNaShhLGIsbnVsbCxjKX1cbnZhciBWaT17Y3JlYXRlUG9ydGFsOlRpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/eChcIjE4OFwiKTp4KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPWhkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7UWkoYyk/dm9pZCAwOngoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xueChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gU2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7UWkoYSk/dm9pZCAwOngoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhIaShmdW5jdGlvbigpe1NpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIFRpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpHaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6SWksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz94KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBraShhLGIpfWZpbmFsbHl7WD1jLFloKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpVaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5YO1g9ITA7dHJ5e2tpKGEpfWZpbmFsbHl7KFg9Yil8fFd8fFloKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSWEsSmEsS2EsQmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHBhLFFhLGZ1bmN0aW9uKGEpe3lhKGEsUGEpfSxFYixGYixEZCxEYV19fTtmdW5jdGlvbiBVaShhLGIpe1FpKGEpP3ZvaWQgMDp4KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgUGkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gVGUobih7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkhhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC42XCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFdpPXtkZWZhdWx0OlZpfSxYaT1XaSYmVml8fFdpO21vZHVsZS5leHBvcnRzPVhpLmRlZmF1bHR8fFhpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubG9hZGluZyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgd2lkdGg6IDMwMHB4O1xcbiAgaGVpZ2h0OiAzMDBweDtcXG4gIG9wYWNpdHk6IC42OyB9XFxuXFxuQGtleWZyYW1lcyBib3VuY2Utb3V0IHtcXG4gIDI1JSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDAuOCk7XFxuICAgIG9wYWNpdHk6IC44OyB9XFxuICA1MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxKTtcXG4gICAgb3BhY2l0eTogLjY7IH1cXG4gIDc1JSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDAuOCk7XFxuICAgIG9wYWNpdHk6IC44OyB9XFxuICAxMDAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoMSk7XFxuICAgIG9wYWNpdHk6IC42OyB9IH1cXG5cXG4uYW5pbWF0aW9uLWJvdW5jZS1vdXQge1xcbiAgYW5pbWF0aW9uOiBib3VuY2Utb3V0IDJzIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDsgfVxcblwiLCBcIlwiXSk7XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuXFxuYm9keSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgZm9udC1mYW1pbHk6ICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmOyB9XFxuXFxuKixcXG4qOjpiZWZvcmUsXFxuKjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogaW5oZXJpdDsgfVxcblxcbi5hc2FuYXMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IH1cXG4gIC5hc2FuYXNfX2xpc3Qge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7IH1cXG4gIC5hc2FuYXNfX2l0ZW0tY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogMzAlO1xcbiAgICBtYXJnaW46IDE0cHggMTRweDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgICBvYmplY3QtZml0OiBzY2FsZS1kb3duOyB9XFxuICAgIC5hc2FuYXNfX2l0ZW0tY29udGFpbmVyOmhvdmVyIHtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMnB4IDFweCByZ2JhKDAsIDE0MCwgMTg2LCAwLjUpOyB9XFxuICAuYXNhbmFzX19waWMge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHRyYW5zaXRpb246IC41cyBlYXNlOyB9XFxuICAuYXNhbmFzX19taWRkbGUtb24tcGljIHtcXG4gICAgdHJhbnNpdGlvbjogLjVzIGVhc2U7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAuYXNhbmFzX19pdGVtLWNvbnRhaW5lcjpob3ZlciAuYXNhbmFzX19waWMge1xcbiAgICBvcGFjaXR5OiAwLjM7IH1cXG4gIC5hc2FuYXNfX2l0ZW0tY29udGFpbmVyOmhvdmVyIC5hc2FuYXNfX21pZGRsZS1vbi1waWMge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICAuYXNhbmFzX19idG4tb24tcGljIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICAgIHBhZGRpbmc6IDE2cHggMzJweDsgfVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxudmFyIFByb3ZpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIF90aGlzLm5vdGlmeVN1YnNjcmliZXJzID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gICAgX3RoaXMucHJldmlvdXNTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHRoaXMucHJldmlvdXNTdGF0ZSAhPT0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnByb3BzLnN0b3JlKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdGhpcy5ub3RpZnlTdWJzY3JpYmVycztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgQ29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn0oQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IGJlY2F1c2Ugd2Ugd2FudFxuLy8gYGNvbm5lY3RgIHRvIHBlcmZvcm0gc3luYyB1cGRhdGVzIHRvIGEgcmVmIHRvIHNhdmUgdGhlIGxhdGVzdCBwcm9wcyBhZnRlclxuLy8gYSByZW5kZXIgaXMgYWN0dWFsbHkgY29tbWl0dGVkIHRvIHRoZSBET00uXG5cblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGludmFyaWFudChyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCwgXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgaW52YXJpYW50KCF3aXRoUmVmLCAnd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG4gIGludmFyaWFudChzdG9yZUtleSA9PT0gJ3N0b3JlJywgJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dFxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSB8fCBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICAgICAgICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgICAgICAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgICAgICAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICAgICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICAgICAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgICAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIGxhdGVzdFN0b3JlU3RhdGU6IGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuXG4gICAgICAgICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgICAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xuICAgICAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgfVxuXG4gIGludmFyaWFudChzZWxlY3RvciwgXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuXG4gIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbGVjdGluZyB0aGUgc3RvcmUgc3RhdGU6IFwiICsgZXJyLm1lc3NhZ2UgKyBcIi5cIjtcblxuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcbk9yaWdpbmFsIHN0YWNrIHRyYWNlOlwiO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn0iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IsIHVzZVN0b3JlLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuY2xhc3MgU2VhcmNoU2VydmljZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5lbmFibGVjb3JzID0gJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLyc7XHJcbiAgICB0aGlzLmhvc3QgPSAnaHR0cHM6Ly9jb250ZW50Lmdvb2dsZWFwaXMuY29tJztcclxuICAgIHRoaXMuY3g9JzAxNTcwODk5NTcyOTc5NTA3MzA0NjphNmxxY2hxZF9fdSc7XHJcbiAgICB0aGlzLmtleSA9J0FJemFTeUNQZl9ybkl0UUFCaFZjdGtPNTlKR1FiZlgxZEVSbXk2dyc7XHJcbiAgICBcclxuICAgIHRoaXMuZ2V0SGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5nZXRTZWFyY2hVUkwgPSB0aGlzLmdldFNlYXJjaFVSTC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5zZWFyY2ggPSB0aGlzLnNlYXJjaC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5nZXRJbWFnZXMgPSB0aGlzLmdldEltYWdlcy5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGVhZGVycygpIHtcclxuICAgIHJldHVybiBuZXcgSGVhZGVycyhbXHJcbiAgICAgICAgWydYLVJlZmVyZXInLCB0aGlzLmhvc3RdXHJcbiAgICBdKTtcclxuICB9XHJcblxyXG4gIGdldFNlYXJjaFVSTChxdWVyeSwgcGFnZSkge1xyXG4gICAgcmV0dXJuIGAke3RoaXMuZW5hYmxlY29yc30ke3RoaXMuaG9zdH0vY3VzdG9tc2VhcmNoL3YxP3E9JHtxdWVyeX0mY3g9JHt0aGlzLmN4fSZrZXk9JHt0aGlzLmtleX0mc3RhcnQ9JHtwYWdlfWBcclxuICB9XHJcblxyXG4gIGFzeW5jIHNlYXJjaChxdWVyeSwgcGFnZSkge1xyXG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRTZWFyY2hVUkwocXVlcnksIHBhZ2UpO1xyXG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEhlYWRlcnMoKVxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gICAgICAgIC8vIC50aGVuKHJlcyA9PiBQcm9taXNlLnJlamVjdCgnSXRzIGFuIGVycm9yJykpXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IFByb21pc2UucmVqZWN0KGVycm9yKSk7XHJcbiAgICByZXR1cm4gc2VhcmNoUmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0SW1hZ2VzKHF1ZXJ5LCBwYWdlID0gMSkge1xyXG4gICAgLy8gdHJ5IHtcclxuICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYXdhaXQgdGhpcy5zZWFyY2gocXVlcnksIHBhZ2UpO1xyXG4gICAgLy8gfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vICAgcmV0dXJuIGVycm9yO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGlmICghc2VhcmNoUmVzdWx0Lml0ZW1zKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2VhcmNoUmVzdWx0Lml0ZW1zLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnBhZ2VtYXAgJiYgaXRlbS5wYWdlbWFwLmNzZV9pbWFnZSkge1xyXG4gICAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgICBpZDogaXRlbS5jYWNoZUlkLFxyXG4gICAgICAgICAgICBhc2FuYU5hbWU6IHF1ZXJ5LFxyXG4gICAgICAgICAgICBhc2FuYVNyYzogaXRlbS5wYWdlbWFwLmNzZV9pbWFnZVswXS5zcmNcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LCBbXSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFNlYXJjaFNlcnZpY2U7IiwiaW1wb3J0IFNlYXJjaFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvc2VhcmNoJztcclxuXHJcbi8qXHJcbiAqIGFjdGlvbiB0eXBlc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBjb25zdCBBRERfQVNBTkEgPSAnQUREX0FTQU5BJztcclxuZXhwb3J0IGNvbnN0IERFTEVURV9BU0FOQSA9ICdERUxFVEVfQVNBTkEnO1xyXG5leHBvcnQgY29uc3QgQ0xFQVJfU0VRVUVOQ0UgPSAnQ0xFQVJfU0VRVUVOQ0UnO1xyXG5cclxuLypcclxuICogb3RoZXIgY29uc3RhbnRzXHJcbiAqL1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IFZpc2liaWxpdHlGaWx0ZXJzID0ge1xyXG4vLyAgIFNIT1dfQUxMOiAnU0hPV19BTEwnLFxyXG4vLyAgIFNIT1dfQ09NUExFVEVEOiAnU0hPV19DT01QTEVURUQnLFxyXG4vLyAgIFNIT1dfQUNUSVZFOiAnU0hPV19BQ1RJVkUnXHJcbi8vIH1cclxuXHJcbi8qXHJcbiAqIGFjdGlvbiBjcmVhdG9yc1xyXG4gKi9cclxuXHJcbi8vIGxldCBuZXh0QXNhbmFJZCA9IDA7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkQXNhbmEgPSBhc2FuYSA9PiB7XHJcbiAgcmV0dXJuIHsgXHJcbiAgICAgIHR5cGU6IEFERF9BU0FOQSwgXHJcbiAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgIGlkOiBhc2FuYS5pZCxcclxuICAgICAgICAgIGFzYW5hTmFtZTogYXNhbmEuYXNhbmFOYW1lLFxyXG4gICAgICAgICAgYXNhbmFTcmM6IGFzYW5hLmFzYW5hU3JjXHJcbiAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUFzYW5hID0gYXNhbmEgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IERFTEVURV9BU0FOQSxcclxuICAgICAgcGF5bG9hZDoge2lkOiBhc2FuYS5pZH0gXHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJTZXF1ZW5jZSA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBDTEVBUl9TRVFVRU5DRSxcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hfUkVRVUVTVCA9ICdTRUFSQ0hfUkVRVUVTVCc7XHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hfU1VDQ0VTUyA9ICdTRUFSQ0hfU1VDQ0VTUyc7XHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hfRkFJTFVSRSA9ICdTRUFSQ0hfRkFJTFVSRSc7XHJcblxyXG5leHBvcnQgY29uc3QgcmVxdWVzdFNlYXJjaCA9IChwaHJhc2UsIHBhZ2UpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogU0VBUkNIX1JFUVVFU1QsXHJcbiAgICBwYXlsb2FkOiB7XHJcbiAgICAgIGxvYWRpbmc6IHRydWUsXHJcbiAgICAgIHBocmFzZTogcGhyYXNlLFxyXG4gICAgICByZXN1bHRzUGFnZTogcGFnZVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hTdWNjZXNzID0gKHJlc3VsdHMsIHBhZ2UpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogU0VBUkNIX1NVQ0NFU1MsXHJcbiAgICBwYXlsb2FkOiB7XHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICByZXN1bHRzUGFnZTogcGFnZSxcclxuICAgICAgcmVzdWx0czogcmVzdWx0c1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hGYWlsdXJlID0gKGVycm9yKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6IFNFQVJDSF9GQUlMVVJFLFxyXG4gICAgcGF5bG9hZDoge1xyXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgZXJyb3I6IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZldGNoU2VhcmNoUmVzdWx0cyA9IChwaHJhc2UsIHBhZ2UgPSAxKSA9PiB7XHJcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcclxuICAgIGRpc3BhdGNoKHJlcXVlc3RTZWFyY2gocGhyYXNlLCBwYWdlKSk7XHJcbiAgICByZXR1cm4gU2VhcmNoU2VydmljZS5nZXRJbWFnZXMocGhyYXNlLCBwYWdlKVxyXG4gICAgICAudGhlbihyZXN1bHRzID0+IGRpc3BhdGNoKHNlYXJjaFN1Y2Nlc3MocmVzdWx0cywgcGFnZSkpKVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZGlzcGF0Y2goc2VhcmNoRmFpbHVyZShlcnJvcikpKTtcclxuICB9XHJcbn07IiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQgeyBBRERfQVNBTkEsIERFTEVURV9BU0FOQSwgQ0xFQVJfU0VRVUVOQ0UgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBTRUFSQ0hfUkVRVUVTVCwgU0VBUkNIX1NVQ0NFU1MsIFNFQVJDSF9GQUlMVVJFIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25zJztcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICAgIHNlYXJjaDoge1xyXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgcGhyYXNlOiAnJyxcclxuICAgICAgcmVzdWx0c1BhZ2U6IDAsXHJcbiAgICAgIHJlc3VsdHM6IFtdLFxyXG4gICAgICBlcnJvcjoge1xyXG4gICAgICAgIGlzRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6ICcnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXF1ZW5jZTogW11cclxuICB9O1xyXG5cclxuXHJcbi8vdXRpbGl0eVxyXG5cclxuLy8gZnVuY3Rpb24gdXBkYXRlT2JqZWN0KG9sZE9iamVjdCwgbmV3VmFsdWVzKSB7XHJcbi8vICAgLy8gRW5jYXBzdWxhdGUgdGhlIGlkZWEgb2YgcGFzc2luZyBhIG5ldyBvYmplY3QgYXMgdGhlIGZpcnN0IHBhcmFtZXRlclxyXG4vLyAgIC8vIHRvIE9iamVjdC5hc3NpZ24gdG8gZW5zdXJlIHdlIGNvcnJlY3RseSBjb3B5IGRhdGEgaW5zdGVhZCBvZiBtdXRhdGluZ1xyXG4vLyAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBvbGRPYmplY3QsIG5ld1ZhbHVlcylcclxuLy8gfVxyXG5cclxuLy8gZnVuY3Rpb24gYWRkSXRlbUluQXJyYXkoc3RhdGVBcnJheSwgbmV3SXRlbSkge1xyXG4vLyAgIGNvbnN0IG5ld0l0ZW1zID0gc3RhdGVBcnJheS5jb25jYXQobmV3SXRlbSk7XHJcblxyXG4vLyAgIHJldHVybiB1cGRhdGVPYmplY3Qoc3RhdGVBcnJheSwgeyB0b2RvczogbmV3SXRlbXMgfSlcclxuLy8gfVxyXG5cclxuY29uc3QgeW9nYUZsb3dSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLnNlcXVlbmNlLCBhY3Rpb24pID0+IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIEFERF9BU0FOQSA6XHJcbiAgICAgIHJldHVybiBzdGF0ZS5jb25jYXQoe1xyXG4gICAgICAgIGlkOiBhY3Rpb24ucGF5bG9hZC5pZCxcclxuICAgICAgICBhc2FuYU5hbWU6IGFjdGlvbi5wYXlsb2FkLmFzYW5hTmFtZSxcclxuICAgICAgICBhc2FuYVNyYzogYWN0aW9uLnBheWxvYWQuYXNhbmFTcmNcclxuICAgICAgfSk7XHJcbiAgICBjYXNlIERFTEVURV9BU0FOQTpcclxuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcihhc2FuYSA9PiBhc2FuYS5pZCAhPT0gYWN0aW9uLnBheWxvYWQuaWQpO1xyXG4gICAgY2FzZSBDTEVBUl9TRVFVRU5DRTpcclxuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZS5zZXF1ZW5jZTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBzZWFyY2hSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLnNlYXJjaCwgYWN0aW9uKSA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTRUFSQ0hfUkVRVUVTVCA6XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGxvYWRpbmc6IGFjdGlvbi5wYXlsb2FkLmxvYWRpbmcsXHJcbiAgICAgICAgcGhyYXNlOiBhY3Rpb24ucGF5bG9hZC5waHJhc2UsXHJcbiAgICAgICAgcmVzdWx0c1BhZ2U6IGFjdGlvbi5wYXlsb2FkLnJlc3VsdHNQYWdlLFxyXG4gICAgICB9KTtcclxuICAgIGNhc2UgU0VBUkNIX1NVQ0NFU1MgOlxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBsb2FkaW5nOiBhY3Rpb24ucGF5bG9hZC5sb2FkaW5nLFxyXG4gICAgICAgIGVycm9yOiB7XHJcbiAgICAgICAgICBpc0Vycm9yOiBmYWxzZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXN1bHRzUGFnZTogYWN0aW9uLnBheWxvYWQucmVzdWx0c1BhZ2UsXHJcbiAgICAgICAgcmVzdWx0czogYWN0aW9uLnBheWxvYWQucmVzdWx0c1xyXG4gICAgICB9KTtcclxuICAgIGNhc2UgU0VBUkNIX0ZBSUxVUkUgOlxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBsb2FkaW5nOiBhY3Rpb24ucGF5bG9hZC5sb2FkaW5nLFxyXG4gICAgICAgIGVycm9yOiB7XHJcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTogYWN0aW9uLnBheWxvYWQuZXJyb3JcclxuICAgICAgICB9XHJcbiAgICAgIH0pOyBcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgc2VxdWVuY2U6IHlvZ2FGbG93UmVkdWNlcixcclxuICBzZWFyY2g6IHNlYXJjaFJlZHVjZXJcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyOyIsImltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMvcmVkdWNlcic7XHJcbmltcG9ydCB7IGRldlRvb2xzRW5oYW5jZXIgIH0gZnJvbSAncmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uJztcclxuXHJcbmNvbnN0IGNvbmZpZ3VyZVN0b3JlID0gKCkgPT4ge1xyXG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUgKFxyXG4gICAgcm9vdFJlZHVjZXIsXHJcbiAgICBjb21wb3NlKFxyXG4gICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmtNaWRkbGV3YXJlKSwgLy8gbGV0cyB1cyBkaXNwYXRjaCgpIGZ1bmN0aW9uc1xyXG4gICAgICBkZXZUb29sc0VuaGFuY2VyKClcclxuICAgIClcclxuICApO1xyXG5cclxuICByZXR1cm4gc3RvcmU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbmZpZ3VyZVN0b3JlOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNvbnN0IEFzYW5hUGljdHVyZSA9ICh7IGltZ1NyYywgb25DbGljaywgYnRuVGV4dCB9KSA9PiAoXHJcbiAgPGRpdj5cclxuICAgIDxpbWcgc3JjPXtpbWdTcmN9IGNsYXNzTmFtZT1cImFzYW5hc19fcGljXCI+PC9pbWc+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFzYW5hc19fbWlkZGxlLW9uLXBpY1wiPlxyXG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImFzYW5hc19fYnRuLW9uLXBpY1wiIG9uQ2xpY2s9e29uQ2xpY2t9PntidG5UZXh0fTwvYnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5Bc2FuYVBpY3R1cmUucHJvcFR5cGVzID0ge1xyXG4gIGltZ1NyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgYnRuVGV4dDogIFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBc2FuYVBpY3R1cmU7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgQXNhbmFQaWN0dXJlIGZyb20gJy4vYXNhbmFQaWN0dXJlJztcclxuXHJcbmNvbnN0IEFzYW5hc0xpc3QgPSAoeyBhc2FuYXMsIG9uSXRlbUNsaWNrLCBidG5UZXh0LCBzaG93VGl0bGUgfSkgPT4gKFxyXG4gIGFzYW5hcy5sZW5ndGggPiAwICYmXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJhc2FuYXNfX2xpc3RcIj5cclxuICAgIHthc2FuYXMubWFwKChhc2FuYSwgaW5kZXgpID0+IChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhc2FuYXNfX2l0ZW0tY29udGFpbmVyXCIga2V5PXthc2FuYS5pZH0+XHJcbiAgICAgICAgPHA+e2FzYW5hLmlkfTwvcD5cclxuICAgICAgICB7IHNob3dUaXRsZSAmJiA8cD57YXNhbmEuYXNhbmFOYW1lfTwvcD4gfVxyXG4gICAgICAgIDxBc2FuYVBpY3R1cmUgXHJcbiAgICAgICAgICBpbWdTcmM9e2FzYW5hLmFzYW5hU3JjfVxyXG4gICAgICAgICAgb25DbGljayA9IHsoKSA9PiBvbkl0ZW1DbGljayhhc2FuYSkgfVxyXG4gICAgICAgICAgYnRuVGV4dCA9IHtidG5UZXh0fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKSl9XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5Bc2FuYXNMaXN0LnByb3BUeXBlcyA9IHtcclxuICBhc2FuYXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFzYW5hc0xpc3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNvbnN0IFBhZ2luYXRpb24gPSAoeyB0ZXh0VG9TZWFyY2gsIHBhZ2VOdW1iZXIsIGZldGNoUGFnZSB9KSA9PiB7XHJcblxyXG4gIGNvbnN0IG51bWJlck9mUGljc09uUGFnZSA9IDEwO1xyXG4gIGxldCBwYWdlTnVtYmVyVG9TaG93ID0gTWF0aC5mbG9vcihwYWdlTnVtYmVyL251bWJlck9mUGljc09uUGFnZSArIDEpOyBcclxuXHJcbiAgY29uc3Qgb25DaGFuZ2VQYWdlID0gKG51bWJlclRvQ2hhbmdlKSA9PiB7XHJcbiAgICBwYWdlTnVtYmVyVG9TaG93ID0gTWF0aC5mbG9vcihwYWdlTnVtYmVyL251bWJlck9mUGljc09uUGFnZSArIDEpO1xyXG5cclxuICAgIGxldCBwYWdlTnVtYmVyVG9GZXRjaCA9IChwYWdlTnVtYmVyVG9TaG93ICsgbnVtYmVyVG9DaGFuZ2UpICogbnVtYmVyT2ZQaWNzT25QYWdlICsgMSAtIG51bWJlck9mUGljc09uUGFnZTtcclxuICAgIGZldGNoUGFnZSh0ZXh0VG9TZWFyY2gsIHBhZ2VOdW1iZXJUb0ZldGNoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVBhZ2UoLTEpfT5QcmV2aW91czwvYnV0dG9uPlxyXG4gICAgICA8cD57cGFnZU51bWJlclRvU2hvd308L3A+XHJcbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gb25DaGFuZ2VQYWdlKDEpfT5OZXh0PC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuUGFnaW5hdGlvbi5wcm9wVHlwZXMgPSB7XHJcbiAgICBwYWdlTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbiAgICBmZXRjaFBhZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxuICB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGxvYWRpbmdTcmMgZnJvbSAnLi4vLi4vc3RhdGljL29tLnBuZyc7XHJcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcclxuXHJcbmNvbnN0IExvYWRpbmdJbmRpY2F0b3IgPSAoKSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9J2xvYWRpbmcgYW5pbWF0aW9uLWJvdW5jZS1vdXQnPlxyXG4gICAgPGltZyBzcmM9e2xvYWRpbmdTcmN9Lz5cclxuICA8L2Rpdj5cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdJbmRpY2F0b3I7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCBBc2FuYXNMaXN0IGZyb20gJy4vYXNhbmFzTGlzdCc7XHJcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4vcGFnaW5hdGlvbi9pbmRleCc7XHJcbmltcG9ydCBMb2FkaW5nSW5kaWNhdG9yIGZyb20gJy4vbG9hZGluZy1pbmRpY2F0b3IvaW5kZXgnXHJcbmltcG9ydCB7IGFkZEFzYW5hIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25zJztcclxuaW1wb3J0IHsgcmVxdWVzdFNlYXJjaCwgc2VhcmNoU3VjY2VzcywgZmV0Y2hTZWFyY2hSZXN1bHRzIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25zJztcclxuaW1wb3J0ICcuLi9zY3NzL2FwcC5zY3NzJztcclxuXHJcbmNsYXNzIEFzYW5hU2VhcmNoIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMub25TZWFyY2hTdWJtaXQgPSB0aGlzLm9uU2VhcmNoU3VibWl0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vblNlYXJjaElucHV0ID0gdGhpcy5vblNlYXJjaElucHV0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkFkZFRvRmxvd0NsaWNrID0gdGhpcy5vbkFkZFRvRmxvd0NsaWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zdG9yZSA9IHRoaXMuY29udGV4dDtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgc2VhcmNoOiAnJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2hTdWJtaXQoZXZlbnQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgIHRoaXMucHJvcHMuZmV0Y2hTZWFyY2hSZXN1bHRzKHRoaXMuc3RhdGUuc2VhcmNoKTtcclxuICAgIH07XHJcblxyXG4gICAgb25TZWFyY2hJbnB1dChldmVudCkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VhcmNoOiBldmVudC50YXJnZXQudmFsdWUgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIG9uQWRkVG9GbG93Q2xpY2sgKGFzYW5hKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuYWRkQXNhbmEoe1xyXG4gICAgICAgIGlkOiBhc2FuYS5pZCxcclxuICAgICAgICBhc2FuYU5hbWU6IGFzYW5hLmFzYW5hTmFtZSxcclxuICAgICAgICBhc2FuYVNyYzogYXNhbmEuYXNhbmFTcmNcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhc2FuYXNcIj5cclxuICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwiYXNhbmFzX19zZWFyY2gtZm9ybVwiIG9uU3VibWl0PXt0aGlzLm9uU2VhcmNoU3VibWl0fT5cclxuICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXsnU2VhcmNoIGFzYW5hJ31cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFzYW5hc19fc2VhcmNoLWlucHV0XCJcclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uU2VhcmNoSW5wdXR9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2FkaW5nXHJcbiAgICAgICAgICAgICAgPyA8TG9hZGluZ0luZGljYXRvciAvPlxyXG4gICAgICAgICAgICAgIDogdGhpcy5wcm9wcy5lcnJvci5pc0Vycm9yIFxyXG4gICAgICAgICAgICAgICAgPyAgPGRpdj57dGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgOiA8PlxyXG4gICAgICAgICAgICAgICAgICAgIDxBc2FuYXNMaXN0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgYXNhbmFzPXt0aGlzLnByb3BzLnJlc3VsdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkl0ZW1DbGljaz17dGhpcy5vbkFkZFRvRmxvd0NsaWNrfVxyXG4gICAgICAgICAgICAgICAgICAgICAgYnRuVGV4dD1cIkFkZCB0byBmbG93XCJcclxuICAgICAgICAgICAgICAgICAgICAgIHNob3dUaXRsZT17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlc3VsdHMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgPFBhZ2luYXRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXI9e3RoaXMucHJvcHMucmVzdWx0c1BhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb1NlYXJjaD17dGhpcy5zdGF0ZS5zZWFyY2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoUGFnZT17dGhpcy5wcm9wcy5mZXRjaFNlYXJjaFJlc3VsdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgXHJcbiBcclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBzZWFyY2ggOiB7bG9hZGluZywgZXJyb3IsIHJlc3VsdHMsIHJlc3VsdHNQYWdlfVxyXG4gIH0gPSBzdGF0ZTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGxvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICAgIHJlc3VsdHNQYWdlLFxyXG4gICAgcmVzdWx0c1xyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxyXG4gIG1hcFN0YXRlVG9Qcm9wcyxcclxuICB7IFxyXG4gICAgYWRkQXNhbmEsXHJcbiAgICBmZXRjaFNlYXJjaFJlc3VsdHMsXHJcbiAgICByZXF1ZXN0U2VhcmNoLFxyXG4gICAgc2VhcmNoU3VjY2Vzc1xyXG4gIH1cclxuKShBc2FuYVNlYXJjaCk7OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBBc2FuYXNMaXN0IGZyb20gJy4vYXNhbmFzTGlzdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgZGVsZXRlQXNhbmEsY2xlYXJTZXF1ZW5jZSB9IGZyb20gJy4uL2FjdGlvbnMvYWN0aW9ucyc7XHJcblxyXG5jb25zdCBZb2dhU2VxdWVuY2UgPSAoe3NlcXVlbmNlLCBkZWxldGVBc2FuYSxjbGVhclNlcXVlbmNlfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInlvZ2Etc2VxdWVuY2VcIj5cclxuICAgICAgPGgyPk15IHNlcXVlbmNlPC9oMj5cclxuICAgICAge1xyXG4gICAgICAgIHNlcXVlbmNlICYmIHNlcXVlbmNlLmxlbmd0aFxyXG4gICAgICAgICAgPyA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxBc2FuYXNMaXN0IFxyXG4gICAgICAgICAgICAgICAgYXNhbmFzPXtzZXF1ZW5jZX1cclxuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrPXtkZWxldGVBc2FuYX1cclxuICAgICAgICAgICAgICAgIGJ0blRleHQgPSAnRGVsZXRlIGZyb20gc2VxdWVuY2UnXHJcbiAgICAgICAgICAgICAgICBzaG93VGl0bGU9e3RydWV9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NsZWFyU2VxdWVuY2V9PkNsZWFyIHNlcXVlbmNlPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgOiBcIk5vIGFzYW5hcywgeWF5IVwiXHJcbiAgICAgIH1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG4vL21hcFN0YXRlVG9Qcm9wczogY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHN0b3JlIHN0YXRlIGNoYW5nZXMuIFxyXG4vL0l0IHJlY2VpdmVzIHRoZSBlbnRpcmUgc3RvcmUgc3RhdGUsIGFuZCBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBvZiBkYXRhIHRoaXMgY29tcG9uZW50IG5lZWRzLlxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XHJcbiAgICByZXR1cm4geyBzZXF1ZW5jZTogc3RhdGUuc2VxdWVuY2UgfSA7IFxyXG59XHJcblxyXG5Zb2dhU2VxdWVuY2UucHJvcFR5cGVzID0ge1xyXG4gIHNlcXVlbmNlOiAgUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcbiAgZGVsZXRlQXNhbmE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcclxuICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAge1xyXG4gICAgZGVsZXRlQXNhbmEsXHJcbiAgICBjbGVhclNlcXVlbmNlXHJcbiAgfSBcclxuICApKFlvZ2FTZXF1ZW5jZSk7IiwiaW1wb3J0IFwiQGJhYmVsL3BvbHlmaWxsXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcblxyXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9zdG9yZS9jb25maWd1cmVTdG9yZSdcclxuaW1wb3J0IEFzYW5hU2VhcmNoIGZyb20gJy4vY29tcG9uZW50cy9hc2FuYVNlYXJjaCc7XHJcbmltcG9ydCBZb2dhU2VxdWVuY2UgZnJvbSAnLi9jb21wb25lbnRzL3lvZ2FTZXF1ZW5jZSc7XHJcblxyXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XHJcblxyXG5jb25zdCBJbmRleCA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICA8QXNhbmFTZWFyY2gvPlxyXG4gICAgICA8WW9nYVNlcXVlbmNlLz5cclxuICAgICA8L1Byb3ZpZGVyPlxyXG4gICk7ICBcclxufTtcclxuXHJcblJlYWN0RE9NLnJlbmRlcig8SW5kZXggLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5kZXhcIikpOyJdLCJzb3VyY2VSb290IjoiIn0=